{"version":3,"file":"app.9b5d325f993688b89aea.js","mappings":"6FAIO,SAAS,EAAYA,GACxB,OAAOC,MAAMC,QAAQF,IAAMG,YAAYC,OAAOJ,GAiB3C,SAAS,EAAYA,IAHrB,SAAsBA,GACzB,OAAY,MAALA,GAAkC,mBAAdA,EAAEK,SAGzB,CAAaL,IACbA,EAAEK,UAGH,SAASC,EAAgBN,EAAGO,GAC/B,OAAOC,OAAOC,eAAeT,GAAGU,cAAgBF,OAAOC,eAAeF,GAAGG,YAEtE,MAAMC,EACTD,YAAYE,GACRC,KAAKD,KAAOA,EAEhB,yDACI,OAAOC,KAAKC,QAEhB,+CACI,OAAOD,KAAKC,QAEhB,4CACI,MAAMC,EAAMF,KAAKD,KAAKI,OAEtB,OADAH,KAAKC,QAAUC,EAAIE,OACXF,EAAIG,KAEhB,yCACI,MAAM,IAAIC,MAAM,gCAEpBd,YAIG,SAAS,EAAce,GAC1B,MAAkC,mBAApBA,EAAEC,cACVD,EAAEC,gBACF,IAAIV,EAAWS,EAAEE,OAAOC,aAE3B,SAAS,EAAWC,GACvB,MAAO,CACH,CAACF,OAAOC,YAAc,OAAOV,MAC7BG,OACI,MAAMS,EAAUD,EAAG,6CAEnB,MAAO,CAAEN,MAAOO,EAASR,MADTQ,EAAUD,EAAG,qDAAkDE,KA+DpF,SAASC,EAAaC,EAAGC,GAC5B,IAAIC,EAAMF,EAAEG,SAAS,IACrB,KAAOD,EAAID,OAASA,GAChBC,EAAM,IAAMA,EAEhB,OAAOA,EAYJ,SAAS,EAAWE,GACvB,MAAMC,EAAQD,EACd,MAA+B,iBAAjBC,EAAMC,OACdD,EAAMC,OACS,IAAdF,EAAKG,KACF,GAAgC,IAA5BH,EAAKI,oBAMhB,SAAS,EAAcR,EAAGS,GAE7B,OADAT,EAAIA,EAAI,GAAc,MAATS,GAA2B,KAAVA,EAAe,WAAaT,EAAI,EAAIA,GACzDG,SAASM,GAEf,MAAMC,EACTC,UAAUnB,GAIN,OAHKkB,EAAUE,MAAMC,IAAIrB,IACrBkB,EAAUE,MAAME,IAAItB,IAAKkB,EAAUK,OAEhCL,EAAUE,MAAMI,IAAIxB,IAK5B,SAASyB,EAAWC,GACvB,IAAIlB,EAAI,EACJmB,EAAI,KACR,MAAMC,EAAMF,EAAEjB,OACd,KAAOD,EAAIoB,GACPD,EAAS,GAAJA,EAAUD,EAAEG,WAAWrB,KAEhC,OAAOmB,EAEJ,SAASG,EAAWlD,GACvB,OAAW,WAAJA,EAAiB,EAGrB,SAASmD,EAAiBC,GAC7B,OAAsB,IAAlBA,EAAOvB,OACA,EAEJuB,EAAOC,QAAO,CAACC,EAAIC,KACbD,GAAM,GAAKA,EAAMC,IAwC3B,SAASC,EAAexD,GAC3B,GAAS,MAALA,EACA,OAAO,EAEX,cAAeA,GACX,IAAK,UACD,OAAOA,EAAI,EAAI,EACnB,IAAK,SACD,OAAOkD,EAAWlD,GACtB,IAAK,SACD,OAAO6C,EAAW7C,GACtB,QACI,OA7NZ,SAAoBA,GAChB,MAAgC,mBAAlBA,EAAEyD,YA4NJC,CAAW1D,GACJA,EAAEyD,cAEJ,EAAYzD,GAvB1B,SAAmBA,GACtB,MAAMgD,EAAMhD,EAAE6B,OACRuB,EAAS,IAAInD,MAAM+C,GACzB,IAAK,IAAIpB,EAAI,EAAGA,EAAIoB,EAAKpB,IACrBwB,EAAOxB,GAAK4B,EAAexD,EAAE4B,IAEjC,OAAOuB,EAAiBC,GAkBLO,CAAU3D,GAEZA,aAAa4D,KA7B3B,SAAkB5D,GACrB,OAAOA,EAAE6D,UA6BUC,CAAS9D,GAEXQ,OAAOC,eAAeT,GAAGU,cAAgBF,OAGvC2C,EADQ3C,OAAOuD,OAAO/D,GAAGgE,KAAKC,GAAMT,EAAeS,MAKnDf,EAAWZ,EAAU4B,GAAGlE,KAcxC,SAASmE,EAAgBnE,EAAGO,EAAG6D,GAClC,GAAS,MAALpE,EACA,OAAY,MAALO,EAEX,GAAS,MAALA,EACA,OAAO,EAEX,GAAIP,EAAE6B,SAAWtB,EAAEsB,OACf,OAAO,EAEX,IAAK,IAAID,EAAI,EAAGA,EAAI5B,EAAE6B,OAAQD,IAC1B,IAAKwC,EAAGpE,EAAE4B,GAAIrB,EAAEqB,IACZ,OAAO,EAGf,OAAO,EAEJ,SAAS,EAAY5B,EAAGO,GAC3B,OAAO4D,EAAgBnE,EAAGO,EAAG,GAiB1B,SAAS,EAAOP,EAAGO,GACtB,OAAIP,IAAMO,IAGI,MAALP,EACO,MAALO,EAEG,MAALA,GAGa,iBAANP,IA3SpB,SAAqBA,GACjB,MAA2B,mBAAbA,EAAEqE,OA6SPC,CAAYtE,GACVA,EAAEqE,OAAO9D,GAEX,EAAYP,GACV,EAAYO,IAAM,EAAYP,EAAGO,GAEnCP,aAAa4D,KACVrD,aAAaqD,MAAgC,IAAvB,EAAa5D,EAAGO,GAGvCC,OAAOC,eAAeT,GAAGU,cAAgBF,QAtCxD,SAAsBR,EAAGO,GACrB,MAAMgE,EAAQ/D,OAAOgE,KAAKxE,GACpByE,EAAQjE,OAAOgE,KAAKjE,GAC1B,GAAIgE,EAAM1C,SAAW4C,EAAM5C,OACvB,OAAO,EAEX0C,EAAMG,OACND,EAAMC,OACN,IAAK,IAAI9C,EAAI,EAAGA,EAAI2C,EAAM1C,OAAQD,IAC9B,GAAI2C,EAAM3C,KAAO6C,EAAM7C,KAAO,EAAO5B,EAAEuE,EAAM3C,IAAKrB,EAAEkE,EAAM7C,KACtD,OAAO,EAGf,OAAO,EAyBuD+C,CAAa3E,EAAGO,KAG3E,SAAS,EAAaP,EAAGO,GAC5B,IAAIqE,EACAC,EAUJ,MARI,WAAY7E,GAAK,WAAYO,GAC7BqE,EAAQ5E,EAAE6D,UACVgB,EAAQtE,EAAEsD,YAGVe,EAAQ5E,EAAE6D,UAAY,EAAW7D,GACjC6E,EAAQtE,EAAEsD,UAAY,EAAWtD,IAE9BqE,IAAUC,EAAQ,EAAKD,EAAQC,GAAS,EAAI,EAEhD,SAAS,EAAkB7E,EAAGO,GACjC,OAAOP,IAAMO,EAAI,EAAKP,EAAIO,GAAK,EAAI,EAoBhC,SAASuE,EAAc9E,EAAGO,GAC7B,OAnBG,SAA2BP,EAAGO,EAAGwE,GACpC,GAAS,MAAL/E,EACA,OAAY,MAALO,EAAY,EAAI,EAE3B,GAAS,MAALA,EACA,OAAQ,EAEZ,GAAIP,EAAE6B,SAAWtB,EAAEsB,OACf,OAAO7B,EAAE6B,OAAStB,EAAEsB,QAAU,EAAI,EAEtC,IAAK,IAAID,EAAI,EAAGoD,EAAI,EAAGpD,EAAI5B,EAAE6B,OAAQD,IAEjC,GADAoD,EAAID,EAAK/E,EAAE4B,GAAIrB,EAAEqB,IACP,IAANoD,EACA,OAAOA,EAGf,OAAO,EAGAC,CAAkBjF,EAAGO,EAAG2E,GAwB5B,SAASA,EAAQlF,EAAGO,GACvB,OAAIP,IAAMO,EACC,EAEG,MAALP,EACO,MAALO,EAAY,GAAK,EAEd,MAALA,EACE,EAEW,iBAANP,EACLA,EAAIO,GAAK,EAAI,EArY5B,SAAsBP,GAClB,MAA8B,mBAAhBA,EAAEmF,UAsYPC,CAAapF,GACXA,EAAEmF,UAAU5E,GAEd,EAAYP,GACV,EAAYO,GAAKuE,EAAc9E,EAAGO,IAAM,EAE1CP,aAAa4D,KACXrD,aAAaqD,KAAO,EAAa5D,EAAGO,IAAM,EAG1CC,OAAOC,eAAeT,GAAGU,cAAgBF,OA7CxD,SAAwBR,EAAGO,GACvB,MAAMgE,EAAQ/D,OAAOgE,KAAKxE,GACpByE,EAAQjE,OAAOgE,KAAKjE,GAC1B,GAAIgE,EAAM1C,SAAW4C,EAAM5C,OACvB,OAAO0C,EAAM1C,OAAS4C,EAAM5C,QAAU,EAAI,EAE9C0C,EAAMG,OACND,EAAMC,OACN,IAAK,IAAI9C,EAAI,EAAGoD,EAAI,EAAGpD,EAAI2C,EAAM1C,OAAQD,IAAK,CAC1C,MAAMyD,EAAMd,EAAM3C,GAClB,GAAIyD,IAAQZ,EAAM7C,GACd,OAAOyD,EAAMZ,EAAM7C,IAAM,EAAI,EAI7B,GADAoD,EAAIE,EAAQlF,EAAEqF,GAAM9E,EAAE8E,IACZ,IAANL,EACA,OAAOA,EAInB,OAAO,EAyBsDM,CAAetF,EAAGO,IAAM,EAMlF,SAASgF,EAAIC,EAAUxF,EAAGO,GAC7B,OAAOiF,EAASxF,EAAGO,GAAK,EAAIP,EAAIO,EAiB7B,SAASkF,EAAUC,GACtB,MAAMC,EAAM,GACZ,IAAK,MAAMC,KAAMF,EACbC,EAAIC,EAAG,IAAMA,EAAG,GAEpB,OAAOD,EAnRXrD,EAAUE,MAAQ,IAAIqD,QACtBvD,EAAUK,MAAQ,EAyUlB,MAAMmD,EAAUxE,OAAO,WAChB,SAAS,EAAQyE,EAAOC,GAE3B,GAAS,MAALA,GAAaA,EAAEnE,OAAS,EACxB,OAAOmE,EAEX,MAAMC,EAAY,IAAIC,KAClB,IAAIC,EAAMH,EACV,IAAK,IAAIpE,EAAI,EAAGA,EAAImE,EAAOnE,IACvBuE,EAAMA,EAAID,EAAKtE,IAEnB,OAAOuE,GAGX,OADAF,EAAUH,GAAWE,EACdC,EAEX,SAASG,EAAOF,EAAMH,EAAOC,GACzB,OAAQK,GAAkB,IAAVN,EACVC,KAAKE,EAAKI,OAAO,CAACD,KAGlBD,EAAOF,EAAKI,OAAO,CAACD,IAAON,EAAQ,EAAGC,GCjfzC,SAAS,EAAShG,EAAGuG,EAAY,GACpC,GAAS,MAALvG,GAA0B,iBAANA,EAAgB,CACpC,GAA0B,mBAAfA,EAAE+B,SACT,OAAO/B,EAAE+B,WAER,GAAIT,OAAOC,YAAYvB,EACxB,OAxBL,SAAqBwG,GACxB,IAAI7D,EAAQ,EACRb,EAAM,IACV,IAAK,MAAM9B,KAAKwG,EAAM,CAClB,GAAc,IAAV7D,EACAb,GAAO,EAAS9B,OAEf,IAAc,MAAV2C,EAAe,CACpBb,GAAO,QACP,MAGAA,GAAO,KAAO,EAAS9B,GAE3B2C,IAEJ,OAAOb,EAAM,IAQE2E,CAAYzG,GAElB,CACD,MAAM0G,EAAOlG,OAAOC,eAAeT,GAAGU,YACtC,OAAOgG,IAASlG,QAAU+F,EAAY,GAEhC,KAAO/F,OAAOmG,QAAQ3G,GAAGgE,KAAI,EAAE4C,EAAG3C,KAAO2C,EAAI,MAAQ,EAAS3C,EAAGsC,EAAY,KAAIM,KAAK,QAAU,KAChGH,EAAKI,MAGnB,OAAOC,OAAO/G,GAmBX,MAAM,EACL8G,WACA,OAAOjG,KAAKmG,QAAQnG,KAAKoG,KAE7BC,SACI,OAA8B,IAAvBrG,KAAK6E,OAAO7D,OAAehB,KAAKiG,KAAO,CAACjG,KAAKiG,MAAMR,OAAOzF,KAAK6E,QAE1E3D,WACI,OAzBD,SAAuB+E,EAAMpB,GAChC,GAAsB,IAAlBA,EAAO7D,OACP,OAAOiF,EAEN,CACD,IAAIK,EAAW,GACXC,GAAa,EAQjB,OAPsB,IAAlB1B,EAAO7D,QACPsF,EAAW,EAASzB,EAAO,IAC3B0B,EAAaD,EAASE,QAAQ,MAAQ,GAGtCF,EAAWzB,EAAO1B,KAAKhE,GAAM,EAASA,KAAI6G,KAAK,MAE5CC,GAAQM,EAAa,KAAO,KAAOD,GAAYC,EAAa,IAAM,KAWlEE,CAAczG,KAAKiG,KAAMjG,KAAK6E,QAEzCjC,cACI,MAAML,EAASvC,KAAK6E,OAAO1B,KAAKhE,GAAMwD,EAAexD,KAErD,OADAoD,EAAOmE,OAAO,EAAG,EAAGrE,EAAWrC,KAAKoG,MAC7B9D,EAAiBC,GAE5BiB,OAAOmD,GACH,OAAI3G,OAAS2G,KAGHlH,EAAgBO,KAAM2G,IAGvB3G,KAAKoG,MAAQO,EAAMP,KACjB,EAAYpG,KAAK6E,OAAQ8B,EAAM9B,QAM9CP,UAAUqC,GACN,OAAI3G,OAAS2G,EACF,EAEDlH,EAAgBO,KAAM2G,GAGvB3G,KAAKoG,MAAQO,EAAMP,IACjBnC,EAAcjE,KAAK6E,OAAQ8B,EAAM9B,QAGjC7E,KAAKoG,IAAMO,EAAMP,KAAO,EAAI,GAN3B,GAUpB,SAASQ,EAAajB,GAClB,MAAMpF,EAAI,GACJoD,EAAOhE,OAAOgE,KAAKgC,GACzB,IAAK,IAAI5E,EAAI,EAAGA,EAAI4C,EAAK3C,OAAQD,IAC7BR,EAAEoD,EAAK5C,IAAM4E,EAAKhC,EAAK5C,IAE3B,OAAOR,EAEX,SAASsG,EAAelB,GACpB,MAAO,KAAOhG,OAAOmG,QAAQH,GAAMxC,KAAI,EAAE4C,EAAG3C,KAAO2C,EAAI,MAAQ,EAAS3C,KAAI4C,KAAK,QAAU,KAE/F,SAASc,EAAkBnB,GAEvB,OAAOrD,EADQ3C,OAAOuD,OAAOyC,GAAMxC,KAAKC,GAAMT,EAAeS,MAGjE,SAAS2D,EAAapB,EAAMgB,GACxB,GAAIhB,IAASgB,EACT,OAAO,EAEN,GAAKlH,EAAgBkG,EAAMgB,GAG3B,CACD,MAAMK,EAAYrH,OAAOgE,KAAKgC,GAC9B,IAAK,IAAI5E,EAAI,EAAGA,EAAIiG,EAAUhG,OAAQD,IAClC,IAAK,EAAO4E,EAAKqB,EAAUjG,IAAK4F,EAAMK,EAAUjG,KAC5C,OAAO,EAGf,OAAO,EATP,OAAO,EAYf,SAASkG,EAAgBtB,EAAMgB,GAC3B,GAAIhB,IAASgB,EACT,OAAO,EAEN,GAAKlH,EAAgBkG,EAAMgB,GAG3B,CACD,MAAMK,EAAYrH,OAAOgE,KAAKgC,GAC9B,IAAK,IAAI5E,EAAI,EAAGA,EAAIiG,EAAUhG,OAAQD,IAAK,CACvC,MAAMmG,EAAS7C,EAAQsB,EAAKqB,EAAUjG,IAAK4F,EAAMK,EAAUjG,KAC3D,GAAe,IAAXmG,EACA,OAAOA,EAGf,OAAO,EAVP,OAAQ,EAaT,MAAM,EACTb,SAAW,OAAOO,EAAa5G,MAC/BkB,WAAa,OAAO2F,EAAe7G,MACnC4C,cAAgB,OAAOkE,EAAkB9G,MACzCwD,OAAOmD,GAAS,OAAOI,EAAa/G,KAAM2G,GAC1CrC,UAAUqC,GAAS,OAAOM,EAAgBjH,KAAM2G,IAE7C,MAAMQ,EACTtH,YAAYuH,EAAkBC,GACJ,mBAAXA,GACPrH,KAAKsH,OAASF,EACdpH,KAAKqH,OAASA,IAGdrH,KAAKsH,OAAS,IAAMF,EACpBpH,KAAKqH,OAAUjE,IAAQgE,EAAmBhE,IAG9CmE,eACA,OAAOvH,KAAKsH,SAEZC,aAASnE,GACTpD,KAAKqH,OAAOjE,IC/Jb,SAASoE,EAAmBnG,GAC/B,MAAMoG,EAAUpG,EAAS,EAGnBqG,GAFNrG,EAASsG,KAAKC,IAAIvG,IAEQ,KAAW,IACrC,OAAQoG,EAAU,IAAM,KACpB3G,KAHaO,EAAS,MAGF,GAAK,IACzBP,EAAa4G,EAAS,GAEvB,SAASG,EAAoB1G,EAAM2G,GACtC,MAAM7G,EAAME,EAAK4G,cACjB,MAAgB,UAATD,EACD7G,EAAI+G,UAAU,EAAG/G,EAAIuF,QAAQ,MAC7BvF,EAAI+G,UAAU/G,EAAIuF,QAAQ,KAAO,EAAGvF,EAAID,OAAS,GAuB3D,SAASiH,EAA6B9G,EAAM+G,EAAQC,GAChD,OAAOD,EAAOE,QAAQ,YAAaC,IAC/B,IAAIC,EAAMC,OAAOC,IACjB,OAAQH,EAAML,UAAU,EAAG,IACvB,IAAK,IACD,MAAMtI,EAAIyI,EAAMhH,EAAKsH,iBAAmBtH,EAAKuH,cAC7CJ,EAAMD,EAAMrH,OAAS,EAAItB,EAAI,IAAMA,EACnC,MACJ,IAAK,IACD4I,GAAOH,EAAMhH,EAAKwH,cAAgBxH,EAAKyH,YAAc,EACrD,MACJ,IAAK,IACDN,EAAMH,EAAMhH,EAAK0H,aAAe1H,EAAK2H,UACrC,MACJ,IAAK,IACDR,EAAMH,EAAMhH,EAAK4H,cAAgB5H,EAAK6H,WACtC,MACJ,IAAK,IACD,MAAM9G,EAAIiG,EAAMhH,EAAK4H,cAAgB5H,EAAK6H,WAC1CV,EAAMpG,EAAI,GAAKA,EAAI,GAAKA,EACxB,MACJ,IAAK,IACDoG,EAAMH,EAAMhH,EAAK8H,gBAAkB9H,EAAK+H,aACxC,MACJ,IAAK,IACDZ,EAAMH,EAAMhH,EAAKgI,gBAAkBhI,EAAKiI,aACxC,MACJ,IAAK,IACDd,EAAMH,EAAMhH,EAAKkI,qBAAuBlI,EAAKmI,kBAGrD,OAAIf,OAAOgB,MAAMjB,GACND,EAGCC,EAAM,IAAMD,EAAMrH,OAAS,EAAK,IAAMsH,EAAM,GAAKA,KAkWrE,MCpbakB,EAAS/I,OAAO,WA4BtB,SAAS,EAAYtB,EAAGsK,GAC3B,MAAiB,iBAANtK,EACAA,EAAEuK,YAAYD,GAGdtK,EAAEqK,KAAUE,YAAYD,GAGhC,SAAS,EAActK,EAAGwK,GAC7B,MAAiB,iBAANxK,EACAA,EAAEyK,cAAcD,GAGhBxK,EAAEqK,KAAUI,cAAcD,GAGlC,SAAS,EAAMxK,GAClB,MAAiB,iBAANA,GACCoJ,OAAOpJ,KAAO,GAAG+B,SAAS,IAG3B/B,EAAEqK,KAAUK,QCjDpB,SAAS,EAAOC,EAASC,EAAU,GAMtC,GAAwC,KAAzB,IAAVA,GACD,MAAM,IAAIzJ,MAAM,gFAEpB,IAAI0J,EAAQ,IAIZ,OAHAA,GAAmB,EAAVD,EAAc,IAAM,GAC7BC,GAAmB,EAAVD,EAAc,IAAM,GAC7BC,GAAmB,GAAVD,EAAe,IAAM,GACvB,IAAIE,OAAOH,EAASE,GAaxB,SAAS3B,EAAM6B,EAAKC,EAAOC,EAAU,GAExC,OADAF,EAAIG,UAAYD,EACTF,EAAII,KAAKH,GCxBpB,MAAMI,EAAiB,gDAqFhB,SAASC,EAAOL,GACnB,MAAO,CACHA,MAAAA,EACAM,MAiJiBxJ,EAjJFkJ,EAkJXM,IACJF,EAAeF,UAAY,EAC3B,MAAMK,EAAW,GACXC,EAAU,GAChB,IAAIC,EAAS,EACTvC,EAAQkC,EAAeD,KAAKrJ,GAChC,KAAOoH,GAAO,CAGV,MAAMwC,EAAaxC,EAAMyC,OAASzC,EAAM,IAAM,IAAIrH,OAClD0J,EAASK,KAAK9J,EAAI+G,UAAU4C,EAAQC,GAAYzC,QAAQ,MAAO,MAC/DuC,EAAQI,KAAK1C,GACbuC,EAASL,EAAeF,UAExBE,EAAeF,WAAa,EAC5BhC,EAAQkC,EAAeD,KAAKrJ,GAEhC,OAAwB,IAApByJ,EAAS1J,OACFyJ,EAAKxJ,EAAImH,QAAQ,MAAO,OAG/BsC,EAASK,KAAK9J,EAAI+G,UAAU4C,GAAQxC,QAAQ,MAAO,MAC5C4C,EAAcP,EAAMC,EAAUC,OAvB1C,IAAkB1J,EA/GlB,SAASgK,EAAOzF,GACnB,OAXJ,SAAuBiF,EAAMjF,GACzB,MAAsB,iBAARA,EAAmBiF,EAAKjF,GAAOA,EAAIiF,KAAKA,GAU/CS,EAAe/L,GAAMA,GAAGqG,GAOnC,SAAS2F,EAAkB7C,EAAK0B,EAAOoB,EAAWC,EAAWnD,GACzD,IAAIoD,EAAO,GAGX,GAFAtB,EAAQA,GAAS,GACjB9B,EAASA,GAAU,GFvIC,iBADE/I,EEyIRmJ,KFxImBnJ,MAAAA,OAA6B,EAASA,EAAEqK,IEwJrE,OAf6B,MAAzBtB,EAAOqD,gBApInB,SAAoBpM,EAAGO,GACnB,OFJG,SAAiBP,EAAGO,GACvB,MAAiB,iBAANP,EACAA,EAAIO,GAAK,EAAKP,EAAIO,EAAI,EAAI,EAG1BP,EAAEmF,UAAU5E,GEDhB,CAAeP,EAAGO,GAAK,EAoIlB8L,CAAWlD,EAAK,IAChBA,EFjIT,SAAkBnJ,EAAGO,GACxB,MAAiB,iBAANP,GEgIqB,EF/HrBA,EAGAA,EAAEqK,KAAUiC,UE4HS,GAAd,CAASnD,GACfgD,EAAO,KAGHtB,EAAMxD,QAAQ,MAAQ,EACtB8E,EAAO,IAEFtB,EAAMxD,QAAQ,MAAQ,IAC3B8E,EAAO,MAInBD,EAAyB,MAAbA,EAAoB,KAAOK,SAASL,EAAW,IACnDnD,GACJ,IAAK,IACL,IAAK,IAEDI,EF1IT,SAAiBnJ,EAAGwK,GACvB,MAAiB,iBAANxK,EACAA,EAAEwM,QAAQhC,GAGVxK,EAAEqK,KAAUmC,QAAQhC,GEqIb,CAAQrB,EADd+C,EAAyB,MAAbA,EAAoBA,EAAY,GAE5C,MACJ,IAAK,IACL,IAAK,IACD/C,EAAmB,MAAb+C,EAAoB,EAAY/C,EAAK+C,GAAa,EAAY/C,GACpE,MACJ,IAAK,IACL,IAAK,IACDA,EAAmB,MAAb+C,EAAoB,EAAc/C,EAAK+C,GAAa,EAAc/C,GACxE,MACJ,IAAK,IACDA,EAAM,EAAMA,GACZ,MACJ,IAAK,IACDA,EAAM,EAAMA,GAAKsD,cACjB,MACJ,QACItD,EAAMpC,OAAOoC,QAKrBA,EADKA,aAAevF,KHhDrB,SAAkB5B,EAAM+G,EAAQ2D,GACnC,OAAsB,MAAf1K,EAAKE,OA9ChB,SAAgCF,EAAM+G,GAClC,IAAI4D,EAAIC,EAAIC,EACZ,MAAMC,EAAI,IAAIlJ,KAAK5B,EAAK6B,WAAoC,QAAtB8I,EAAK3K,EAAKE,cAA2B,IAAPyK,EAAgBA,EAAK,IACzF,GAAsB,iBAAX5D,EACP,OAAO+D,EAAElE,cAAcK,QAAQ,QAAS,IAAIA,QAAQ,eAAgB,KAAOZ,EAA2C,QAAtBuE,EAAK5K,EAAKE,cAA2B,IAAP0K,EAAgBA,EAAK,GAElJ,GAAsB,IAAlB7D,EAAOlH,OAYZ,OAAOiH,EAA6BgE,EAAG/D,GAAQ,GAX/C,OAAQA,GACJ,IAAK,IACL,IAAK,IAAK,OAAOL,EAAoBoE,EAAG,SACxC,IAAK,IACL,IAAK,IAAK,OAAOpE,EAAoBoE,EAAG,UACxC,IAAK,IACL,IAAK,IAAK,OAxDtB,SAAmCC,EAAgB7K,GAC/C,MAAMJ,EAAMiL,EAAenE,cAC3B,OAAO9G,EAAI+G,UAAU,EAAG/G,EAAID,OAAS,GAAKwG,EAAmBnG,GAsDpC8K,CAA0BF,EAA2B,QAAtBD,EAAK7K,EAAKE,cAA2B,IAAP2K,EAAgBA,EAAK,GACnG,QAAS,MAAM,IAAI1L,MAAM,mCAiC3B8L,CAAuBjL,EAAM+G,GA1BvC,SAA8B/G,EAAM+G,GAChC,MAAMC,EAAoB,IAAdhH,EAAKG,KACjB,GAAsB,iBAAX4G,EACP,OAAOC,EAAMhH,EAAKkL,cAAgBlL,EAAKmL,iBAEtC,GAAsB,IAAlBpE,EAAOlH,OAgBZ,OAAOiH,EAA6B9G,EAAM+G,EAAQC,GAflD,OAAQD,GACJ,IAAK,IACL,IAAK,IACD,OAAOC,EAAMN,EAAoB1G,EAAM,SAAWA,EAAKoL,qBAC3D,IAAK,IACL,IAAK,IACD,OAAOpE,EAAMN,EAAoB1G,EAAM,UAAYA,EAAKqL,qBAC5D,IAAK,IACL,IAAK,IACD,OAhGhB,SAAyBP,EAAG9D,GACxB,GAAIA,EACA,OAAO8D,EAAElE,cAER,CAED,MAAM0E,EAAwB,MAAVR,EAAE3K,MAAiC,IAAX2K,EAAE3K,KAC9C,OAAOR,EAAamL,EAAEvD,cAAe,GAAK,IACtC5H,EAAamL,EAAErD,WAAa,EAAG,GAAK,IACpC9H,EAAamL,EAAEnD,UAAW,GAAK,IAC/BhI,EAAamL,EAAEjD,WAAY,GAAK,IAChClI,EAAamL,EAAE/C,aAAc,GAAK,IAClCpI,EAAamL,EAAE7C,aAAc,GAAK,IAClCtI,EAAamL,EAAE3C,kBAAmB,IACjCmD,EAAcjF,GAA4C,IAAzByE,EAAE1K,qBAAgC,KAkFzDmL,CAAgBvL,EAAMgH,GACjC,QACI,MAAM,IAAI7H,MAAM,mCAUtBqM,CAAqBxL,EAAM+G,GG8CvB,CAAaI,GAGb,EAASA,GFtLhB,IAAmBnJ,EEyLtB,GADAiM,EAAiC,iBAAdA,EAAyBA,EAAYM,SAASN,EAAW,IACvE7B,MAAM6B,GAaP9C,EAAMgD,EAAOhD,MAbM,CACnB,MAAMsE,EAAW5C,EAAMxD,QAAQ,MAAQ,EACjCqG,EAAY7C,EAAMxD,QAAQ,MAAQ,EAClCsG,EAAKD,IAAcD,EAAW,IAAM,IAGtCtE,EAFO,MAAPwE,EAEMxB,GADNhD,EAAMyE,GAAQzE,EAAK8C,EAAYE,EAAKtK,OAAQ8L,EAAID,IAI1CE,GAAQzB,EAAOhD,EAAK8C,EAAW0B,EAAID,GAMjD,OAAOvE,EAEX,SAAS0C,EAAcP,EAAMuC,EAAWC,EAAUC,EAAU,GAAIC,GAAS,GACrE,MAAO,IAAI9H,KAEP,IAAI6B,EAASgG,EACb,MAAMxC,EAAWsC,EAAUI,QACrBzC,EAAUsC,EAASG,QACzB,IAAK,MAAM5H,KAAOH,EAAM,CACpB,MAAO,CAAE,CAAE2E,EAAOqD,EAAYhC,EAAWnD,GAAUyC,EAAQ,GAC3D,IAAIS,EAAYiC,EAChB,GAAIF,GAAU,EACV/B,EAAY+B,EACZA,GAAU,OAET,GAAkB,MAAd/B,EAAmB,CACxB,GAAI5F,EAAM,EACN,MAAM,IAAIlF,MAAM,gCAEpB6M,EAAS3H,EACT,SAEJ0B,GAAUwD,EAAS,GACnBxD,GAAUiE,EAAkB3F,EAAKwE,EAAOoB,EAAWC,EAAWnD,GAC9DwC,EAAShE,OAAO,EAAG,GACnBiE,EAAQjE,OAAO,EAAG,GAEtB,OAAuB,IAAnBiE,EAAQ3J,QACRkG,GAAUwD,EAAS,GACZD,EAAKvD,IAGL8D,EAAcP,EAAMC,EAAUC,EAASzD,EAAQiG,IAyI3D,SAASG,EAAcrM,GAC1B,MAAsB,iBAARA,GAAmC,IAAfA,EAAID,OAQnC,SAASgF,EAAKuH,EAAWC,GAC5B,OAAIpO,MAAMC,QAAQmO,GACPA,EAAGxH,KAAKuH,GAGRnO,MAAMqO,KAAKD,GAAIxH,KAAKuH,GA4B5B,SAASR,GAAQ9L,EAAKkB,EAAK2K,EAAIY,GAClCZ,EAAKA,GAAM,IACX3K,GAAYlB,EAAID,OAChB,IAAK,IAAID,EAAI,EAAGA,EAAIoB,EAAKpB,IACrBE,EAAMyM,EAAUzM,EAAM6L,EAAKA,EAAK7L,EAEpC,OAAOA,EC9ZJ,SAAS0M,GAA8B9H,EAAM1D,GAChD,MAAsB,mBAAV0D,EACD,IAAIA,EAAK1D,GAGT,IAAI/C,MAAM+C,GA6BlB,SAASyL,GAAKC,EAAQC,EAAahM,EAAO1B,GAC7C,MAAM2N,EAAsB,EAAdD,EACd,OAAOD,EAAOD,KAAKxN,EAAO2N,EAAQA,EAAQjM,GAiCvC,SAAS,GAAIqD,EAAG6I,EAAQnI,GAC3B,MAAM1D,EAAsB,EAAhB6L,EAAOhN,OACb6M,EAASF,GAA8B9H,EAAM1D,GACnD,IAAK,IAAIpB,EAAI,EAAGA,GAAMoB,EAAM,EAAIpB,IAC5B8M,EAAO9M,GAAKoE,EAAE6I,EAAOjN,IAEzB,OAAO8M,EAwvBJ,SAAS,GAAII,EAAQC,GACpBD,EAAOjN,SAAWkN,EAAOlN,QAvzBjC,WACI,MAAM,IAAKV,MAAM,gCAuzBb6N,GAEJ,MAAMjH,EAAS,IAAI9H,MAAM6O,EAAOjN,QAChC,IAAK,IAAID,EAAI,EAAGA,GAAMkN,EAAOjN,OAAS,EAAID,IACtCmG,EAAOnG,GAAK,CAACkN,EAAOlN,GAAImN,EAAOnN,IAEnC,OAAOmG,ECv0BJ,MAAM,WAAmB,EAC5BrH,YAAYuO,EAAMC,GACdC,QACAtO,KAAKoO,KAAOA,EACZpO,KAAKqO,KAAOA,EAEhBnN,WAEI,MAAQ,IAAM8E,EAAK,KADRhG,MACqB,IAEpCwD,OAAOmD,GAEH,OADW3G,OACA2G,GAIM,EAAC4H,EAAUC,KACpBC,EACA,OAAa,CACT,MAAMC,EAAOH,EAAUI,EAAOH,EACxBI,EAAa,CAACF,EAAKL,KAAMM,EAAKN,MACpC,GAAqB,MAAjBO,EAAW,GAAY,CACvB,GAAqB,MAAjBA,EAAW,GAAY,CACvB,MAAMC,EAAKD,EAAW,GAChBE,EAAKF,EAAW,GACtB,GAAI,EAAOF,EAAKN,KAAMO,EAAKP,MAAO,CAC9BG,EAAWM,EACXL,EAAWM,EACX,SAASL,EAGT,OAAO,EAIX,OAAO,EAGV,OAAqB,MAAjBG,EAAW,KASrBH,CApCAzO,KAoCS2G,GAGxB/D,cAyBI,OAAwB,EAvBX,EAACmM,EAAOC,EAAOT,KAExB,OAAa,CACT,MAAMxN,EAAIgO,EAAO7M,EAAI8M,EAAON,EAAOH,EAC7BK,EAAaF,EAAKL,KACxB,GAAkB,MAAdO,EAaA,OAAW,EAAJ1M,EAbX,CACI,MAAM+M,EAAIL,EACV,GAAI7N,EAAI,GACJ,OAAW,EAAJmB,EAGP6M,EAAShO,EAAI,EACbiO,GAAW9M,GAAK,GAAKS,EAAe+L,EAAKN,MAAU,IAAMrN,EACzDwN,EAAWU,KAUpBR,CAAK,EAAG,EAxBJzO,MA0BfqG,OAAO6I,GAEH,OAAO9P,MAAMqO,KADCzN,MAGlBsE,UAAUqC,GAkCN,OAAyB,EAhCZ,EAAC4H,EAAUC,KACpBC,EACA,OAAa,CACT,MAAMC,EAAOH,EAAUI,EAAOH,EACxBI,EAAa,CAACF,EAAKL,KAAMM,EAAKN,MACpC,GAAqB,MAAjBO,EAAW,GAAY,CACvB,GAAqB,MAAjBA,EAAW,GAAY,CACvB,MAAMC,EAAKD,EAAW,GAChBE,EAAKF,EAAW,GAChBO,EAAoC,EAAhC9K,EAAQqK,EAAKN,KAAMO,EAAKP,MAClC,GAAU,IAANe,EAAS,CACTZ,EAAWM,EACXL,EAAWM,EACX,SAASL,EAGT,OAAW,EAAJU,EAIX,OAAO,EAGV,OAAqB,MAAjBP,EAAW,IACR,EAGD,IAKZH,CAjCIzO,KAiCK2G,GAEpBnG,gBAEI,OAwDG,IAAI4O,GAzDIpP,MAGf,CAACS,OAAOC,YACJ,OAAO,EAAWV,KAAKQ,iBAE3B,iDAEI,OAAO,EADIR,OASZ,MAAMoP,GACTvP,YAAY2N,GACRxN,KAAKwN,GAAKA,EACVxN,KAAKqP,GAAKrP,KAAKwN,GACfxN,KAAKC,QAAU,KAEnB,yDAEI,OADWD,KACDC,QAEd,+CAEI,OADWD,KACDC,QAEd,4CACI,MAAMqP,EAAKtP,KACL4O,EAAaU,EAAGD,GAAGhB,KACzB,GAAkB,MAAdO,EAAoB,CACpB,MAAMK,EAAIL,EAGV,OAFAU,EAAGrP,QAAUqP,EAAGD,GAAGjB,KACnBkB,EAAGD,GAAKJ,GACD,EAGP,OAAO,EAGf,yCACI,MAAMK,EAAKtP,KACXsP,EAAGD,GAAKC,EAAG9B,GACX8B,EAAGrP,QAAU,KAEjBT,YAYG,SAAS+P,KACZ,OAAO,IAAI,GAAW,UAAM,GAGzB,SAASC,GAAyBrQ,EAAGqO,GACxC,OAAO,IAAI,GAAWrO,EAAGqO,GAGtB,SAASiC,GAAwBjC,GACpC,OAAkB,MAAXA,EAAGa,KAuBP,SAASqB,GAAqBlC,GAEjC,GAAkB,MADCA,EAAGa,KAElB,OAAOb,EAAGY,KAGV,MAAM,IAAK9N,MAAM,gDAIlB,SAASqP,GAAqBnC,GACjC,MAAMoB,EAAapB,EAAGa,KACtB,GAAkB,MAAdO,EACA,OAAOA,EAGP,MAAM,IAAKtO,MAAM,gDA6BlB,SAAS,KACZ,OAAOiP,KAGJ,SAAS,GAAKpQ,EAAGqO,GACpB,OAAOgC,GAAyBrQ,EAAGqO,GAGhC,SAAS,GAAUrO,GACtB,OAAOqQ,GAAyBrQ,EAAGoQ,MAGhC,SAAS,GAAQ/B,GACpB,OAAOiC,GAAwBjC,GAO5B,SAAS,GAAKA,GACjB,OAAOkC,GAAqBlC,GAYzB,SAAS,GAAKA,GACjB,OAAOmC,GAAqBnC,GAoEzB,SAAS,GAAQA,GACpB,MAAMrL,EAAmC,EAxKtC,SAAgCqL,GAiBnC,OAAqB,EAhBR,EAACuB,EAAOR,KAEjB,OAAa,CACT,MAAMxN,EAAIgO,EACJH,EADkBL,EACAF,KACxB,GAAkB,MAAdO,EAMA,OAAW,EAAJ7N,EALPgO,EAAShO,EAAI,EACbwN,EAAWK,IAShBH,CAAK,EAAGjB,GAuJHoC,CAAuBpC,GAC7BlI,EAAMsI,GAAK,IAAIxO,MAAM+C,GAAM,EAAGA,EAAK,MAezC,MAda,EAAC4M,EAAOR,KAEjB,OAAa,CACT,MAAMxN,EAAIgO,EAAOL,EAAOH,EACxB,GAAKkB,GAAwBf,GAM7B,MALIpJ,EAAIvE,GAAK2O,GAAqBhB,GAC9BK,EAAShO,EAAI,EACbwN,EAAWoB,GAAqBjB,KAM5CD,CAAK,EAAGjB,GACDlI,EAGJ,SAAS,GAAKuK,EAAQC,EAAOtC,GAChC,IAAIuC,EAAMD,EACNpB,EAAOlB,EACX,MAAQiC,GAAwBf,IAC5BqB,EAAMF,EAAOE,EAAKL,GAAqBhB,IACvCA,EAAOiB,GAAqBjB,GAEhC,OAAOqB,EAGJ,SAAS,GAAQvC,GACpB,OAAO,IAAK,CAACuC,EAAK5Q,IAAMqQ,GAAyBrQ,EAAG4Q,IAAMR,KAAwB/B,GAoE/E,SAAS,GAAQwC,EAAQxC,GAC5B,IAAK,CAACyC,EAAU9Q,KACZ6Q,EAAO7Q,UACR,EAAQqO,GA2BR,SAAS0C,GAAgB1C,EAAI2C,GAChC,IAAI7K,EAAM6K,EACV,IAAK,IAAIpP,EAAIyM,EAAGxM,OAAS,EAAGD,GAAK,EAAGA,IAChCuE,EAAMkK,GAAyBhC,EAAGzM,GAAIuE,GAE1C,OAAOA,EAGJ,SAAS,GAAQkI,GACpB,OAAO0C,GAAgB1C,EAAI+B,MAqFxB,SAAS,GAAO/B,EAAI4C,GACvB,OAAO,IAAK,CAACL,EAAK5Q,IAAMqQ,GAAyBrQ,EAAG4Q,IAAMK,EAAI,GAAQ5C,IAqQnE,SAAS,GAAOrI,EAAGqI,GACtB,MAAM6C,EAAOd,KACPe,EAAO,IAAK,CAACP,EAAK5Q,KACpB,GAAIgG,EAAEhG,GAAI,CACN,MAAM8P,EAAI,IAAI,GAAW9P,OAAG,GAE5B,OADA4Q,EAAI1B,KAAOY,EACJA,EAGP,OAAOc,IAEZM,EAAM7C,GACH+C,EAAMhB,KAEZ,OADAe,EAAKjC,KAAOkC,EACLZ,GAAqBU,GAwCzB,SAAS,GAASjQ,EAAOoN,EAAIjK,GAChC,OAAuD,MA/HpD,SAAsB4B,EAAGqI,GAmB5B,MAlBa,EAACuB,EAAOR,KAEjB,OAAa,CACT,MAAMxN,EAAIgO,EAAOL,EAAOH,EACxB,GAAIkB,GAAwBf,GACxB,OAEC,GAAIvJ,EAAEuK,GAAqBhB,IAC5B,OAAO3N,EAGPgO,EAAShO,EAAI,EACbwN,EAAWoB,GAAqBjB,KAMrCD,CAAK,EAAGjB,GA4GR,EAAcpK,GAAMG,EAAGC,OAAOpD,EAAOgD,IAAIoK,GC12B7C,MAAM,WAA+BlN,MACxCT,cACIyO,MAAM,8BACN3O,OAAO6Q,eAAexQ,KAAM,GAAuByQ,YAGpD,MAAMC,GACT7Q,cACIG,KAAK2Q,UAAY,EAEVC,oCACP,OAAO,IAEXC,oBACI,OAAO7Q,KAAK2Q,YAAcD,GAAWE,uBAEzCE,OAAO3L,GACHnF,KAAK2Q,UAAY,EACjBI,WAAW5L,EAAG,IAGf,SAAS,GAAcA,GAC1B,OAAQ6L,IACJ,GAAIA,EAAIC,YAAYC,YAChBF,EAAIG,SAAS,IAAI,SAEhB,GAAIH,EAAII,WAAWP,oBACpBG,EAAII,WAAWN,QAAO,KAClB,IACI3L,EAAE6L,GAEN,MAAOK,GACHL,EAAIM,QAAQD,YAKpB,IACIlM,EAAE6L,GAEN,MAAOK,GACHL,EAAIM,QAAQD,KAwGrB,MAAM,GAAY,IA9ElB,MACHE,KAAKC,EAAaC,GACd,OAvBD,SAAuBD,EAAaC,GACvC,OAAO,IAAeT,IAClBQ,EAAY,CACRE,UAAYvS,IACR,IACIsS,EAAOtS,EAAPsS,CAAUT,GAEd,MAAOW,GACHX,EAAIM,QAAQK,KAGpBL,QAASN,EAAIM,QACbH,SAAUH,EAAIG,SACdF,YAAaD,EAAIC,YACjBG,WAAYJ,EAAII,gBASb,CAAcI,EAAaC,GAEtCG,QAAQC,EAAcC,GAClB,OAAO9R,KAAKuR,KAAKM,GAAc,IAAMC,IAEzCC,MAAMC,GACF,OAAO,IAAehB,GAAQgB,GAAAA,CAAYhB,KAE9CiB,IAAIC,EAAUC,GACV,MAAMpS,EAAOmS,EAASzR,OAAOC,YAC7B,IAAIR,EAAMH,EAAKI,OACf,OAAOH,KAAKoS,OAAM,KAAOlS,EAAIG,MAAML,KAAK+R,OAAM,KAC1C,MAAMzM,EAAM6M,EAAKjS,EAAIE,OAErB,OADAF,EAAMH,EAAKI,OACJmF,MAGf+M,OAAOjS,GACH,OAvBD,SAAyBA,GAC5B,OAAO,IAAe4Q,GAAQA,EAAIU,UAAUtR,KAsBjC,CAAgBA,GAE3BkS,WAAWd,GACP,OAAOA,EAEXe,WAAWf,EAAagB,GACpB,OAAO,IAAexB,IAClBQ,EAAY,CACRE,UAAYvS,IACRqT,IACAxB,EAAIU,UAAUvS,IAElBmS,QAAUnS,IACNqT,IACAxB,EAAIM,QAAQnS,IAEhBgS,SAAWhS,IACPqT,IACAxB,EAAIG,SAAShS,IAEjB8R,YAAaD,EAAIC,YACjBG,WAAYJ,EAAII,gBAI5BqB,QAAQjB,EAAakB,GACjB,OAAO,IAAe1B,IAClBQ,EAAY,CACRE,UAAWV,EAAIU,UACfP,SAAUH,EAAIG,SACdF,YAAaD,EAAIC,YACjBG,WAAYJ,EAAII,WAChBE,QAAUK,IACN,IACIe,EAAaf,EAAbe,CAAiB1B,GAErB,MAAO2B,GACH3B,EAAIM,QAAQqB,UAMhCC,MAAMC,EAAUpB,GACZ,OAAOzR,KAAKuS,WAAWd,EAAOoB,IAAW,IAAMA,EAASrT,YAE5D4S,MAAMU,EAAOtB,GACT,OAAIsB,IACO9S,KAAKuR,KAAKC,GAAa,IAAMxR,KAAKoS,MAAMU,EAAOtB,KAG/CxR,KAAKqS,YAAO,GAG3BU,OACI,OAAO,IAAe/B,GAAQA,EAAIU,eAAU,OC/H7C,MAAMsB,WAAuB,EAChCnT,YAAYuG,KAAQvB,GAChByJ,QACAtO,KAAKoG,IAAa,EAANA,EACZpG,KAAK6E,OAASA,EAElBsB,QACI,MAAO,CAAC,aAAc,eC3C9B,SAAS8M,GAAkBC,IA0EpB,MAAMC,GAA2B,IFpFjC,MACHtT,YAAYuT,GAAY,GACpBpT,KAAKqT,IAAM,EACXrT,KAAKsT,WAAaF,EAClBpT,KAAKuT,WAAa,IAAIC,IAEtBtC,kBACA,OAAOlR,KAAKsT,WAEhBG,SACI,IAAKzT,KAAKsT,WAAY,CAClBtT,KAAKsT,YAAa,EAClB,IAAK,MAAO,CAAEI,KAAa1T,KAAKuT,WAC5BG,KAIZC,YAAYxO,GACR,MAAM9B,EAAKrD,KAAKqT,IAEhB,OADArT,KAAKuT,WAAW1R,IAAI7B,KAAKqT,MAAOlO,GACzB9B,EAEXuQ,eAAevQ,GACX,OAAOrD,KAAKuT,WAAWM,OAAOxQ,GAElCyQ,SAAS3O,EAAG2K,GACR,MAAMiE,EAAI/T,KACJqD,EAAKrD,KAAK2T,YAAqB,MAAT7D,EAAgB3K,EAAI,IAAMA,EAAE2K,IACxD,MAAO,CAAEtQ,UAAYuU,EAAEH,eAAevQ,OE6GvC,SAAS2Q,GAAexC,EAAayC,GACxC,OAJG,SAAezC,EAAayC,GAC/B,OAKG,SAAgCzC,EAAa0C,EAAcC,EAAuBC,EAA0BnD,GACnF,mBAAjBiD,IACPjD,EAAciD,EACdA,OAAerT,GAEnB,MAAMuQ,EAAa,IAAIV,GACvBc,EAAY,CACRE,UAAWwC,GAA8BjB,GACzC3B,QAAS6C,GAAgDlB,GACzD9B,SAAUiD,GAAsDnB,GAChEhC,YAAaA,GAA4BkC,GACzC/B,WAAAA,IAhBGiD,CAAuB7C,EAAayC,GAGpClG,CAAMyD,EAAayC,GCxIvB,MAAMK,GACTzU,YAAYO,GACRJ,KAAKI,MAAQA,EAEjBiG,SACI,OAAOrG,KAAKI,MAGhBc,WACI,OAAOgF,OAAOlG,KAAKI,OAEvBwC,cACI,OAAOD,EAAe3C,KAAKI,OAE/BoD,OAAOmD,GACH,OAAa,MAATA,GAIO,EAAO3G,KAAKI,MAAOuG,aAAiB2N,GAAO3N,EAAMvG,MAAQuG,GAGxErC,UAAUqC,GACN,OAAa,MAATA,EACO,EAGAtC,EAAQrE,KAAKI,MAAOuG,aAAiB2N,GAAO3N,EAAMvG,MAAQuG,IAItE,SAAS,GAAKxH,GACjB,OAAY,MAALA,GAAaA,aAAamV,GAAO,IAAIA,GAAKnV,GAAKA,EAEnD,SAAS,GAAMA,GAClB,GAAS,MAALA,EACA,MAAM,IAAImB,MAAM,uBAGhB,OAAOnB,aAAamV,GAAOnV,EAAEiB,MAAQjB,ECiF7C,SAvHO,MACHU,cACIG,KAAKuU,UAAY,GAErBC,IAAIrP,GACAnF,KAAKyU,YAAYtP,GAEjBuP,cACA,OAAO1U,KAEX2U,QAAQC,EAAeC,GACnB,IAAIC,EACA1U,OACqBS,IAArBgU,GACAC,EAAS,KACT1U,EAAQwU,IAGRE,EAASF,EACTxU,EAAQyU,GAEZ7U,KAAKuU,UAAUQ,SAAS5P,GAAmB,IAAbA,EAAEnE,OAAemE,EAAE/E,GAAS+E,EAAE2P,EAAQ1U,KAGxE4U,WAAWC,GACPjV,KAAKyU,YAAYQ,GAErBC,cAAcD,GACVjV,KAAKmV,eAAeF,GAGxBG,UAAU5P,GACN,MAAM6P,EAA0B,mBAAR7P,EAClBA,EACAA,EAAI8P,OAEV,OADAtV,KAAKyU,YAAYY,GACV,CAAE7V,QAAS,KAAQQ,KAAKmV,eAAeE,KAElDZ,YAAYtP,GACRnF,KAAKuU,UAAUxJ,KAAK5F,GAExBgQ,eAAehQ,GACX,MAAM2F,EAAQ9K,KAAKuU,UAAU/N,QAAQrB,GACjC2F,GAAS,GACT9K,KAAKuU,UAAU7N,OAAOoE,EAAO,KC7ClC,MAAM,GACTjL,YAAY0V,EAAQjE,EAASkE,GACzBxV,KAAKsV,OAASC,EACdvV,KAAKyV,QAAUnE,GAAW,CAAEoE,OAC5B1V,KAAK2V,YAAcH,GAAe,U,YCuB5BI,EAASP,G,IACXpG,EAAI4G,EAAA,IC7BT,MACHhW,YAAY+V,GACR5V,KAAK8V,UAAW,EAChB9V,KAAK+V,aAAc,EACnB/V,KAAKgW,YAAc,EACnBhW,KAAKiW,WAAa,EAClBjW,KAAKkW,SAAWN,GAAYA,EAAW,EAAIA,EAAW,IACtD5V,KAAKmW,WAAY,EACjBnW,KAAKoW,SAAW,IAAI,GAExBC,UACI,OAAOrW,KAAKoW,SAEZE,cACA,OAAOtW,KAAK8V,SAEZQ,YAAQnX,GACHa,KAAK+V,aAAe/V,KAAK8V,WAAa3W,IACvCa,KAAK8V,SAAW3W,EACZa,KAAK8V,SACD9V,KAAKmW,UACLnW,KAAKgW,YAAcO,aAAY,KACtBvW,KAAKmW,YACNnW,KAAKsW,SAAU,GAEnBtW,KAAKoW,SAASzB,QAAQ,IAAI5R,QAC3B/C,KAAKkW,UAGRlW,KAAKiW,WAAalF,YAAW,KACzB/Q,KAAKsW,SAAU,EACftW,KAAKiW,WAAa,EACdjW,KAAKmW,YACLnW,KAAKsW,SAAU,GAEnBtW,KAAKoW,SAASzB,QAAQ,IAAI5R,QAC3B/C,KAAKkW,WAIRlW,KAAKiW,aACLO,aAAaxW,KAAKiW,YAClBjW,KAAKiW,WAAa,GAElBjW,KAAKgW,cACLS,cAAczW,KAAKgW,aACnBhW,KAAKgW,YAAc,KAKnCxW,UACIQ,KAAKsW,SAAU,EACftW,KAAK+V,aAAc,EAEvBW,QACI1W,KAAKR,UAETmX,QACI3W,KAAKsW,SAAU,EAEnBM,OACI5W,KAAKsW,SAAU,IDjCSV,GAAsB,eAA1C3G,EAAI4G,EDRT,SAAaR,EAAUrH,GAC1BA,EAAOoH,UAAU,IAAI,GAASC,I,CCQZA,EAAZ,EAAAgB,WACFpH,EAAA,SAAa,EACbA,EAAAA,Q,YETcqC,EAASuF,EAA2BC,GAC3C,IAAeC,IAAQ,IAAIA,EAAKF,G,MAAclF,GAAML,EAAQK,MAAnEmF,G,qBAIA,K,YAOOE,G,OTkfR,SAAgBC,GACnB,MAAM5G,EAAOd,KACb,IAAIe,EAAOD,EACX,MAAML,EAAUxC,IACZ8C,EAAO,IAAK,CAACP,EAAK5Q,KACd,MAAM8P,EAAI,IAAI,GAAW9P,OAAG,GAE5B,OADA4Q,EAAI1B,KAAOY,EACJA,IACRqB,EAAM9C,IAEb,GAAI,EAAYyJ,GACZA,EAAMlC,QAAQ/E,QAEb,GAAIiH,aAAiB,GACtB,GAAQjH,EAAQiH,OAEf,CACD,MAAMC,EAAa,EAAcD,GACjC,IACI,KAAOC,EAAW,8CACdlH,EAAOkH,EAAW,2DAG1B,QACI,EAAYA,IAGpB,MAAMC,EAAO7G,EACPC,EAAMhB,KAEZ,OADA4H,EAAK9I,KAAOkC,EACLZ,GAAqBU,GS/gBhB,CAAR2G,G,YAuCYI,G,OACR,IAAKP,IAAYA,EAASO,M,YAoBjBrJ,EACAsJ,EACA7R,EACA8R,G,OAQT,QAAC,EANG,eACI,gBNlBOC,EMkBEF,EAAK7R,GNjBvB,IAAewL,IAClBuG,EAAK,CACD7F,UAAYvS,GAAM6R,EAAIU,UDgD3B,SAA+BvS,GAClC,OAAO,IAAI6T,GAAe,EAAG7T,GCjDWqY,CAAsBrY,IACtDmS,QAAUK,GAAOX,EAAIU,UDoDtB,IAAIsB,GAAe,ECpDmCrB,IACrDR,SAAUH,EAAIG,SACdF,YAAaD,EAAIC,YACjBG,WAAYJ,EAAII,kBMWHqG,I,MAAAC,EAAAD,EACC,WAAAC,EAAA,KACY,EAAUJ,EAAV,yBACX,aNrBpB,IAAoBC,S,YMmDTpY,GAAI,GAAY,GAAOsY,IAAK,GAAqBtY,MC/H5D,MAUM,GAAuB,6DAQ7B,SAASwY,KACZ,MAAM,IAAKrX,MAjByB,+CAoBjC,SAASsX,KACZ,MAAM,IAAKtX,MAvB8B,iCA0BtC,MAAMuX,GACThY,YAAYsF,GACRnF,KAAKmF,EAAIA,EAEbjE,WAGI,IAAIH,EAAI,EACJE,EAAM,QACV,MAAM6W,EAAI,EAJC9X,MAKX,IACI,KAAQe,EALK,GAKY+W,EAAE,8CACnB/W,EAAI,IACJE,GAAa,MAEjBA,GAAa,EAAS6W,EAAE,2DACxB/W,EAAMA,EAAI,EAAK,EAKnB,OAfa,IAYTA,IACAE,GAAa,SAEVA,EAAM,IAEjB,QACI,EAAY6W,IAGpBtX,gBAEI,OADUR,KACDmF,IAEb,CAAC1E,OAAOC,YACJ,OAAO,EAAWV,KAAKQ,iBAE3B,iDAEI,OADUR,KACDmF,KAYV,MAAM4S,GACTlY,YAAYI,EAASE,EAAM6X,GACvBhY,KAAKC,QAAUA,EACfD,KAAKG,KAAOA,EACZH,KAAKgY,QAAUA,EAEnB,yDAEI,OADWhY,KACDC,UAEd,+CAEI,OADWD,KACDC,UAEd,4CAEI,OADWD,KACDG,OAEd,0CA9EG,WACH,MAAM,IAAKG,MAHqB,8CAiF5B2X,GAEJzY,UACeQ,KACRgY,WAQJ,SAASE,GAA0CjY,EAASE,EAAM6X,GACrE,OAAO,IAAID,GAA2B9X,EAASE,EAAM6X,GAmHlD,SAASG,GAA6BC,EAAOC,EAASC,GACzD,IACIC,EADAC,GAAU,EAEV1I,EAAQ,GAAKsI,KACjB,MAAMJ,EAAU,KACZ,GAAa,MAATlI,EAAe,CACf,MAAM2I,EAAM,GAAQ3I,GACpB,IACIwI,EAAOG,GAEX,QACI3I,OAAQ,KAId4I,EAAS,KACX,IACIV,IAEJ,QACIO,OAAO,IAGf,OAAOL,IAA0C,KACxCM,GACDb,KAEQ,MAARY,EACO,GAAQA,GAGRX,QAEZ,KAIC,GAHKY,IACDA,GAAU,GAED,MAAT1I,EAAe,CACf,MAAM7N,EAAI,GAAQ6N,GAClB,IAAI6I,EACJ,IACIA,EAAeN,EAAQpW,GAE3B,MAAO2M,GAEH,MADA8J,IACM9J,EAEV,OAAoB,MAAhB+J,GACAJ,EAAOI,GACA,IAGPD,KACO,GAIX,OAAO,IAEZV,GAwCA,SAASY,GAAMzT,GAClB,OA3PG,SAAuCA,GAC1C,OAAO,IAAI0S,GAAe1S,GA0PnB0T,CAA8B1T,GAGlC,SAAS,GAAMqI,GAElB,OAZyBsL,EAWZ,SAVF,MAUYtL,GChSpB,SAA2BrO,GAC9B,MAAM,IAAKmB,MAAMnB,GDsRb4Z,CAAkBD,GAUf,EAActL,GAZlB,IAAsBsL,EAetB,SAAS,GAAM9G,GAClB,OAAO4G,IAAM,IAAM,EAAc5G,OAG9B,SAAS,GAAOgH,GACnB,OAAOJ,IAAM,IAzNV,SAA2BI,GAC9B,IAAIC,EACAC,EAGAX,EAFAC,GAAU,EACVW,GAAW,EAEf,MAAMT,EAAS,KAEX,GADAS,GAAW,EACK,MAAZD,EAAkB,CAClB,MAAME,EAAQF,EACd,IACI,EAAYE,GAEhB,QACIF,OAAW,GAGnB,GAAgB,MAAZD,EAAkB,CAClB,MAAMI,EAAQJ,EACd,IACI,EAAYI,GAEhB,QACIJ,OAAW,KAIvB,OAAOf,IAA0C,KACxCM,EAGIW,GACLvB,KAHAD,KAKQ,MAARY,EACO,GAAQA,GAGRX,QAEZ,KACC,IAAI0B,EAIJ,GAHKd,IACDA,GAAU,GAEVW,EACA,OAAO,EAEN,CACD,IAAI7T,EACJ,KAAc,MAAPA,GAAa,CAChB,MAAMsJ,EAAa,CAACqK,EAAUC,GAC9B,GAAqB,MAAjBtK,EAAW,GACX,GAAqB,MAAjBA,EAAW,GAAY,CACvB,MAAM2K,EAAU3K,EAAW,GAC3B,GAAI2K,EAAQ,6CACRhB,EAAO,GAAKgB,EAAQ,2DACpBjU,GAAM,OAGN,IACI,EAAYiU,GAEhB,QACIL,OAAW,OAIlB,CACD,MAAMM,EAAU5K,EAAW,GACvB4K,EAAQ,8CAEKF,EADFE,EAAQ,0DACnBN,EAAgC,EAAcI,KAG9CZ,IACApT,GAAM,QAKd2T,EAAW,EAAcD,GAGjC,OAAO,GAAQ1T,OAEpB,KACM6T,GACDT,OAiIWe,CAAkBT,KAOlC,SAAS,KACZ,OAAO,IAAM,IAAM,IAAK5Z,MAAM,KAG3B,SAAS,GAAUD,GACtB,OAAO,IAAM,IXrHV,SAAmBiB,EAAOyF,GAC7B,MAAM6T,EAAK/L,QWoHQ,EXpH4B,GAE/C,OADA+L,EAAG,GAAKtZ,EACDsZ,EWkHY,CAAYva,KAO5B,SAAS,GAAQqO,GACpB,OAAIA,aAAc,GACP,GAAUA,GAGVpO,MAAMqO,KAAKD,GAQnB,SAAS,GAAOA,GACnB,OAAI,EAAYA,GACL,GAAUA,GAEZA,aAAc,GACZA,EV8HR,SAAeA,GAClB,IAAImM,EAAM1K,EACV,GAAI,EAAYzB,GACZ,OAAO,GAAQA,GAEd,GAAIA,aAAc,GACnB,OAAOA,EAEN,CACD,MAAM6C,EAAOd,KACb,IAAIe,EAAOD,EACX,MAAM6G,EAAa,EAAc1J,GACjC,IACI,KAAO0J,EAAW,8CAA8C,CAC5D,MAAM/X,EAAI+X,EAAW,0DACZyC,EAAOrJ,EAAOrB,EAAI,IAAK,GAAW9P,OAAG,GAAWwa,EAAKtL,KAAOY,EAArEqB,EAAwErB,GAGhF,QACI,EAAYiI,GAEhB,MAAM0C,EAAOtJ,EACPC,EAAMhB,KAEZ,OADAqK,EAAKvL,KAAOkC,EACLZ,GAAqBU,IUnJrBwJ,CAAQrM,GAkBhB,SAAS,GAAOA,EAAI4C,GACvB,OAAO,GAAO,CAAC5C,EAAI4C,IAmgBhB,SAAS,GAAI0J,EAAStM,GACzB,OAnhBqBuM,EAmhBL,IAAM,GAAMvM,GAnhBC6K,EAmhBKP,GAAOA,EAAE,6CAA+C,GAAKgC,EAAQhC,EAAE,iEAA8D,EAnhBjIE,EAmhB6IgC,IAC/K,EAAYA,IAnhBTpB,IAAM,IAAMT,GAA6B4B,EAAQ1B,EAASL,KAD9D,IAAkB+B,EAAQ1B,EAASL,EA6xBnC,SAAS,GAAKlW,EAAOkM,GACxB,OAAO4K,IAAM,KACT,MAAMd,EAAI,GAAM9J,GAChB,IACI,IAAK,IAAIiM,EAAI,EAAGA,GAAKnY,EAAOmY,IACxB,IAAKnC,EAAE,6CACH,MAAM,IAAKxX,MAAO,GAAD,6BAGzB,OA98BL,SAAyC6E,EAAG2S,GAC/C,OAAOI,IAA0C,IAAMJ,EAAE,4DAA2D,IAAMA,EAAE,+CAA8C,KACtK,IACI,EAAYA,GAEhB,QACI3S,QAw8BO+U,EAAgC,QACpCpC,GAEP,MAAOlJ,GAEH,MADA,EAAYkJ,GACNlJ,MA2DX,SAAS,GAAQkL,EAAStM,GAC7B,OAAO,IAAM,IAAM,GAAO,GAAIsM,EAAStM,MExtCpC,SAAS2M,GAAkBpM,EAAOqM,EAAMC,EAAMC,EAAMC,GACvD,MAAMC,EAbH,SAA+BJ,EAAMC,EAAMC,EAAMC,GACpD,MAAME,EAA6C,EAAtBpW,EAAQ+V,EAAME,GAC3C,GAA6B,IAAzBG,EACA,MAAM,IAAKna,MAAM,sCAErB,MAAMoa,EAAsBD,EAAuB,EACnD,OAAQtb,IACJ,MAAMwb,EAAsC,EAAnBtW,EAAQlF,EAAGkb,GACpC,OAASK,GAAwBC,GAAoB,IAAgBD,GAAyBC,GAAoB,EAAO,CAACxb,EAAGob,EAAIpb,EAAGib,SAAS,GAKlIQ,CAAsBR,EAAMC,EAAMC,EAAMC,GACvD,OAAO,IAAM,KAAM,OFsUAvI,EEtUOwI,EFsUI1K,EEtUI/B,EFuU3B6K,IAAM,IAvDV,SAA2BzT,EAAG2K,GACjC,IAAIyI,EACAxI,EAAMD,EACV,OAAOoI,IAA0C,KAC7C,GAAY,MAARK,EAAc,CACd,MAAMpZ,EAAIoZ,EAAK,GAEf,OADWA,EAAK,GACTpZ,EAGP,OAAOwY,QAEZ,KAEC,GADAY,EAAOpT,EAAE4K,GACG,MAARwI,EAAc,CACFA,EAAK,GAAjB,MACMsC,EAAOtC,EAAK,GAElB,OADAxI,EAAM8K,GACC,EAGP,OAAO,KAEZ,SAgCgBC,CAAkB9I,EAAWlC,KAD7C,IAAgBkC,EAAWlC,KE3T3B,SAASiL,GAAYhN,EAAOqM,EAAMC,GACrC,OAAOF,GAAkBpM,EAAOqM,EAAMC,EAAM,GAAG,CAAClb,EAAGO,IAAOP,EAAIO,IF08B7De,OAAOC,S,0IGl+BoBsa,GAQ5B,eACI,kBAA4BtW,EAAG,EAACsW,EAAK,OAATtW,EAAG,EAACsW,EAAK,IAAK,U,YAEvC1L,G,MACGV,EAAA,EAAAkB,MAAA,c,MACiBmL,EACf,cADoBC,EACpB,cADQC,EACR,YAAAC,GAAQF,EAAM,GAAKC,EAAM,OAAN,E,OAGnB,EAAArL,MAFE,IAAOmL,EAET,IAAS,KAASE,EAAOF,GAEzB,IAAS,KAAaE,EAAOF,EAAKG,GACtC,GAAKD,EAAOD,K,YAIb5L,EAAS+L,G,MACNzM,EAAA,EAAAkB,MAAA,c,MAKiBmL,EACnB,cADwBC,EACxB,cADYC,EACZ,cAAOF,GAAQI,E,MACXC,GAAQ,EAAM,GAAK,WAGnB,EAAAxL,MAFE,IAAOoL,EAET,IAAS,MAlCNK,EAkC4BL,EAlCxBC,EAkCeA,E,WAjCxB,WAAgB,GAAAI,EAATJ,GACP,oBHwrCOrZ,EGxrCSyZ,EHwrCF/N,EGxrCP2N,EH4XWpB,EA6zBL,IAAM,GAAMvM,GA7zBC6K,EA6zBI,CAACtX,EAAG+W,KACxC,GAAI/W,EAAIe,EAAO,CACX,GAAIgW,EAAE,6CACF,OAAO,GAAKA,EAAE,2DAGd,MAAM,IAAKxX,MAAO,GAAD,+BAn0BgB0X,EAy0BzCgC,IACA,EAAYA,IAz0BTpB,IAAM,KACT,IAAI7X,GAAK,EACT,OAAOoX,GAA6B4B,GAAS5a,IACzC4B,EAAMA,EAAI,EAAK,EACRsX,EAAQtX,EAAG5B,KACnB6Y,OGjYG,YAASpJ,GACP,UADO,OAAGuM,EAAM,YHurCzB,IAAcrZ,EAAO0L,EA5zBIuM,EAAQ1B,EAASL,UG5Vc,SAAc,GAE7D,IAAS,KAAamD,EAAOG,EAAMJ,O,OAXxBK,EACf,cADQJ,EACR,YAAAA,EAAOI,GAAOF,E,MACVJ,GAAOM,EAAK,GAAKJ,EAAM,OAAN,EACrB,EAAArL,MAAA,IAAS,KAAaqL,EAAOF,EAAKM,G,IA5B3BA,EAAIJ,E,0TCGGK,G,MACuBA,G,sBAELC,EAAWC,G,OAAtC1b,KACE,YADFA,KACmB,YAAiByb,EAAUE,O,gBAE9C3b,KACL,gB,iFCVDb,EAAWyc,G,MACVC,EAAU1c,EAAE2c,I,OAChB,KAAYF,EAAO,KAAYA,EAAQ,KAAUA,G,2BAEX,EAAK,IAAM,IAAM,IAAM,I,kxBAenDG,EAAwBC,G,OAyCnB,OAtCT,IAAAA,EAAA,KACE,IAAK,IAAK,KADZ,IAAAA,EAAA,KACwB,IAAK,IAAK,KADlC,IAAAA,EAAA,KAC8C,IAAK,IAAK,KADxD,IAAAA,EAAA,KAEE,IAAK,IAAK,GAFZ,IAAAA,EAAA,KAEwB,IAAK,IAAK,KAFlC,IAAAA,EAAA,KAE8C,IAAK,IAAK,KAFxD,IAAAA,EAAA,KAGE,GAAK,GAAK,KAHZ,IAAAA,EAAA,KAGwB,IAAK,GAAK,IAHlC,IAAAA,EAAA,KAG8C,IAAK,IAAK,IAHxD,IAAAA,EAAA,KAIE,IAAK,IAAK,KAJZ,KAAAA,EAAA,KAIwB,IAAK,GAAK,KAJlC,KAAAA,EAAA,KAI8C,IAAK,IAAK,GAJxD,KAAAA,EAAA,KAKE,IAAK,IAAK,KALZ,KAAAA,EAAA,KAKwB,IAAK,IAAK,KALlC,KAAAA,EAAA,KAK8C,IAAK,IAAK,GALxD,KAAAA,EAAA,KAME,IAAK,IAAK,IANZ,KAAAA,EAAA,KAMwB,GAAK,IAAK,IANlC,KAAAA,EAAA,KAM8C,IAAK,IAAK,KANxD,KAAAA,EAAA,KAOE,IAAK,GAAK,KAPZ,KAAAA,EAAA,KAOwB,GAAK,IAAK,GAPlC,KAAAA,EAAA,KAO8C,IAAK,IAAK,KAPxD,KAAAA,EAAA,KAQE,IAAK,IAAK,KARZ,KAAAA,EAAA,KAQwB,IAAK,IAAK,KARlC,KAAAA,EAAA,KAQ8C,IAAK,IAAK,KARxD,KAAAA,EAAA,KASE,IAAK,IAAK,KATZ,KAAAA,EAAA,KASwB,IAAK,IAAK,IATlC,KAAAA,EAAA,KAS8C,IAAK,IAAK,KATxD,KAAAA,EAAA,KAUE,GAAK,IAAK,IAVZ,KAAAA,EAAA,KAUwB,IAAK,IAAK,IAVlC,KAAAA,EAAA,KAU8C,IAAK,IAAK,KAVxD,KAAAA,EAAA,KAWE,IAAK,IAAK,KAXZ,KAAAA,EAAA,KAWwB,IAAK,IAAK,KAXlC,KAAAA,EAAA,KAW8C,IAAK,IAAK,KAXxD,KAAAA,EAAA,KAYE,IAAK,IAAK,GAZZ,KAAAA,EAAA,KAYwB,IAAK,GAAK,IAZlC,KAAAA,EAAA,KAY8C,GAAK,IAAK,KAZxD,KAAAA,EAAA,KAaE,IAAK,GAAK,KAbZ,KAAAA,EAAA,KAawB,EAAK,IAAK,GAblC,KAAAA,EAAA,KAa8C,IAAK,IAAK,KAbxD,KAAAA,EAAA,KAcE,IAAK,IAAK,KAdZ,KAAAA,EAAA,KAcwB,IAAK,IAAK,KAdlC,KAAAA,EAAA,KAc8C,GAAK,IAAK,KAdxD,KAAAA,EAAA,KAeE,GAAK,IAAK,KAfZ,KAAAA,EAAA,KAewB,GAAK,IAAK,KAflC,KAAAA,EAAA,KAe8C,GAAK,IAAK,KAfxD,KAAAA,EAAA,KAgBE,EAAK,IAAK,KAhBZ,KAAAA,EAAA,KAgBwB,IAAK,IAAK,KAhBlC,KAAAA,EAAA,KAgB8C,IAAK,IAAK,KAhBxD,KAAAA,EAAA,KAiBE,IAAK,IAAK,KAjBZ,KAAAA,EAAA,KAiBwB,IAAK,IAAK,KAjBlC,KAAAA,EAAA,KAiB8C,IAAK,GAAK,KAjBxD,KAAAA,EAAA,KAkBE,IAAK,IAAK,GAlBZ,KAAAA,EAAA,KAkBwB,IAAK,EAAK,KAlBlC,KAAAA,EAAA,KAkB8C,GAAK,IAAK,KAlBxD,KAAAA,EAAA,KAmBE,GAAK,GAAK,KAnBZ,KAAAA,EAAA,KAmBwB,EAAK,IAAK,GAnBlC,KAAAA,EAAA,KAmB8C,IAAK,IAAK,KAnBxD,KAAAA,EAAA,KAoBE,IAAK,IAAK,KApBZ,KAAAA,EAAA,KAoBwB,IAAK,IAAK,KApBlC,KAAAA,EAAA,KAoB8C,IAAK,IAAK,KApBxD,KAAAA,EAAA,KAqBE,IAAK,IAAK,KArBZ,KAAAA,EAAA,KAqBwB,IAAK,IAAK,KArBlC,KAAAA,EAAA,KAqB8C,GAAK,IAAK,KArBxD,KAAAA,EAAA,KAsBE,GAAK,IAAK,KAtBZ,KAAAA,EAAA,KAsBwB,GAAK,IAAK,KAtBlC,KAAAA,EAAA,KAsB8C,GAAK,IAAK,KAtBxD,KAAAA,EAAA,KAuBE,EAAK,IAAK,KAvBZ,KAAAA,EAAA,KAuBwB,EAAK,IAAK,KAvBlC,KAAAA,EAAA,KAuB8C,EAAK,IAAK,IAvBxD,KAAAA,EAAA,KAwBE,EAAK,IAAK,IAxBZ,KAAAA,EAAA,KAwBwB,EAAK,IAAK,IAxBlC,KAAAA,EAAA,KAwB8C,GAAK,IAAK,KAxBxD,KAAAA,EAAA,KAyBE,GAAK,IAAK,KAzBZ,KAAAA,EAAA,KAyBwB,GAAK,IAAK,KAzBlC,KAAAA,EAAA,KAyB8C,GAAK,IAAK,KAzBxD,KAAAA,EAAA,KA0BE,GAAK,IAAK,KA1BZ,KAAAA,EAAA,KA0BwB,GAAK,GAAK,KA1BlC,KAAAA,EAAA,KA0B8C,IAAK,IAAK,KA1BxD,KAAAA,EAAA,KA2BE,IAAK,IAAK,IA3BZ,KAAAA,EAAA,KA2BwB,IAAK,IAAK,KA3BlC,KAAAA,EAAA,KA2B8C,IAAK,GAAK,IA3BxD,KAAAA,EAAA,KA4BE,GAAK,GAAK,IA5BZ,KAAAA,EAAA,KA4BwB,IAAK,GAAK,KA5BlC,KAAAA,EAAA,KA4B8C,IAAK,GAAK,GA5BxD,KAAAA,EAAA,KA6BE,IAAK,GAAK,IA7BZ,KAAAA,EAAA,KA6BwB,GAAK,IAAK,KA7BlC,KAAAA,EAAA,KA6B8C,GAAK,EAAK,KA7BxD,KAAAA,EAAA,KA8BE,EAAK,IAAK,GA9BZ,KAAAA,EAAA,KA8BwB,IAAK,IAAK,KA9BlC,KAAAA,EAAA,KA8B8C,EAAK,IAAK,KA9BxD,KAAAA,EAAA,KA+BE,EAAK,IAAK,KA/BZ,KAAAA,EAAA,KA+BwB,EAAK,IAAK,KA/BlC,KAAAA,EAAA,KA+B8C,EAAK,IAAK,KA/BxD,KAAAA,EAAA,KAgCE,EAAK,IAAK,KAhCZ,KAAAA,EAAA,KAgCwB,GAAK,GAAK,KAhClC,KAAAA,EAAA,KAgC8C,IAAK,GAAK,KAhCxD,KAAAA,EAAA,KAiCE,IAAK,GAAK,KAjCZ,KAAAA,EAAA,KAiCwB,IAAK,GAAK,KAjClC,KAAAA,EAAA,KAiC8C,IAAK,GAAK,KAjCxD,KAAAA,EAAA,KAkCE,IAAK,GAAK,KAlCZ,MAAAA,EAAA,KAkCwB,IAAK,GAAK,KAlClC,MAAAA,EAAA,KAkC8C,IAAK,GAAK,KAlCxD,MAAAA,EAAA,KAmCE,IAAK,EAAK,KAnCZ,MAAAA,EAAA,KAmCwB,IAAK,EAAK,IAnClC,MAAAA,EAAA,KAmC8C,IAAK,EAAK,IAnCxD,MAAAA,EAAA,KAoCE,IAAK,EAAK,IApCZ,MAAAA,EAAA,KAoCwB,IAAK,EAAK,IApClC,MAAAA,EAAA,KAoC8C,IAAK,EAAK,IApCxD,MAAAA,EAAA,KAqCE,IAAK,EAAK,KAAY,EAAK,EAAK,GACJ,G,iHAKzBD,EAAuBC,G,OAI5B,IAAAA,EAAA,IACE,GADF,IAAAA,EAAA,IACc,IADd,IAAAA,EAAA,IAC0B,IAD1B,IAAAA,EAAA,IACsC,GADtC,IAAAA,EAAA,IACkD,GADlD,IAAAA,EAAA,IAEE,GAFF,IAAAA,EAAA,IAEc,GAFd,IAAAA,EAAA,IAE0B,GAF1B,KAAAA,EAAA,IAEsC,IAFtC,KAAAA,EAAA,IAEkD,IAFlD,KAAAA,EAAA,IAGE,IAHF,KAAAA,EAAA,IAGc,IAHd,KAAAA,EAAA,IAG0B,IAH1B,KAAAA,EAAA,IAGsC,IAHtC,KAAAA,EAAA,IAGkD,GAHlD,KAAAA,EAAA,IAIE,IAJF,KAAAA,EAAA,IAIc,IAJd,KAAAA,EAAA,IAI0B,IAJ1B,KAAAA,EAAA,IAIsC,IAJtC,KAAAA,EAAA,IAIkD,IAJlD,KAAAA,EAAA,IAKE,IALF,KAAAA,EAAA,IAKc,IALd,KAAAA,EAAA,UAAAA,EAAA,IAK0B,IAL1B,KAAAA,EAAA,IAKkD,IALlD,KAAAA,EAAA,IAME,IANF,KAAAA,EAAA,IAMc,IANd,KAAAA,EAAA,UAAAA,EAAA,IAM0B,IAN1B,KAAAA,EAAA,IAMkD,IANlD,KAAAA,EAAA,IAOE,IAPF,KAAAA,EAAA,IAOc,IAPd,KAAAA,EAAA,IAO0B,IAP1B,KAAAA,EAAA,IAOsC,IAPtC,KAAAA,EAAA,IAOkD,IAPlD,KAAAA,EAAA,IAQE,IARF,KAAAA,EAAA,IAQc,IARd,KAAAA,EAAA,IAQ0B,IAR1B,KAAAA,EAAA,IAQsC,IARtC,KAAAA,EAAA,IAQkD,IARlD,KAAAA,EAAA,IASE,IATF,KAAAA,EAAA,IASc,IATd,KAAAA,EAAA,IAS0B,IAT1B,KAAAA,EAAA,IASsC,IATtC,KAAAA,EAAA,IASkD,IATlD,KAAAA,EAAA,IAUE,IAVF,KAAAA,EAAA,IAUc,IAVd,KAAAA,EAAA,IAU0B,IAV1B,KAAAA,EAAA,IAUsC,IAVtC,KAAAA,EAAA,IAUkD,IAVlD,KAAAA,EAAA,IAWE,IAXF,KAAAA,EAAA,IAWc,IAXd,KAAAA,EAAA,IAW0B,IAX1B,KAAAA,EAAA,UAAAA,EAAA,IAWsC,IAXtC,KAAAA,EAAA,IAYE,IAZF,KAAAA,EAAA,IAYc,IAZd,KAAAA,EAAA,IAY0B,IAZ1B,KAAAA,EAAA,IAYsC,IAZtC,KAAAA,EAAA,IAYkD,IAZlD,KAAAA,EAAA,IAaE,IAbF,KAAAA,EAAA,IAac,IAbd,KAAAA,EAAA,IAa0B,IAb1B,KAAAA,EAAA,UAAAA,EAAA,IAasC,IACpC,G,mhBC5CLC,EAAaC,G,OAChB,QAAOD,EAAGE,EAAID,EAAGC,GAAK,GACfF,EAAGG,EAAIF,EAAGE,GAAK,G,YAEnBH,EAAeC,G,OAClB,OAAMA,EAAGC,EAAIF,EAAGE,EAAOD,EAAGE,EAAIH,EAAGG,G,YAkC9BH,EAAaC,G,OAChBvU,KAAK,MAJU0U,E,SAHAA,EAAapQ,G,OAC5B,OAAM,SAAAoQ,EAAA,EAMsC,GANxB,SAAAA,EAAA,EAMwB,GANV,SAAAA,EAAA,EAMU,IAAtB,C,SAVPJ,EAAaC,G,OAC5B,OAAMD,EAAGE,EAAID,EAAGC,EAAOF,EAAGG,EAAIF,EAAGE,EAAOH,EAAGK,EAAIJ,EAAGI,GASf,CAAAL,EAAKC,IAHxCG,EAAA,EAAMA,EAAED,EAAIC,EAAEC,I,IADCD,E,YA2CZld,EAAiBiE,G,gBAPjBmZ,EAAOnZ,G,OAAuBmZ,EAAA,EAAMnZ,EAAE+Y,EAAII,EAAEH,EAAIhZ,EAAEgZ,EAAIG,EAAED,EAAIlZ,EAAEkZ,EAOtB,CAAClZ,EAAMjE,IArB/Cod,EAqBoDnZ,EApBvDuE,KAAK,K,SAJF4U,G,OACH,SAAAA,EAAA,EAAO,GAAM,SAAAA,EAAA,EAAO,GAAM,SAAAA,EAAA,EAAO,GAGvB,CAAAA,K,IADPA,E,mwBA4GW,OAAM,EAAS,EAAS,G,YAoB1CC,EACAC,EACAC,EACCC,EACDC,EACCP,G,gBAZsBO,EAAqBP,G,MACxCQ,EAAcD,EAAcP,EAAEC,E,OAClC,OAAMD,EAAEF,EAAIU,EACNR,EAAED,EAAIS,EACNR,EAAEC,EAAIO,GAYTC,CAAAF,E,SA1BHJ,EACAC,EACAC,EACCC,EACAN,G,MACGU,GA5HGd,EA4HqBU,EA3HxB,QADkBT,EA4HqBG,GA3H9BF,EAAIF,EAAGE,EAAOD,EAAGE,EAAIH,EAAGG,EAAOF,EAAGI,EAAIL,EAAGK,I,IAD/CL,EAAeC,E,OA6HtB,OAAM,GAAAa,EAA0BP,GAC1B,GAAAO,EAA0BN,GAC1B,GAAAM,EAA0BL,IAiB7BM,CAAAR,EAAAC,EAAAC,EAAAC,EADHN,IChPG,IAAIY,GAiCX,SAASC,GAASC,EAAUC,GACxB,OAAQA,GACJ,KAAK,EAAG,OAAOD,EAAW,CAAC,EAAG,KAAO,EAAE,IAAK,KAC5C,KAAK,GAAI,OAAOA,EAAW,CAAC,EAAG,OAAS,EAAE,MAAO,OACjD,KAAK,GAAI,OAAOA,EAAW,CAAC,EAAG,YAAc,EAAE,WAAY,YAC3D,QAAS,MAAM,IAAI7c,MAAM,sBA0C1B,SAAS,GAAMW,EAAK8a,EAAOoB,EAAUC,EAAS5b,GACjD,MAAM8D,EAdH,SAAiBrE,EAAK8a,EAAOva,GAChC,MACM8D,EADe,8CACIgF,KAAKrJ,EAAImH,QAAQ,KAAM,KAChD,GAAW,MAAP9C,EAAa,CACb,MAAe,CAAW,CAAE+X,EAAQC,GAAUhY,EAC9C9D,EAAQA,GArBhB,SAAkB6b,EAAQtB,GACtB,GAAIA,EAAQkB,GAAaM,kBACrB,OAAO,GAGP,OAAQF,GACJ,IAAK,KACL,IAAK,KAAM,OAAO,EAClB,IAAK,KACL,IAAK,KAAM,OAAO,EAClB,IAAK,KACL,IAAK,KAAM,OAAO,GAClB,QAAS,OAAO,IASHG,CAASH,EAAQtB,GAClC,MAAM0B,EAhCd,SAA0Bjc,GACtB,OAAQA,GACJ,KAAK,EAAG,MAAO,SACf,KAAK,EAAG,MAAO,SACf,KAAK,GAAI,MAAO,SAChB,KAAK,GAAI,MAAO,eAChB,QACI,MAAM,IAAIlB,MAAM,kBAyBEod,CAAiBlc,GACvC,IAAKic,EAAcE,KAAKL,GACpB,OAnDZ,SAAuBM,EAAYpc,GAC/B,MAAe,CAAE8J,EAAM+R,EAAQC,GAAUM,EACzC,MAAO,CACHtS,KAAMA,GAAQ,GACd+R,OAAQA,GAAU,GAClBC,OAAAA,EACA9b,MAAAA,GA6CWqc,CAAcvY,EAAK9D,GAGlC,OAAO,KAGKsc,CAAQ7c,EAAK8a,EAAOva,GAChC,GAAW,MAAP8D,EAAa,CACb,IAAIlC,EAAImF,OAAOmD,SAASpG,EAAIgG,KAAOhG,EAAIgY,OAAQhY,EAAI9D,OACnD,IAAK+G,OAAOgB,MAAMnG,GAAI,CAClB,MAAO2a,EAAMC,GAAQd,IAAS,EAAME,IAC/BD,GAA0B,KAAd7X,EAAI9D,OAAgB4B,GAAK2a,GAAQ3a,GAAK4a,IACnD5a,EAAIA,GAAM,GAAKga,GAAa,GAAKA,GAErC,MAAOa,EAAKvZ,GAAOwY,GAASC,EAAUC,GACtC,GAAIha,GAAK6a,GAAO7a,GAAKsB,EACjB,OAAOtB,GAInB,MAAM,IAAI9C,MAAM,8CA9FpB,SAAW2c,GAWPA,EAAaA,EAAgC,kBAAI,KAAO,oBAX5D,CAsBGA,KAAiBA,GAAe,K,SCd3B,U,GACA,wB,GACI,IAAIhR,M,GAST,EAAc,GADd,GAAI,GAAE,W,MADNiS,EADA,GAAI,GAAEjc,GALD,UAIL,GAAI,GAAE,YAAS2M,GAAe,GAAM3M,GAAIgK,KAAzB,GAAE,OAAK,SADzB,GAAE,O,OAGC,GAAI,GAAE,YAAS2C,GAAc,GAAM3M,GAAIkc,KAAxB,GAAE,OAAK,QAAtBD,IACM,K,GAaN,EAAc,GADd,GAAI,GAAE,W,MADNA,EADA,GAAI,GAAE,YAAStP,GAAc,GAAM3M,GAAIgK,KAAxB,GAAE,OAAK,QADzB,GAAE,M,OAEC,GAAI,GAAE,YAAS2C,GAAc,GAAM3M,GAAIkc,KAAxB,GAAE,OAAK,QAAtBD,IACM,K,YAqCOjc,GAChB,I,OC1DG,SAAehB,GAClB,MAAMmd,EAAW,IAAIjX,EAAU,GAC/B,GAbG,SAAkBlG,EAAKmd,GAE1B,GAAW,MAAPnd,GAAe,KAAK0c,KAAK1c,GAAM,CAC/B,MAAMmC,GAAKnC,EAAImH,QAAQ,IAAK,IAC5B,IAAKG,OAAOgB,MAAMnG,GAEd,OADAgb,EAAS7W,SAAWnE,GACb,EAGf,OAAO,EAIH,CAASnC,EAAKmd,GACd,OAAOA,EAAS7W,SAGhB,MAAM,IAAIjH,MAAM,6C,CDoDhB2B,G,MACJ2M,GAAA,MAAAA,G,YAEc3M,GACd,I,OAAIA,EAAK,GAALA,EAAAA,KAAAA,EAAAA,I,MACJ2M,GAAA,MAAAA,G,YEvEOyP,EAASlZ,G,O3B2bb,SAAe/E,EAAOkd,EAAS,GAClC,MAAMgB,EAAI3W,KAAK4W,IAAI,GAAIjB,GACjBe,IAAMf,EAASld,EAAQke,EAAIle,GAAOuL,QAAQ,GAC1C5K,EAAI4G,KAAK6W,MAAMH,GACflZ,EAAIkZ,EAAItd,EAER2W,EAAKvS,EAAI,GADL,MACgBA,EAAI,GADpB,KACiCpE,EAAI,GAAM,EAAKA,EAAIA,EAAI,EAAK4G,KAAK8W,MAAMJ,GAClF,OAAOf,EAAS5F,EAAI4G,EAAI5G,E2BlcI,CAAWvS,EAAGkZ,G,YAC9BlZ,G,OAAsCA,EAAAA,W,YACxC8G,G,SAAoCA,G,YCwDnCgQ,EAAcC,G,OACxBA,EAAGE,EAAIH,EAAGG,IAAMF,EAAGC,EAAIF,EAAGE,GC1DxB,MAAMuC,GACT7e,YAAYO,EAAOue,GACf3e,KAAK4e,IAAM,GACNtR,EAAclN,IACTJ,KAAK4e,IAAI7T,KAAK3K,GAG5Bc,WAEI,OAAO8E,EAAK,GADDhG,KACQ4e,MAoBpB,SAASC,KACZ,OAZO,IAAIH,GAY0B,GAAI,I,YCzBhCI,EAAAC,EAAAC,EAAAC,G,MAAAxH,EAAAA,CAAAqH,EAAAC,EAAAC,EAAAC,G,MACT,kHAWIpD,EAAAA,MAAAA,EAAa,gBAAC,S,SAIdA,GAAa,G,QACjB,MAC0B,OAChB,GAAWqD,EAAA,iB,+EAoBLC,GAAAA,IAAAA,GAAAA,GAAAA,EAAAA,UAAAA,GAAAA,I,EAEHC,GADbD,GAAAA,IAAAA,GAAAA,GAAAA,EAAAA,UAAAA,GAAAA,I,wEAOiB,EADd,OAAeD,c,gEAGHC,a,GACXA,EAAQ,OAAaA,4G,GAEPE,EAA2BC,GAAAA,wBAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,0BACnC,GAAAD,EAAAA,GAAAA,wBAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,0B,GAEK,EAAAA,GAAAA,wBAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,0BAAA,GAAG,6BAAUC,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,0B,GAAkBngB,EAAAA,GAAAA,wBAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,6B,eAAO,sB,+BADzC,c,uSA0FG,G,eAAkDmgB,KAAAA,GAAAA,MAAAA,GAAAA,YAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,KAAZ,a,uJAKzCC,GAAAA,Q,MA2CT,0BA7BK,8EAEM,WAAA3Q,GAAAA,EAAAA,MAAAA,EAAAA,GAAAA,GAAAA,KAAAA,GAAAA,EAAAA,WAAAA,OAAAA,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,qB,qIDzIX,SAAyCzP,EAAG8C,GAE/C,OADM9C,EAAEyf,IAAI7T,KAAK9I,GACV9C,E,4RCgHG,SAAAkgB,GAAAA,W,gBAEK,EAAAA,mCAAAA,EAAAA,cAAAA,EAAAA,6B,gBAA+BlgB,EAAAA,iCAAAA,EAAAA,cAAAA,EAAAA,U,wCALrBqgB,E,QAEjBC,EAAAA,GAAAA,IAAAA,G,oBApFF7Q,EAAAA,GAAA,G,UAAA6Q,EAAA,Q,cACS3H,GAAL,M,OAAA,CAAR,c,oDAyBK,0B,oDAKJ,EAAc,EADH4H,I,EAcIR,EAKZtQ,GAAA,OAAAA,C,MAUE,qC,uFANG,EAAc,cADf,mB,GAAa+Q,EAAAA,OAAY,c,KAA3B,qB,GADA/Q,EAAAA,OAAAA,c,GAGJ,oE,0MAiBE,0B,GACE,uB,wKAML,MAAc,IAMT6Q,CAAAA,EAAAA,I,6DA2NI7Q,K,qCANSuQ,OAAAA,GAAAA,IAAAA,EAAAA,EAAAA,0B,gFAqBiC,uB,0DAEb,EAAAS,GAAAA,EAAAA,GAAAA,EAAAA,Q,uDAGnCC,IAAAA,I,0CAyBC,MADI,QADJD,C,gDAYA,C,+IAxBA,OADI,K,8sFA5CI,YAAG,OAAUN,IAAAA,IAAAA,I,qHAAb,EAAAD,OAAAA,GAAAA,EAAAA,OAAAA,GAAAA,EAAAA,0BAAsC,0B,qDADzC,kB,uDAQZ,IACI,IA1JUH,GAAAA,GAAAA,EAAAA,IAAAA,EAAAA,CA2JN,QA3JMA,EAAAA,IA2JSY,IA1JnB,EA2JI,YAAcP,I,YACR3Q,CAAAA,MAAAA,E,0CAdN6Q,O,iEAcM7Q,CAAAA,EAAAA,EAAAA,KACE,W,YAEJ,CAvJyB3M,MAAjByd,EAGZK,CAAAA,EACAC,GAoJ8B,IAAaT,G,8DACzB3Q,EAAA,GAAe,0BAAf,6B,6FAEIA,OAAA,wE,oGAvISoR,GAAhB,iD,yPA1FER,E,mGCrIZS,EAAaC,EAAcf,G,OAErC,IAAgBD,G,SRgIZ/f,EAAU8gB,EAAaE,G,OAC1B,0B,SApDG9D,EAAU4D,EAAaE,G,gBA/EvBhhB,G,OACGA,EAAAA,K,cAOIihB,I,MAAA/D,EAAA,KAAY8D,EAAZ,K,OACF,OAAM,IAAMxY,KAAK,IAAIwY,GAAO,IAAMxY,KAAK,IAAIwY,GACrC,IACA,IAAMxY,KAAK,IAAIwY,GAAO,IAAMxY,KAAK,IAAIwY,K,cAEzCC,I,MAAA/D,EAAA,KAAY8D,EAAZ,K,OACF,OAAM,IAAMxY,KAAK,IAAIwY,GAAO,IAAMxY,KAAK,IAAIwY,GACrC,IAAMxY,KAAK,IAAIwY,GAAO,IAAMxY,KAAK,IAAIwY,GACrC,M,eAbJC,I,MAAA/D,EAAA,KAAY8D,EAAZ,K,OACF,OAAM9D,EAAEF,EACFE,EAAA,EAAM1U,KAAK,IAAIwY,GAAO9D,EAAEC,EAAI3U,KAAK,IAAIwY,GACrC9D,EAAA,EAAM1U,KAAK,IAAIwY,GAAO9D,EAAEC,EAAI3U,KAAK,IAAIwY,MA0EnD,CAAAF,EAAA,CAAAA,CAAoB5D,EAAG8D,IAmDL,CAAAhhB,EAAA,OAAgB8gB,EAAKE,GAAvC,UQhIA,CAAAjB,EAAYe,EAAOC,EAAO,IAAS,EAAM,oBAF7Cf,G,YAiBCkB,EACAtW,EACAuW,EACAC,EACAC,G,MAIGA,EAAM,OAIcC,GAAY,UAAEH,EAASI,MADvBD,GAAY,UAAEH,EAASI,MADvBD,GAAY,UAAEH,EAASK,MAD1BH,EAAII,SADf,S,IAQNC,E,MAEMjS,EAAsF,GAAM,EAAjB,GzBokCrEpB,EyBpkCO,IAAesT,GAAK,GAAAA,EAAA,YAAjC,sBzBokCUnc,EyBpkCV,C,WzBw+BP,SAAgBoc,EAAWC,GAC9B,GAAqB,IAAjBA,EAAMhgB,OACN,MAAM,IAAKV,MAAM,6BAErB,MAAM2gB,EAAcF,EACpB,OAAOC,EAAMxe,OAAOye,GAwFbze,EAAO,CAACrD,EAAGO,IAAQiF,EAASuc,QAAQxhB,EAAGP,GAAK,EAAKO,EAAIP,GAAIqO,KAD7D,IAAaA,EAAI7I,EyBtkChBkc,EAGS,EAFW,IACdjS,E,MAGNyR,EACM,MAAAA,EAEMA,EAAAA,EADDQ,GAAgBA,EAA+B,EAAhBA,EAAqC,EAAhBA,GAG/DjE,EAAqBiE,EACrBlE,EAAe,OAAM,KAAU,KAAUC,GACzCuE,EAAuB,GAAAxE,EAAAA,IAGvB6D,EAAM,QAAkD,IAA5BzW,EAAQqX,mBApD3BpF,EAoDsE,UAAE,QAnDrF,QAAkBkD,IAAmB,EAAAA,EAAA,SAAiBlD,MAmD8C,QAA1F,S,IApDGA,E,MAuDTqF,E,SA/CmBC,EAAed,G,OAUtC,OAAmB,IAAeM,I,MATfA,EASkCA,E,OARjD,0BACa,OACDA,EAAES,OAAOpF,EAAImF,EACbR,EAAES,OAAOnF,EAAIkF,EACbR,EAAES,OAAOjF,EAAIgF,GACZR,EAAEU,OAASF,KAG4Bd,EAAII,OAAe,IAAea,I,MAFxEA,EAE2FA,E,OADzG,wCAAmBA,EAAEC,QAAUJ,KAC6Ed,EAAImB,QAqC/FC,CAAsBrB,EAAKsB,MAAMrB,GAGlDa,EAAiB,OzBgrBlB,SAAgBS,EAAYtU,EAAI7I,GACnC,MAAM+J,EAAOlB,EAAGJ,QAChB,OAAQsB,EAAK7K,MAAK,CAAC1E,EAAGO,IAAMiF,EAASuc,QAAQY,EAAW3iB,GAAI2iB,EAAWpiB,MAAMgP,EyBlrBF,EAAkBwQ,IAAoC,EAA5B,GAAAA,EAAA,OAAqBvC,IAAvE0E,EAAeT,MAAf,C,YAA9B,SAGjBS,EAAiB,OAGF,IAAenC,GAAAA,IAEd,+BADuBiC,EAAiB,GAAAxE,EAAa,UAAgB,WAFzE,SAFK,SAQjBD,EAA0B,QAAOC,EAAIR,GAAQQ,EAAIP,GAAQO,EAAIL,GAC7DE,EAAgC,OAAME,EAAcN,GAAQM,EAAcP,EAAO,GACjFM,GRsCYrZ,EQtCkCoZ,ERuC9C,QADGD,EQtCuBG,GRuCpB,EAAMtZ,EAAEkZ,EAAIC,EAAED,EAAIlZ,EAAEgZ,EACpBG,EAAA,EAAMnZ,EAAE+Y,EAAII,EAAEJ,EAAI/Y,EAAEkZ,EACpBC,EAAA,EAAMnZ,EAAEgZ,EAAIG,EAAEH,EAAIhZ,EAAE+Y,I,IAHvBI,EAASnZ,E,MQlCZie,EAAiB,OAEmB,IAAenC,I,MAJ/BA,EAI0DA,E,OAJ7B,0BADrC6C,GAAQvF,EAAoBC,EAAcC,EAAcC,EAAIC,EACM,UAA7B,YAIrC,SAFK,S,OAmBrBoF,GAAA,oBAAiBjY,EAAQkY,UAZrB,OAEO,IAAgB7B,I,MAAA8B,EAAA,K,OACf,OAAUA,EAAgBC,MACbD,EAAgBE,SAClB,OAAMF,EAAgBX,OAAOpF,EAAO+F,EAAgBX,OAAOnF,GAC3D8F,EAAgBV,OAEd,QAPjB,GAAU,QAAqB,UASzB,UAEmCnB,G,iB9B4E9C,cARA,MACHxgB,YAAYwiB,GACRriB,KAAKqiB,QAAUA,IAOnBhc,SAAW,OAAOO,EAAa5G,MAC/BkB,WAAa,OAAO2F,EAAe7G,MACnC4C,cAAgB,OAAOkE,EAAkB9G,MACzCwD,OAAOmD,GAAS,OAAOI,EAAa/G,KAAM2G,GAC1CrC,UAAUqC,GAAS,OAAOM,EAAgBjH,KAAM2G,K,yJ+B3IhC2b,G,O3B4Vb,SAAwBC,GAC3B,IAAIthB,EAAM,GACV,IAAK,IAAIF,EAAI,EAAGA,EAAIwhB,EAAQvhB,OAAQD,IAChCE,GAAOiF,OAAOsc,aAAaD,EAAQxhB,IAEvC,MAAuB,mBAAT0hB,KAAsBA,KAAKxhB,GAR7C,SAAsBgF,GAClB,MAAM,IAAI3F,MAAM,oCAAsC2F,EAAO,6BAObyc,CAAa,Q2B/V7D,EAPQC,EAMY,UAHjB,IAAexT,G,SAvCXhQ,EAAegQ,G,OAKRA,G,IAAA,K,IAAA,K,IAAA,I,OACoB,G,IADpB,I,OAEI,G,IAFJ,I,OAEoB,G,IAFpB,I,OAEoC,G,IAFpC,I,OAEoD,G,IAFpD,I,OAGI,G,IAHJ,I,OAGoB,G,IAHpB,I,OAGoC,G,IAHpC,I,OAGoD,G,IAHpD,I,OAII,G,IAJJ,I,OAIoB,G,IAJpB,I,OAIoC,G,IAJpC,I,OAIoD,G,IAJpD,I,OAKI,G,IALJ,I,OAKoB,G,IALpB,I,OAKoC,G,IALpC,I,OAKoD,G,IALpD,I,OAMI,G,IANJ,I,OAMoB,G,IANpB,I,OAMoC,G,IANpC,I,OAMoD,G,IANpD,I,OAOI,G,IAPJ,I,OAOoB,G,IAPpB,I,OAOoC,G,IAPpC,I,OAOoD,G,IAPpD,I,OAQI,G,IARJ,I,OAQoB,G,IARpB,I,OAQoC,G,IARpC,I,OAQoD,G,IARpD,I,OASI,G,IATJ,I,OASoB,G,IATpB,I,OASoC,G,IATpC,I,OASoD,G,IATpD,I,OAUI,G,IAVJ,I,OAUoB,G,IAVpB,I,OAUoC,G,IAVpC,I,OAUoD,G,IAVpD,I,OAWI,G,IAXJ,I,OAWoB,G,IAXpB,I,OAWoC,G,IAXpC,I,OAWoD,G,IAXpD,I,OAYI,G,IAZJ,I,OAYoB,G,IAZpB,I,OAYoC,G,IAZpC,I,OAYoD,G,IAZpD,I,OAaI,G,IAbJ,I,OAaoB,G,IAbpB,I,OAaoC,G,IAbpC,I,OAaoD,G,IAbpD,I,OAcI,G,IAdJ,I,OAcoB,G,IAdpB,I,OAcoC,G,IAdpC,I,OAcoD,G,IAdpD,I,OAeI,G,IAfJ,I,OAeoB,G,IAfpB,I,OAeoC,G,IAfpC,I,OAeoD,G,IAfpD,I,OAgBI,G,IAhBJ,I,OAgBoB,G,IAhBpB,I,OAgBoC,G,IAhBpC,K,OAgBoD,G,IAhBpD,I,OAiBI,G,IAjBJ,I,OAiBoB,G,IAjBpB,I,OAiBoC,G,IAjBpC,I,OAiBoD,G,IAjBpD,I,OAkBI,G,IAlBJ,I,OAkBoB,G,IAlBpB,I,OAkBoC,G,IAlBpC,I,OAkBoD,I,IAlBpD,I,OAmBG,I,IAnBH,I,OAmBoB,I,IAnBpB,I,OAmBoC,I,IAnBpC,I,OAmBoD,I,IAnBpD,I,OAoBG,I,IApBH,I,OAoBoB,I,IApBpB,I,OAoBoC,I,IApBpC,I,OAoBoD,I,IApBpD,I,OAqBG,I,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","sources":["webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Util.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Types.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Date.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Numeric.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/RegExp.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/String.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Array.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/List.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/AsyncBuilder.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Choice.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Async.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Option.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Event.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Observable.js","webpack:///./src/Client/output/fable_modules/Fable.Elmish.3.1.0/prelude.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Timer.js","webpack:///./src/Client/output/fable_modules/Fable.Elmish.3.1.0/cmd.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Seq.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/FSharp.Core.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Range.js","webpack:///./src/Client/output/fable_modules/Fable.Elmish.3.1.0/ring.fs","webpack:///./src/Client/output/fable_modules/Fable.Elmish.React.3.0.1/common.fs","webpack:///./src/Client/CineMol/Styles.fs","webpack:///./src/Client/CineMol/Types.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Int32.js","webpack:///./src/Client/CineMol/Parsing.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Double.js","webpack:///./src/Client/CineMol/Helpers.fs","webpack:///./src/Client/CineMol/Geometry.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/System.Text.js","webpack:///./src/Client/CineMol/Svg.fs","webpack:///./src/Client/CineMol/Drawing.fs","webpack:///./src/Client/CineMol/Encoding.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Reflection.js","webpack:///./src/Client/output/fable_modules/Fulma.2.16.0/Common.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/MapUtil.js","webpack:///./src/Client/output/fable_modules/Fulma.2.16.0/Elements/Form/File.fs","webpack:///./src/Client/output/fable_modules/Feliz.Bulma.2.18.0/ElementBuilders.fs","webpack:///./src/Client/Index.fs","webpack:///./src/Client/output/fable_modules/Fable.Elmish.React.3.0.1/react.fs","webpack:///./src/Client/output/fable_modules/Fable.Elmish.3.1.0/program.fs","webpack:///./src/Client/App.fs"],"sourcesContent":["// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function disposeSafe(x) {\n    if (isDisposable(x)) {\n        x.Dispose();\n    }\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED = Symbol(\"curried\");\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null || f.length > 1) {\n        return f;\n    }\n    const uncurried = (...args) => {\n        let res = f;\n        for (let i = 0; i < arity; i++) {\n            res = res(args[i]);\n        }\n        return res;\n    };\n    uncurried[CURRIED] = f;\n    return uncurried;\n}\nfunction _curry(args, arity, f) {\n    return (arg) => arity === 1\n        ? f(...args.concat([arg]))\n        // Note it's important to generate a new args array every time\n        // because a partially applied function can be run multiple times\n        : _curry(args.concat([arg]), arity - 1, f);\n}\nexport function curry(arity, f) {\n    if (f == null || f.length === 1) {\n        return f;\n    }\n    else if (CURRIED in f) {\n        return f[CURRIED];\n    }\n    else {\n        return _curry([], arity, f);\n    }\n}\nexport function checkArity(arity, f) {\n    return f.length > arity\n        ? (...args1) => (...args2) => f.apply(undefined, args1.concat(args2))\n        : f;\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED in f) {\n        f = f[CURRIED];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        return _curry(args, arity, f);\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr = \"\";\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 2 /* Local */; // better default than Unspecified\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    function fail() {\n        throw new Error(`The string is not a valid Date: ${input}`);\n    }\n    if (input == null || input.trim() === \"\") {\n        fail();\n    }\n    // ISO dates without TZ are parsed as UTC. Adding time without TZ keeps them local.\n    if (input.length === 10 && input[4] === \"-\" && input[7] === \"-\") {\n        input += \"T00:00:00\";\n    }\n    let date = new Date(input);\n    let offset = null;\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*(Z|[+-]([01]?\\d):?([0-5]?\\d)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                if (m[4] === \"Z\") {\n                    offset = \"Z\";\n                }\n                else {\n                    let offsetInMinutes = parseInt(m[5], 10) * 60 + parseInt(m[6] || \"0\", 10);\n                    if (m[4][0] === \"-\") {\n                        offsetInMinutes *= -1;\n                    }\n                    offset = offsetInMinutes;\n                    timeInSeconds -= offsetInMinutes * 60;\n                }\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            fail();\n        }\n        // Check again the date is valid after transformations, see #2229\n        if (isNaN(date.getTime())) {\n            fail();\n        }\n    }\n    return [date, offset];\n}\nexport function parse(str, detectUTC = false) {\n    const [date, offset] = parseRaw(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.test(input);\n}\nexport function match(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.exec(input);\n}\nexport function matches(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(input);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(input);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        strIdx = interpolateRegExp.lastIndex;\n        // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex -= 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        if (idx < 0 || idx >= args.length) {\n            throw new Error(\"Index must be greater or equal to zero and less than the arguments' length.\");\n        }\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/([0#,]+)(\\.[0#]+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            const decimalPartLength = decimalPart != null ? decimalPart.length : 0;\n                            rep = toFixed(rep, Math.max(decimalPartLength - 1, 0));\n                            // Thousands separator\n                            if (intPart.indexOf(\",\") > 0) {\n                                const [intPart, decimalPart] = rep.split(\".\");\n                                const i = intPart.length % 3;\n                                const thousandGroups = Math.floor(intPart.length / 3);\n                                let thousands = i > 0 ? intPart.substr(0, i) + (thousandGroups > 0 ? \",\" : \"\") : \"\";\n                                for (let j = 0; j < thousandGroups; j++) {\n                                    thousands += intPart.substr(i + j * 3, 3) + (j < thousandGroups - 1 ? \",\" : \"\");\n                                }\n                                rep = decimalPart ? thousands + \".\" + decimalPart : thousands;\n                            }\n                            // In .NET you can mix 0/# placeholders but for simplicity we only check the left most character\n                            intPart = intPart.replace(/,/g, \"\");\n                            const intPartLength = intPart.length > 0 && intPart[0] === \"0\" ? intPart.length : 0;\n                            return padLeft(rep, intPartLength - sign.length + decimalPartLength, \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, options) {\n    count = typeof count === \"number\" ? count : undefined;\n    options = typeof options === \"number\" ? options : 0;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    const removeEmpty = (options & 1) === 1;\n    const trim = (options & 2) === 2;\n    splitters = splitters || [];\n    splitters = splitters.filter(x => x).map(escape);\n    splitters = splitters.length > 0 ? splitters : [\"\\\\s\"];\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    let findSplits = true;\n    let i = 0;\n    do {\n        const match = reg.exec(str);\n        if (match === null) {\n            const candidate = trim ? str.substring(i).trim() : str.substring(i);\n            if (!removeEmpty || candidate.length > 0) {\n                splits.push(candidate);\n            }\n            findSplits = false;\n        }\n        else {\n            const candidate = trim ? str.substring(i, match.index).trim() : str.substring(i, match.index);\n            if (!removeEmpty || candidate.length > 0) {\n                if (count != null && splits.length + 1 === count) {\n                    splits.push(trim ? str.substring(i).trim() : str.substring(i));\n                    findSplits = false;\n                }\n                else {\n                    splits.push(candidate);\n                }\n            }\n            i = reg.lastIndex;\n        }\n    } while (findSplits);\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\nexport function fmt(strs, ...args) {\n    return ({ strs, args });\n}\nexport function fmtWith(fmts) {\n    return (strs, ...args) => ({ strs, args, fmts });\n}\nexport function getFormat(s) {\n    return s.fmts\n        ? s.strs.reduce((acc, newPart, index) => acc + `{${String(index - 1) + s.fmts[index - 1]}}` + newPart)\n        : s.strs.reduce((acc, newPart, index) => acc + `{${index - 1}}` + newPart);\n}\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\r\nimport { min as min_1, disposeSafe, getEnumerator, comparePrimitives, max as max_1 } from \"./Util.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport function Helpers_allocateArrayFromCons(cons, len) {\r\n    if ((typeof cons) === \"function\") {\r\n        return new cons(len);\r\n    }\r\n    else {\r\n        return new Array(len);\r\n    }\r\n}\r\n\r\nfunction indexNotFound() {\r\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\r\n}\r\n\r\nfunction differentLengths() {\r\n    throw (new Error(\"Arrays had different lengths\"));\r\n}\r\n\r\nexport function append(array1, array2, cons) {\r\n    const len1 = array1.length | 0;\r\n    const len2 = array2.length | 0;\r\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\r\n    for (let i = 0; i <= (len1 - 1); i++) {\r\n        newArray[i] = array1[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        newArray[i_1 + len1] = array2[i_1];\r\n    }\r\n    return newArray;\r\n}\r\n\r\nexport function filter(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function fill(target, targetIndex, count, value) {\r\n    const start = targetIndex | 0;\r\n    return target.fill(value, start, (start + count));\r\n}\r\n\r\nexport function getSubArray(array, start, count) {\r\n    const start_1 = start | 0;\r\n    return array.slice(start_1, (start_1 + count));\r\n}\r\n\r\nexport function last(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    return array[array.length - 1];\r\n}\r\n\r\nexport function tryLast(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[array.length - 1]);\r\n    }\r\n}\r\n\r\nexport function mapIndexed(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(i, source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function map(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function mapIndexed2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapIndexed3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapFold(mapping, state, array, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = 0; i <= (array.length - 1); i++) {\r\n            const patternInput = mapping(acc, array[i]);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function mapFoldBack(mapping, array, state, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = array.length - 1; i >= 0; i--) {\r\n            const patternInput = mapping(array[i], acc);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function indexed(source) {\r\n    const len = source.length | 0;\r\n    const target = new Array(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = [i, source[i]];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function truncate(count, array) {\r\n    const count_1 = max_1(comparePrimitives, 0, count) | 0;\r\n    const start = 0;\r\n    return array.slice(start, (start + count_1));\r\n}\r\n\r\nexport function concat(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const matchValue = arrays_1.length | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return Helpers_allocateArrayFromCons(cons, 0);\r\n        }\r\n        case 1: {\r\n            return arrays_1[0];\r\n        }\r\n        default: {\r\n            let totalIdx = 0;\r\n            let totalLength = 0;\r\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\r\n                const arr_1 = arrays_1[idx];\r\n                totalLength = ((totalLength + arr_1.length) | 0);\r\n            }\r\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\r\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\r\n                const arr_2 = arrays_1[idx_1];\r\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\r\n                    result[totalIdx] = arr_2[j];\r\n                    totalIdx = ((totalIdx + 1) | 0);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function collect(mapping, array, cons) {\r\n    return concat(map(mapping, array, null), cons);\r\n}\r\n\r\nexport function where(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function contains(value, array, eq) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return false;\r\n            }\r\n            else if (eq.Equals(value, array[i])) {\r\n                return true;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function empty(cons) {\r\n    return Helpers_allocateArrayFromCons(cons, 0);\r\n}\r\n\r\nexport function singleton(value, cons) {\r\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\r\n    ar[0] = value;\r\n    return ar;\r\n}\r\n\r\nexport function initialize(count, initializer, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (count - 1); i++) {\r\n        result[i] = initializer(i);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function pairwise(array) {\r\n    if (array.length < 2) {\r\n        return [];\r\n    }\r\n    else {\r\n        const count = (array.length - 1) | 0;\r\n        const result = new Array(count);\r\n        for (let i = 0; i <= (count - 1); i++) {\r\n            result[i] = [array[i], array[i + 1]];\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function replicate(count, initial, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (result.length - 1); i++) {\r\n        result[i] = initial;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function copy(array) {\r\n    return array.slice();\r\n}\r\n\r\nexport function reverse(array) {\r\n    const array_2 = array.slice();\r\n    return array_2.reverse();\r\n}\r\n\r\nexport function scan(folder, state, array, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[0] = state;\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        res[i + 1] = folder(res[i], array[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function scanBack(folder, array, state, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[array.length] = state;\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        res[i] = folder(array[i], res[i + 1]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function skip(count, array, cons) {\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = ((count < 0) ? 0 : count) | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = count | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function take(count, array, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        return array.slice(start, (start + count));\r\n    }\r\n}\r\n\r\nexport function takeWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        const count_1 = count | 0;\r\n        return array.slice(start, (start + count_1));\r\n    }\r\n}\r\n\r\nexport function addInPlace(x, array) {\r\n    array.push(x);\r\n}\r\n\r\nexport function addRangeInPlace(range, array) {\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n}\r\n\r\nexport function insertRangeInPlace(index, range, array) {\r\n    let index_1;\r\n    let i = index;\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            (index_1 = (i | 0), array.splice(index_1, 0, x));\r\n            i = ((i + 1) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n}\r\n\r\nexport function removeInPlace(item_1, array) {\r\n    const i = (array.indexOf(item_1, 0)) | 0;\r\n    if (i > -1) {\r\n        array.splice(i, 1);\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function removeAllInPlace(predicate, array) {\r\n    const countRemoveAll = (count) => {\r\n        const i = (array.findIndex(predicate)) | 0;\r\n        if (i > -1) {\r\n            array.splice(i, 1);\r\n            return (countRemoveAll(count) + 1) | 0;\r\n        }\r\n        else {\r\n            return count | 0;\r\n        }\r\n    };\r\n    return countRemoveAll(0) | 0;\r\n}\r\n\r\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\r\n    const diff = (targetIndex - sourceIndex) | 0;\r\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\r\n        target[i + diff] = source[i];\r\n    }\r\n}\r\n\r\nexport function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\r\n    try {\r\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\r\n    }\r\n    catch (matchValue) {\r\n        copyTo(source, sourceIndex, target, targetIndex, count);\r\n    }\r\n}\r\n\r\nexport function indexOf(array, item_1, start, count) {\r\n    const start_1 = defaultArg(start, 0) | 0;\r\n    const i = (array.indexOf(item_1, start_1)) | 0;\r\n    if ((count != null) && (i >= (start_1 + value_2(count)))) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return i | 0;\r\n    }\r\n}\r\n\r\nexport function partition(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\r\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\r\n    let iTrue = 0;\r\n    let iFalse = 0;\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        if (f(source[i])) {\r\n            res1[iTrue] = source[i];\r\n            iTrue = ((iTrue + 1) | 0);\r\n        }\r\n        else {\r\n            res2[iFalse] = source[i];\r\n            iFalse = ((iFalse + 1) | 0);\r\n        }\r\n    }\r\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\r\n}\r\n\r\nexport function find(predicate, array) {\r\n    const matchValue = array.find(predicate);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_2(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, array) {\r\n    return array.find(predicate);\r\n}\r\n\r\nexport function findIndex(predicate, array) {\r\n    const matchValue = (array.findIndex(predicate)) | 0;\r\n    if (matchValue > -1) {\r\n        return matchValue | 0;\r\n    }\r\n    else {\r\n        return indexNotFound() | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, array) {\r\n    const matchValue = (array.findIndex(predicate)) | 0;\r\n    if (matchValue > -1) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function pick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return indexNotFound();\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue != null) {\r\n                    return value_2(matchValue);\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function tryPick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue == null) {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function findBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound();\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return array[i];\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function tryFindBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return some(array[i]);\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function findLastIndex(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return -1;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function findIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound() | 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function choose(chooser, array, cons) {\r\n    const res = [];\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        const matchValue = chooser(array[i]);\r\n        if (matchValue != null) {\r\n            const y = value_2(matchValue);\r\n            res.push(y);\r\n        }\r\n    }\r\n    if ((typeof cons) === \"function\") {\r\n        return map((x) => x, res, cons);\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\n\r\nexport function foldIndexed(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function fold(folder, state, array) {\r\n    return array.reduce((folder), state);\r\n}\r\n\r\nexport function iterate(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(array[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(i, array[i]);\r\n    }\r\n}\r\n\r\nexport function iterate2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(i, array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function isEmpty(array) {\r\n    return array.length === 0;\r\n}\r\n\r\nexport function forAll(predicate, array) {\r\n    return array.every(predicate);\r\n}\r\n\r\nexport function permute(f, array) {\r\n    const size = array.length | 0;\r\n    const res = array.slice();\r\n    const checkFlags = new Array(size);\r\n    iterateIndexed((i, x) => {\r\n        const j = f(i) | 0;\r\n        if ((j < 0) ? true : (j >= size)) {\r\n            throw (new Error(\"Not a valid permutation\"));\r\n        }\r\n        res[j] = x;\r\n        checkFlags[j] = 1;\r\n    }, array);\r\n    if (!(checkFlags.every((y) => (1 === y)))) {\r\n        throw (new Error(\"Not a valid permutation\"));\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function setSlice(target, lower, upper, source) {\r\n    const lower_1 = defaultArg(lower, 0) | 0;\r\n    const upper_1 = defaultArg(upper, 0) | 0;\r\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\r\n    for (let i = 0; i <= length; i++) {\r\n        target[i + lower_1] = source[i];\r\n    }\r\n}\r\n\r\nexport function sortInPlaceBy(projection, xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(projection(x), projection(y)));\r\n}\r\n\r\nexport function sortInPlace(xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(x, y));\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => comparer.Compare(x, y));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    return (xs_1.sort((x, y) => comparer.Compare(projection(x), projection(y))), xs_1);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => (comparer.Compare(x, y) * -1));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    return (xs_1.sort((x, y) => (comparer.Compare(projection(x), projection(y)) * -1)), xs_1);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const comparer_1 = comparer;\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(comparer_1);\r\n    return xs_1;\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const len1 = xs.length | 0;\r\n    const len2 = ys.length | 0;\r\n    const res = new Array(len1 * len2);\r\n    for (let i = 0; i <= (xs.length - 1); i++) {\r\n        for (let j = 0; j <= (ys.length - 1); j++) {\r\n            res[(i * len2) + j] = [xs[i], ys[j]];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    const res = [];\r\n    const loop = (state_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const state_1 = state_1_mut;\r\n            const matchValue = generator(state_1);\r\n            if (matchValue != null) {\r\n                const x = matchValue[0];\r\n                const s = matchValue[1];\r\n                res.push(x);\r\n                state_1_mut = s;\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(state);\r\n    return res;\r\n}\r\n\r\nexport function unzip(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n    }, array);\r\n    return [res1, res2];\r\n}\r\n\r\nexport function unzip3(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    const res3 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n        res3[i] = tupledArg[2];\r\n    }, array);\r\n    return [res1, res2, res3];\r\n}\r\n\r\nexport function zip(array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function zip3(array1, array2, array3) {\r\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i], array3[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function chunkBySize(chunkSize, array) {\r\n    if (chunkSize < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\r\n            let slice;\r\n            const start_1 = (x * chunkSize) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function splitAt(index, array) {\r\n    let start;\r\n    if ((index < 0) ? true : (index > array.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\r\n}\r\n\r\nexport function compareWith(comparer, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = 0;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return 1;\r\n        }\r\n        else if (length1 < length2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            while ((i < length1) && (result === 0)) {\r\n                result = (comparer(array1[i], array2[i]) | 0);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function equalsWith(equals, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = true;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return false;\r\n        }\r\n        else if (length1 < length2) {\r\n            return false;\r\n        }\r\n        else {\r\n            while ((i < length1) && result) {\r\n                result = equals(array1[i], array2[i]);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function exactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return array[0];\r\n    }\r\n    else if (array.length === 0) {\r\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return some(array[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function head(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        return array[0];\r\n    }\r\n}\r\n\r\nexport function tryHead(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[0]);\r\n    }\r\n}\r\n\r\nexport function tail(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\r\n    }\r\n    return array.slice(1);\r\n}\r\n\r\nexport function item(index, array) {\r\n    return array[index];\r\n}\r\n\r\nexport function tryItem(index, array) {\r\n    if ((index < 0) ? true : (index >= array.length)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[index]);\r\n    }\r\n}\r\n\r\nexport function foldBackIndexed(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldBack(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldIndexed2(folder, state, array1, array2) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        throw (new Error(\"Arrays have different lengths\"));\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        acc = folder(i, acc, array1[i], array2[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function fold2(folder, state, array1, array2) {\r\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\r\n}\r\n\r\nexport function foldBackIndexed2(folder, array1, array2, state) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const size = array1.length | 0;\r\n    for (let i = 1; i <= size; i++) {\r\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(f, array1, array2, state) {\r\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\r\n}\r\n\r\nexport function reduce(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduce(reduction_1);\r\n}\r\n\r\nexport function reduceBack(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduceRight(reduction_1);\r\n}\r\n\r\nexport function forAll2(predicate, array1, array2) {\r\n    return fold2((acc, x, y) => (acc && predicate(x, y)), true, array1, array2);\r\n}\r\n\r\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\r\n    existsOffset:\r\n    while (true) {\r\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\r\n        if (index === array.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array_mut = array;\r\n            index_mut = (index + 1);\r\n            continue existsOffset;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists(predicate, array) {\r\n    return existsOffset(predicate, array, 0);\r\n}\r\n\r\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\r\n    existsOffset2:\r\n    while (true) {\r\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\r\n        if (index === array1.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array1[index], array2[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array1_mut = array1;\r\n            array2_mut = array2;\r\n            index_mut = (index + 1);\r\n            continue existsOffset2;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    return existsOffset2(predicate, array1, array2, 0);\r\n}\r\n\r\nexport function sum(array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, array[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function sumBy(projection, array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, projection(array[i]));\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, array[i]);\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function averageBy(projection, array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, projection(array[i]));\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function windowed(windowSize, source) {\r\n    if (windowSize <= 0) {\r\n        throw (new Error(\"windowSize must be positive\"));\r\n    }\r\n    let res;\r\n    const len = max_1(comparePrimitives, 0, (source.length - windowSize) + 1) | 0;\r\n    res = (new Array(len));\r\n    for (let i = windowSize; i <= source.length; i++) {\r\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function splitInto(chunks, array) {\r\n    if (chunks < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        const chunks_1 = min_1(comparePrimitives, chunks, array.length) | 0;\r\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\r\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\r\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\r\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\r\n            let slice;\r\n            const start_1 = ((i * minChunkSize) + min_1(comparePrimitives, chunksWithExtraItem, i)) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function transpose(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const len = arrays_1.length | 0;\r\n    if (len === 0) {\r\n        return new Array(0);\r\n    }\r\n    else {\r\n        const firstArray = arrays_1[0];\r\n        const lenInner = firstArray.length | 0;\r\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\r\n            differentLengths();\r\n        }\r\n        const result = new Array(lenInner);\r\n        for (let i = 0; i <= (lenInner - 1); i++) {\r\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\r\n            for (let j = 0; j <= (len - 1); j++) {\r\n                result[i][j] = arrays_1[j][i];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len + 1);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    target[index] = y;\r\n    for (let i_1 = index; i_1 <= (len - 1); i_1++) {\r\n        target[i_1 + 1] = xs[i_1];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const ys_1 = Array.from(ys);\r\n    const len2 = ys_1.length | 0;\r\n    const target = new xs.constructor(len + len2);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        target[index + i_1] = ys_1[i_1];\r\n    }\r\n    for (let i_2 = index; i_2 <= (len - 1); i_2++) {\r\n        target[i_2 + len2] = xs[i_2];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    if ((index < 0) ? true : (index >= xs.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    let i = -1;\r\n    return filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        return i !== index;\r\n    }, xs);\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index >= len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = ((i === index) ? y : xs[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\n","import { join } from \"./String.js\";\r\nimport { uncurry, disposeSafe, isArrayLike, getEnumerator, toIterator, compare, structuralHash, equals } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\r\nimport { SR_inputSequenceTooLong, SR_inputSequenceEmpty, SR_inputMustBeNonNegative, SR_notEnoughElements, SR_differentLengths, SR_keyNotFoundAlt, SR_indexOutOfBounds, SR_inputWasEmpty } from \"./Global.js\";\r\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\r\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\r\n\r\nexport class FSharpList extends Record {\r\n    constructor(head, tail) {\r\n        super();\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        return (\"[\" + join(\"; \", xs)) + \"]\";\r\n    }\r\n    Equals(other) {\r\n        const xs = this;\r\n        if (xs === other) {\r\n            return true;\r\n        }\r\n        else {\r\n            const loop = (xs_1_mut, ys_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                    const matchValue = [xs_1.tail, ys_1.tail];\r\n                    if (matchValue[0] != null) {\r\n                        if (matchValue[1] != null) {\r\n                            const xt = matchValue[0];\r\n                            const yt = matchValue[1];\r\n                            if (equals(xs_1.head, ys_1.head)) {\r\n                                xs_1_mut = xt;\r\n                                ys_1_mut = yt;\r\n                                continue loop;\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (matchValue[1] != null) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(xs, other);\r\n        }\r\n    }\r\n    GetHashCode() {\r\n        const xs = this;\r\n        const loop = (i_mut, h_mut, xs_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\r\n                const matchValue = xs_1.tail;\r\n                if (matchValue != null) {\r\n                    const t = matchValue;\r\n                    if (i > 18) {\r\n                        return h | 0;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\r\n                        xs_1_mut = t;\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return h | 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0, 0, xs) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(other) {\r\n        const xs = this;\r\n        const loop = (xs_1_mut, ys_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                const matchValue = [xs_1.tail, ys_1.tail];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const xt = matchValue[0];\r\n                        const yt = matchValue[1];\r\n                        const c = compare(xs_1.head, ys_1.head) | 0;\r\n                        if (c === 0) {\r\n                            xs_1_mut = xt;\r\n                            ys_1_mut = yt;\r\n                            continue loop;\r\n                        }\r\n                        else {\r\n                            return c | 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                else if (matchValue[1] != null) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(xs, other) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const xs = this;\r\n        return ListEnumerator$1_$ctor_3002E699(xs);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const xs = this;\r\n        return getEnumerator(xs);\r\n    }\r\n}\r\n\r\nexport function FSharpList$reflection(gen0) {\r\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList$reflection(gen0))]]);\r\n}\r\n\r\nexport class ListEnumerator$1 {\r\n    constructor(xs) {\r\n        this.xs = xs;\r\n        this.it = this.xs;\r\n        this.current = null;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        const matchValue = __.it.tail;\r\n        if (matchValue != null) {\r\n            const t = matchValue;\r\n            __.current = __.it.head;\r\n            __.it = t;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        const __ = this;\r\n        __.it = __.xs;\r\n        __.current = null;\r\n    }\r\n    Dispose() {\r\n    }\r\n}\r\n\r\nexport function ListEnumerator$1$reflection(gen0) {\r\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\r\n}\r\n\r\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\r\n    return new ListEnumerator$1(xs);\r\n}\r\n\r\nexport function FSharpList_get_Empty() {\r\n    return new FSharpList(null, void 0);\r\n}\r\n\r\nexport function FSharpList_Cons_305B8EAC(x, xs) {\r\n    return new FSharpList(x, xs);\r\n}\r\n\r\nexport function FSharpList__get_IsEmpty(xs) {\r\n    return xs.tail == null;\r\n}\r\n\r\nexport function FSharpList__get_Length(xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = matchValue;\r\n                continue loop;\r\n            }\r\n            else {\r\n                return i | 0;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs) | 0;\r\n}\r\n\r\nexport function FSharpList__get_Head(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return xs.head;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Tail(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                if (i === index) {\r\n                    return xs_1.head;\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    xs_1_mut = matchValue;\r\n                    continue loop;\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpList_get_Empty();\r\n}\r\n\r\nexport function cons(x, xs) {\r\n    return FSharpList_Cons_305B8EAC(x, xs);\r\n}\r\n\r\nexport function singleton(x) {\r\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    return FSharpList__get_IsEmpty(xs);\r\n}\r\n\r\nexport function length(xs) {\r\n    return FSharpList__get_Length(xs);\r\n}\r\n\r\nexport function head(xs) {\r\n    return FSharpList__get_Head(xs);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n}\r\n\r\nexport function tail(xs) {\r\n    return FSharpList__get_Tail(xs);\r\n}\r\n\r\nexport function tryLast(xs_mut) {\r\n    tryLast:\r\n    while (true) {\r\n        const xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return void 0;\r\n        }\r\n        else {\r\n            const t = FSharpList__get_Tail(xs);\r\n            if (FSharpList__get_IsEmpty(t)) {\r\n                return some(FSharpList__get_Head(xs));\r\n            }\r\n            else {\r\n                xs_mut = t;\r\n                continue tryLast;\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const loop = (xs_1_mut, ys_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            const matchValue = [FSharpList__get_IsEmpty(xs_1), FSharpList__get_IsEmpty(ys_1)];\r\n            if (matchValue[0]) {\r\n                if (matchValue[1]) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else if (matchValue[1]) {\r\n                return 1;\r\n            }\r\n            else {\r\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\r\n                if (c === 0) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return c | 0;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs, ys) | 0;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    const len = FSharpList__get_Length(xs) | 0;\r\n    const res = fill(new Array(len), 0, len, null);\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (!FSharpList__get_IsEmpty(xs_1)) {\r\n                res[i] = FSharpList__get_Head(xs_1);\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(0, xs);\r\n    return res;\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_1)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function foldIndexed(folder, state, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, state, xs);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    let ys_1 = ys;\r\n    while ((!FSharpList__get_IsEmpty(xs_1)) && (!FSharpList__get_IsEmpty(ys_1))) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n        ys_1 = FSharpList__get_Tail(ys_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function unfold(gen, state) {\r\n    const loop = (acc_mut, node_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, node = node_mut;\r\n            const matchValue = gen(acc);\r\n            if (matchValue != null) {\r\n                acc_mut = matchValue[1];\r\n                node_mut = ((t = (new FSharpList(matchValue[0], void 0)), (node.tail = t, t)));\r\n                continue loop;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(state, root);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function toSeq(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function ofArrayWithTail(xs, tail_1) {\r\n    let res = tail_1;\r\n    for (let i = xs.length - 1; i >= 0; i--) {\r\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function ofArray(xs) {\r\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    let xs_3, t;\r\n    if (isArrayLike(xs)) {\r\n        return ofArray(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        const root = FSharpList_get_Empty();\r\n        let node = root;\r\n        const enumerator = getEnumerator(xs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                node = ((xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t))));\r\n            }\r\n        }\r\n        finally {\r\n            disposeSafe(enumerator);\r\n        }\r\n        const xs_5 = node;\r\n        const t_2 = FSharpList_get_Empty();\r\n        xs_5.tail = t_2;\r\n        return FSharpList__get_Tail(root);\r\n    }\r\n}\r\n\r\nexport function concat(lists) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    const action = (xs) => {\r\n        node = fold((acc, x) => {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }, node, xs);\r\n    };\r\n    if (isArrayLike(lists)) {\r\n        lists.forEach(action);\r\n    }\r\n    else if (lists instanceof FSharpList) {\r\n        iterate(action, lists);\r\n    }\r\n    else {\r\n        const enumerator = getEnumerator(lists);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n        }\r\n        finally {\r\n            disposeSafe(enumerator);\r\n        }\r\n    }\r\n    const xs_6 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_6.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    let t, xs_4, t_2;\r\n    const root = FSharpList_get_Empty();\r\n    let node = (t = (new FSharpList(state, void 0)), (root.tail = t, t));\r\n    let acc = state;\r\n    let xs_3 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_3)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_3));\r\n        node = ((xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2))));\r\n        xs_3 = FSharpList__get_Tail(xs_3);\r\n    }\r\n    const xs_6 = node;\r\n    const t_4 = FSharpList_get_Empty();\r\n    xs_6.tail = t_4;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return ofArray(scanBack_1(folder, toArray(xs), state));\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    let xs_1, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    let ys = xs;\r\n    while (!FSharpList__get_IsEmpty(ys)) {\r\n        let zs = mapping(FSharpList__get_Head(ys));\r\n        while (!FSharpList__get_IsEmpty(zs)) {\r\n            node = ((xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t))));\r\n            zs = FSharpList__get_Tail(zs);\r\n        }\r\n        ys = FSharpList__get_Tail(ys);\r\n    }\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = foldIndexed((i, acc, x) => {\r\n        let t;\r\n        return (t = (new FSharpList(mapping(i, x), void 0)), (acc.tail = t, t));\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        let t;\r\n        return (t = (new FSharpList(mapping(x), void 0)), (acc.tail = t, t));\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold2((acc, x, y) => {\r\n        let t;\r\n        return (t = (new FSharpList(mapping(x, y), void 0)), (acc.tail = t, t));\r\n    }, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = ((t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(0, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\r\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                zs_1_mut = FSharpList__get_Tail(zs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(root, xs, ys, zs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const patternInput_1 = fold((tupledArg, x) => {\r\n        let t;\r\n        const patternInput = mapping(tupledArg[1], x);\r\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\r\n    }, [root, state], xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_2;\r\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\r\n}\r\n\r\nexport function tryPick(f, xs) {\r\n    const loop = (xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = f(FSharpList__get_Head(xs_1));\r\n                if (matchValue == null) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs);\r\n}\r\n\r\nexport function pick(f, xs) {\r\n    const matchValue = tryPick(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(f, xs) {\r\n    return tryPick((x) => (f(x) ? some(x) : (void 0)), xs);\r\n}\r\n\r\nexport function find(f, xs) {\r\n    const matchValue = tryFind(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(f, xs) {\r\n    return tryFindBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findBack(f, xs) {\r\n    const matchValue = tryFindBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(f, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (f(FSharpList__get_Head(xs_1))) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function findIndex(f, xs) {\r\n    const matchValue = tryFindIndex(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(f, xs) {\r\n    return tryFindIndexBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(f, xs) {\r\n    const matchValue = tryFindIndexBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryItem(n, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (i === n) {\r\n                return some(FSharpList__get_Head(xs_1));\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function item(n, xs) {\r\n    return FSharpList__get_Item_Z524259A4(xs, n);\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        if (f(x)) {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function partition(f, xs) {\r\n    const patternInput = [FSharpList_get_Empty(), FSharpList_get_Empty()];\r\n    const root2 = patternInput[1];\r\n    const root1 = patternInput[0];\r\n    const patternInput_1 = fold(uncurry(2, (tupledArg) => {\r\n        const lacc = tupledArg[0];\r\n        const racc = tupledArg[1];\r\n        return (x) => {\r\n            let t, t_2;\r\n            return f(x) ? [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc] : [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\r\n        };\r\n    }), [root1, root2], xs);\r\n    const t_4 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_4;\r\n    const t_5 = FSharpList_get_Empty();\r\n    patternInput_1[1].tail = t_5;\r\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\r\n}\r\n\r\nexport function choose(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const matchValue = f(x);\r\n        if (matchValue == null) {\r\n            return acc;\r\n        }\r\n        else {\r\n            const t = new FSharpList(value_1(matchValue), void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function contains(value, xs, eq) {\r\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\r\n}\r\n\r\nexport function initialize(n, f) {\r\n    let xs, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    for (let i = 0; i <= (n - 1); i++) {\r\n        node = ((xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t))));\r\n    }\r\n    const xs_2 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_2.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reduce(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return fold(f, head(xs), tail(xs));\r\n    }\r\n}\r\n\r\nexport function reduceBack(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return foldBack(f, tail(xs), head(xs));\r\n    }\r\n}\r\n\r\nexport function forAll(f, xs) {\r\n    return fold((acc, x) => (acc && f(x)), true, xs);\r\n}\r\n\r\nexport function forAll2(f, xs, ys) {\r\n    return fold2((acc, x, y) => (acc && f(x, y)), true, xs, ys);\r\n}\r\n\r\nexport function exists(f, xs) {\r\n    return tryFindIndex(f, xs) != null;\r\n}\r\n\r\nexport function exists2(f_mut, xs_mut, ys_mut) {\r\n    exists2:\r\n    while (true) {\r\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\r\n        const matchValue = [FSharpList__get_IsEmpty(xs), FSharpList__get_IsEmpty(ys)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0]) {\r\n            if (matchValue[1]) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 2;\r\n            }\r\n        }\r\n        else if (matchValue[1]) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return false;\r\n            }\r\n            case 1: {\r\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    xs_mut = FSharpList__get_Tail(xs);\r\n                    ys_mut = FSharpList__get_Tail(ys);\r\n                    continue exists2;\r\n                }\r\n            }\r\n            case 2: {\r\n                throw (new Error((SR_differentLengths + \"\\\\nParameter name: \") + \"list2\"));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function unzip(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function unzip3(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const arr = toArray(xs);\r\n    arr.sort(comparer);\r\n    return ofArray(arr);\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    return averager.DivideByInt(total, count);\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    return averager.DivideByInt(total, count);\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return ofArray(permute_1(f, toArray(xs)));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs))));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    iterate((x) => {\r\n        iterate((y) => {\r\n            let xs_1, t;\r\n            node = ((xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t))));\r\n        }, ys);\r\n    }, xs);\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function skip(count_mut, xs_mut) {\r\n    skip:\r\n    while (true) {\r\n        const count = count_mut, xs = xs_mut;\r\n        if (count <= 0) {\r\n            return xs;\r\n        }\r\n        else if (FSharpList__get_IsEmpty(xs)) {\r\n            throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n        }\r\n        else {\r\n            count_mut = (count - 1);\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skip;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate_mut, xs_mut) {\r\n    skipWhile:\r\n    while (true) {\r\n        const predicate = predicate_mut, xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return xs;\r\n        }\r\n        else if (!predicate(FSharpList__get_Head(xs))) {\r\n            return xs;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skipWhile;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function take(count, xs) {\r\n    if (count < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\"));\r\n    }\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    const loop = (acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function getSlice(startIndex, endIndex, xs) {\r\n    const len = length(xs) | 0;\r\n    const startIndex_1 = defaultArg(startIndex, 0) | 0;\r\n    const endIndex_1 = defaultArg(endIndex, len - 1) | 0;\r\n    if (startIndex_1 < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"startIndex\"));\r\n    }\r\n    else if (endIndex_1 >= len) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"endIndex\"));\r\n    }\r\n    else if (endIndex_1 < startIndex_1) {\r\n        return FSharpList_get_Empty();\r\n    }\r\n    else {\r\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\r\n    }\r\n}\r\n\r\nexport function splitAt(index, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    if (index > FSharpList__get_Length(xs)) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [take(index, xs), skip(index, xs)];\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return FSharpList__get_Head(xs);\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    if ((!FSharpList__get_IsEmpty(xs)) && FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return ofArray(pairwise_1(toArray(xs)));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs))));\r\n}\r\n\r\nexport function transpose(lists) {\r\n    return ofArray(map_1(ofArray, transpose_1(map_1(toArray, Array.from(lists)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, FSharpList_Cons_305B8EAC(y, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? FSharpList_Cons_305B8EAC(y, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys_1 = ofSeq(ys);\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, append(ys_1, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? append(ys_1, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    const ys = mapIndexed((i, x) => {\r\n        if (i === index) {\r\n            isDone = true;\r\n            return y;\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { Union } from \"./Types.js\";\r\nimport { union_type } from \"./Reflection.js\";\r\nimport { some } from \"./Option.js\";\r\n\r\nexport class FSharpResult$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Ok\", \"Error\"];\r\n    }\r\n}\r\n\r\nexport function FSharpResult$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\r\n}\r\n\r\nexport function Result_Map(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, mapping(result.fields[0]));\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport function Result_MapError(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, mapping(result.fields[0]));\r\n    }\r\n}\r\n\r\nexport function Result_Bind(binder, result) {\r\n    if (result.tag === 0) {\r\n        return binder(result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport class FSharpChoice$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of2\", \"Choice2Of2\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\r\n}\r\n\r\nexport class FSharpChoice$3 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\r\n}\r\n\r\nexport class FSharpChoice$4 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\r\n}\r\n\r\nexport class FSharpChoice$5 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\r\n}\r\n\r\nexport class FSharpChoice$6 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\r\n}\r\n\r\nexport class FSharpChoice$7 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\r\n}\r\n\r\nexport function Choice_makeChoice1Of2(x) {\r\n    return new FSharpChoice$2(0, x);\r\n}\r\n\r\nexport function Choice_makeChoice2Of2(x) {\r\n    return new FSharpChoice$2(1, x);\r\n}\r\n\r\nexport function Choice_tryValueIfChoice1Of2(x) {\r\n    if (x.tag === 0) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function Choice_tryValueIfChoice2Of2(x) {\r\n    if (x.tag === 1) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { TimeoutException } from \"./SystemException.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// see AsyncBuilder.Delay\nfunction delay(generator) {\n    return protectedCont((ctx) => generator()(ctx));\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nfunction throwAfter(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onError(new TimeoutException());\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function startChild(computation, ms) {\n    if (ms) {\n        const computationWithTimeout = protectedBind(parallel2(computation, throwAfter(ms)), xs => protectedReturn(xs[0]));\n        return startChild(computationWithTimeout);\n    }\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return delay(() => awaitPromise(Promise.all(Array.from(computations, (w) => startAsPromise(w)))));\n}\nfunction parallel2(a, b) {\n    return delay(() => awaitPromise(Promise.all([startAsPromise(a), startAsPromise(b)])));\n}\nexport function sequential(computations) {\n    function _sequential(computations) {\n        let pr = Promise.resolve([]);\n        for (const c of computations) {\n            pr = pr.then(results => startAsPromise(c).then(r => results.concat([r])));\n        }\n        return pr;\n    }\n    return delay(() => awaitPromise(_sequential(computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function runSynchronously() {\n    throw new Error(\"Asynchronous code cannot be run synchronously in JS\");\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","import { Observer } from \"./Observable.js\";\nimport { some, value } from \"./Option.js\";\nimport { Choice_tryValueIfChoice1Of2, Choice_tryValueIfChoice2Of2 } from \"./Choice.js\";\nexport class Event {\n    constructor() {\n        this.delegates = [];\n    }\n    Add(f) {\n        this._addHandler(f);\n    }\n    get Publish() {\n        return this;\n    }\n    Trigger(senderOrValue, valueOrUndefined) {\n        let sender;\n        let value;\n        if (valueOrUndefined === undefined) {\n            sender = null;\n            value = senderOrValue;\n        }\n        else {\n            sender = senderOrValue;\n            value = valueOrUndefined;\n        }\n        this.delegates.forEach((f) => f.length === 1 ? f(value) : f(sender, value));\n    }\n    // IDelegateEvent<T> methods\n    AddHandler(handler) {\n        this._addHandler(handler);\n    }\n    RemoveHandler(handler) {\n        this._removeHandler(handler);\n    }\n    // IObservable<T> methods\n    Subscribe(arg) {\n        const callback = typeof arg === \"function\"\n            ? arg\n            : arg.OnNext;\n        this._addHandler(callback);\n        return { Dispose: () => { this._removeHandler(callback); } };\n    }\n    _addHandler(f) {\n        this.delegates.push(f);\n    }\n    _removeHandler(f) {\n        const index = this.delegates.indexOf(f);\n        if (index > -1) {\n            this.delegates.splice(index, 1);\n        }\n    }\n}\nexport function add(callback, sourceEvent) {\n    if (sourceEvent instanceof Event) {\n        sourceEvent.Add(callback);\n    }\n    else {\n        sourceEvent.Subscribe(new Observer(callback));\n    }\n}\nexport function choose(chooser, sourceEvent) {\n    const ev = new Event();\n    add((t) => {\n        const u = chooser(t);\n        if (u != null) {\n            ev.Trigger(value(u));\n        }\n    }, sourceEvent);\n    return ev;\n}\nexport function filter(predicate, sourceEvent) {\n    return choose((x) => predicate(x) ? some(x) : undefined, sourceEvent);\n}\nexport function map(mapping, sourceEvent) {\n    const ev = new Event();\n    add((t) => ev.Trigger(mapping(t)), sourceEvent);\n    return ev;\n}\nexport function merge(event1, event2) {\n    const ev = new Event();\n    const fn = (x) => ev.Trigger(x);\n    add(fn, event1);\n    add(fn, event2);\n    return ev;\n}\nexport function pairwise(sourceEvent) {\n    const ev = new Event();\n    let last;\n    let haveLast = false;\n    add((next) => {\n        if (haveLast) {\n            ev.Trigger([last, next]);\n        }\n        last = next;\n        haveLast = true;\n    }, sourceEvent);\n    return ev;\n}\nexport function partition(predicate, sourceEvent) {\n    return [filter(predicate, sourceEvent), filter((x) => !predicate(x), sourceEvent)];\n}\nexport function scan(collector, state, sourceEvent) {\n    return map((t) => state = collector(state, t), sourceEvent);\n}\nexport function split(splitter, sourceEvent) {\n    return [\n        choose((v) => Choice_tryValueIfChoice1Of2(splitter(v)), sourceEvent),\n        choose((v) => Choice_tryValueIfChoice2Of2(splitter(v)), sourceEvent),\n    ];\n}\nexport function createEvent(addHandler, removeHandler) {\n    return {\n        AddHandler(h) { addHandler(h); },\n        RemoveHandler(h) { removeHandler(h); },\n        Subscribe(r) {\n            const h = (_, args) => r.OnNext(args);\n            addHandler(h);\n            return {\n                Dispose() { removeHandler(h); }\n            };\n        }\n    };\n}\nexport default Event;\n","import { Choice_tryValueIfChoice1Of2, Choice_tryValueIfChoice2Of2 } from \"./Choice.js\";\nimport { value } from \"./Option.js\";\nexport class Observer {\n    constructor(onNext, onError, onCompleted) {\n        this.OnNext = onNext;\n        this.OnError = onError || ((_e) => { return; });\n        this.OnCompleted = onCompleted || (() => { return; });\n    }\n}\nclass Observable {\n    constructor(subscribe) {\n        this.Subscribe = subscribe;\n    }\n}\nexport function protect(f, succeed, fail) {\n    try {\n        return succeed(f());\n    }\n    catch (e) {\n        fail(e);\n    }\n}\nexport function add(callback, source) {\n    source.Subscribe(new Observer(callback));\n}\nexport function choose(chooser, source) {\n    return new Observable((observer) => source.Subscribe(new Observer((t) => protect(() => chooser(t), (u) => { if (u != null) {\n        observer.OnNext(value(u));\n    } }, observer.OnError), observer.OnError, observer.OnCompleted)));\n}\nexport function filter(predicate, source) {\n    return choose((x) => predicate(x) ? x : null, source);\n}\nexport function map(mapping, source) {\n    return new Observable((observer) => source.Subscribe(new Observer((t) => {\n        protect(() => mapping(t), observer.OnNext, observer.OnError);\n    }, observer.OnError, observer.OnCompleted)));\n}\nexport function merge(source1, source2) {\n    return new Observable((observer) => {\n        let stopped = false;\n        let completed1 = false;\n        let completed2 = false;\n        const h1 = source1.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed1 = true;\n                if (completed2) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        const h2 = source2.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed2 = true;\n                if (completed1) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        return {\n            Dispose() {\n                h1.Dispose();\n                h2.Dispose();\n            },\n        };\n    });\n}\nexport function pairwise(source) {\n    return new Observable((observer) => {\n        let last;\n        return source.Subscribe(new Observer((next) => {\n            if (last != null) {\n                observer.OnNext([last, next]);\n            }\n            last = next;\n        }, observer.OnError, observer.OnCompleted));\n    });\n}\nexport function partition(predicate, source) {\n    return [filter(predicate, source), filter((x) => !predicate(x), source)];\n}\nexport function scan(collector, state, source) {\n    return new Observable((observer) => {\n        return source.Subscribe(new Observer((t) => {\n            protect(() => collector(state, t), (u) => { state = u; observer.OnNext(u); }, observer.OnError);\n        }, observer.OnError, observer.OnCompleted));\n    });\n}\nexport function split(splitter, source) {\n    return [\n        choose((v) => Choice_tryValueIfChoice1Of2(splitter(v)), source),\n        choose((v) => Choice_tryValueIfChoice2Of2(splitter(v)), source)\n    ];\n}\nexport function subscribe(callback, source) {\n    return source.Subscribe(new Observer(callback));\n}\n","namespace Elmish\n\n(**\nLog\n---------\nBasic cross-platform logging API.\n\n*)\nmodule internal Log =\n\n#if FABLE_COMPILER\n    open Fable.Core.JS\n\n    let onError (text: string, ex: exn) = console.error (text,ex)\n    let toConsole(text: string, o: #obj) = console.log(text,o)\n\n#else\n#if NETSTANDARD2_0\n    let onError (text: string, ex: exn) = System.Diagnostics.Trace.TraceError(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#else\n    let onError (text: string, ex: exn) = System.Console.Error.WriteLine(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#endif\n#endif\n\n#if FABLE_COMPILER\nmodule internal Timer =\n    open System.Timers\n    let delay interval callback =\n        let t = new Timer(float interval, AutoReset = false)\n        t.Elapsed.Add callback\n        t.Enabled <- true\n        t.Start()\n#endif\n","import Event from \"./Event.js\";\nexport class Timer {\n    constructor(interval) {\n        this._enabled = false;\n        this._isDisposed = false;\n        this._intervalId = 0;\n        this._timeoutId = 0;\n        this.Interval = interval && interval > 0 ? interval : 100;\n        this.AutoReset = true;\n        this._elapsed = new Event();\n    }\n    Elapsed() {\n        return this._elapsed;\n    }\n    get Enabled() {\n        return this._enabled;\n    }\n    set Enabled(x) {\n        if (!this._isDisposed && this._enabled !== x) {\n            this._enabled = x;\n            if (this._enabled) {\n                if (this.AutoReset) {\n                    this._intervalId = setInterval(() => {\n                        if (!this.AutoReset) {\n                            this.Enabled = false;\n                        }\n                        this._elapsed.Trigger(new Date());\n                    }, this.Interval);\n                }\n                else {\n                    this._timeoutId = setTimeout(() => {\n                        this.Enabled = false;\n                        this._timeoutId = 0;\n                        if (this.AutoReset) {\n                            this.Enabled = true;\n                        }\n                        this._elapsed.Trigger(new Date());\n                    }, this.Interval);\n                }\n            }\n            else {\n                if (this._timeoutId) {\n                    clearTimeout(this._timeoutId);\n                    this._timeoutId = 0;\n                }\n                if (this._intervalId) {\n                    clearInterval(this._intervalId);\n                    this._intervalId = 0;\n                }\n            }\n        }\n    }\n    Dispose() {\n        this.Enabled = false;\n        this._isDisposed = true;\n    }\n    Close() {\n        this.Dispose();\n    }\n    Start() {\n        this.Enabled = true;\n    }\n    Stop() {\n        this.Enabled = false;\n    }\n}\nexport default Timer;\n","(**\nCmd\n---------\nCore abstractions for dispatching messages in Elmish.\n\n*)\n\nnamespace Elmish\n\nopen System\n\n/// Dispatch - feed new message into the processing loop\ntype Dispatch<'msg> = 'msg -> unit\n\n/// Subscription - return immediately, but may schedule dispatch of a message at any time\ntype Sub<'msg> = Dispatch<'msg> -> unit\n\n/// Cmd - container for subscriptions that may produce messages\ntype Cmd<'msg> = Sub<'msg> list\n\n/// Cmd module for creating and manipulating commands\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    /// Execute the commands using the supplied dispatcher\n    let internal exec onError (dispatch: Dispatch<'msg>) (cmd: Cmd<'msg>) =\n        cmd |> List.iter (fun call -> try call dispatch with ex -> onError ex)\n\n    /// None - no commands, also known as `[]`\n    let none : Cmd<'msg> =\n        []\n\n    /// When emitting the message, map to another type\n    let map (f: 'a -> 'msg) (cmd: Cmd<'a>) : Cmd<'msg> =\n        cmd |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    /// Aggregate multiple commands\n    let batch (cmds: #seq<Cmd<'msg>>) : Cmd<'msg> =\n        cmds |> List.concat\n\n    /// Command to call the subscriber\n    let ofSub (sub: Sub<'msg>) : Cmd<'msg> =\n        [sub]\n\n    module OfFunc =\n        /// Command to evaluate a simple function and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to evaluate a simple function and map the success to a message\n        /// discarding any possible error\n        let perform (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    ()\n            [bind]\n\n        /// Command to evaluate a simple function and map the error (in case of exception)\n        let attempt (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to issue a specific message\n        let result (msg:'msg) : Cmd<'msg> =\n            [fun dispatch -> dispatch msg]\n\n    module OfAsyncWith =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either (start: Async<unit> -> unit) \n                   (task: 'a -> Async<_>)\n                   (arg: 'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    dispatch (match r with\n                             | Choice1Of2 x -> ofSuccess x\n                             | Choice2Of2 x -> ofError x)\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block to the message\n        let result (start: Async<unit> -> unit) \n                   (task: Async<'msg>) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task\n                    dispatch r\n                }\n            [bind >> start]\n\n    module OfAsync =\n#if FABLE_COMPILER\n        let start x = Timer.delay 0 (fun _ -> Async.StartImmediate x)\n#else\n        let inline start x = Async.Start x\n#endif    \n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either start task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform start task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt start task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result start task\n\n    module OfAsyncImmediate =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either Async.StartImmediate task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform Async.StartImmediate task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt Async.StartImmediate task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result Async.StartImmediate task\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>)\n                    (arg:'a)\n                    (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch =\n                task.``then`` dispatch\n                |> ignore\n            [bind]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise (task: 'a -> Fable.Core.JS.Promise<_>)\n                         (arg:'a)\n                         (ofSuccess: _ -> 'msg)\n                         (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError                     \n#else\n    open System.Threading.Tasks\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>)\n                          (arg:'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>)\n                      (arg:'a)\n                      (ofSuccess: _ -> 'msg)\n                      (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n\n    // Synonymous with `OfFunc.result`, may be removed in the future\n    let inline ofMsg (msg:'msg) : Cmd<'msg> =\n        OfFunc.result msg\n\n    [<Obsolete(\"Use `Cmd.OfAsync.either` instead\")>]\n    let inline ofAsync (task: 'a -> Async<_>)\n                       (arg: 'a)\n                       (ofSuccess: _ -> 'msg)\n                       (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfAsync.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.either` instead\")>]\n    let inline ofFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.perform` instead\")>]\n    let inline performFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.perform task arg ofSuccess\n\n    [<Obsolete(\"Use `Cmd.OfFunc.attempt` instead\")>]\n    let attemptFunc (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.attempt task arg ofError\n\n","import { clear, equals, isArrayLike, isDisposable, toIterator, disposeSafe, getEnumerator } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { Operators_Lock, Operators_NullArg } from \"./FSharp.Core.js\";\r\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, windowed as windowed_1, splitInto as splitInto_1, map as map_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\r\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\r\n\r\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\r\n\r\nexport function Enumerator_noReset() {\r\n    throw (new Error(SR_resetNotSupported));\r\n}\r\n\r\nexport function Enumerator_notStarted() {\r\n    throw (new Error(SR_enumerationNotStarted));\r\n}\r\n\r\nexport function Enumerator_alreadyFinished() {\r\n    throw (new Error(SR_enumerationAlreadyFinished));\r\n}\r\n\r\nexport class Enumerator_Seq {\r\n    constructor(f) {\r\n        this.f = f;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        const maxCount = 4;\r\n        let i = 0;\r\n        let str = \"seq [\";\r\n        const e = getEnumerator(xs);\r\n        try {\r\n            while ((i < maxCount) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                if (i > 0) {\r\n                    str = (str + \"; \");\r\n                }\r\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                i = ((i + 1) | 0);\r\n            }\r\n            if (i === maxCount) {\r\n                str = (str + \"; ...\");\r\n            }\r\n            return str + \"]\";\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n    GetEnumerator() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n}\r\n\r\nexport function Enumerator_Seq$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\r\n}\r\n\r\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\r\n    return new Enumerator_Seq(f);\r\n}\r\n\r\nexport class Enumerator_FromFunctions$1 {\r\n    constructor(current, next, dispose) {\r\n        this.current = current;\r\n        this.next = next;\r\n        this.dispose = dispose;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        return __.next();\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        Enumerator_noReset();\r\n    }\r\n    Dispose() {\r\n        const __ = this;\r\n        __.dispose();\r\n    }\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\r\n    return new Enumerator_FromFunctions$1(current, next, dispose);\r\n}\r\n\r\nexport function Enumerator_cast(e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.IEnumerator.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        if (isDisposable(e)) {\r\n            disposeSafe(e);\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_concat(sources) {\r\n    let outerOpt = void 0;\r\n    let innerOpt = void 0;\r\n    let started = false;\r\n    let finished = false;\r\n    let curr = void 0;\r\n    const finish = () => {\r\n        finished = true;\r\n        if (innerOpt != null) {\r\n            const inner = innerOpt;\r\n            try {\r\n                disposeSafe(inner);\r\n            }\r\n            finally {\r\n                innerOpt = (void 0);\r\n            }\r\n        }\r\n        if (outerOpt != null) {\r\n            const outer = outerOpt;\r\n            try {\r\n                disposeSafe(outer);\r\n            }\r\n            finally {\r\n                outerOpt = (void 0);\r\n            }\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        else if (finished) {\r\n            Enumerator_alreadyFinished();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        let copyOfStruct;\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (finished) {\r\n            return false;\r\n        }\r\n        else {\r\n            let res = void 0;\r\n            while (res == null) {\r\n                const matchValue = [outerOpt, innerOpt];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const inner_1 = matchValue[1];\r\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                            res = true;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                disposeSafe(inner_1);\r\n                            }\r\n                            finally {\r\n                                innerOpt = (void 0);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const outer_1 = matchValue[0];\r\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                            innerOpt = ((copyOfStruct = ie, getEnumerator(copyOfStruct)));\r\n                        }\r\n                        else {\r\n                            finish();\r\n                            res = false;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    outerOpt = getEnumerator(sources);\r\n                }\r\n            }\r\n            return value_1(res);\r\n        }\r\n    }, () => {\r\n        if (!finished) {\r\n            finish();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_enumerateThenFinally(f, e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        try {\r\n            disposeSafe(e);\r\n        }\r\n        finally {\r\n            f();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\r\n    let started = false;\r\n    let curr = void 0;\r\n    let state = some(openf());\r\n    const dispose = () => {\r\n        if (state != null) {\r\n            const x_1 = value_1(state);\r\n            try {\r\n                closef(x_1);\r\n            }\r\n            finally {\r\n                state = (void 0);\r\n            }\r\n        }\r\n    };\r\n    const finish = () => {\r\n        try {\r\n            dispose();\r\n        }\r\n        finally {\r\n            curr = (void 0);\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (state != null) {\r\n            const s = value_1(state);\r\n            let matchValue_1;\r\n            try {\r\n                matchValue_1 = compute(s);\r\n            }\r\n            catch (matchValue) {\r\n                finish();\r\n                throw matchValue;\r\n            }\r\n            if (matchValue_1 != null) {\r\n                curr = matchValue_1;\r\n                return true;\r\n            }\r\n            else {\r\n                finish();\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, dispose);\r\n}\r\n\r\nexport function Enumerator_unfold(f, state) {\r\n    let curr = void 0;\r\n    let acc = state;\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (curr != null) {\r\n            const x = curr[0];\r\n            const st = curr[1];\r\n            return x;\r\n        }\r\n        else {\r\n            return Enumerator_notStarted();\r\n        }\r\n    }, () => {\r\n        curr = f(acc);\r\n        if (curr != null) {\r\n            const x_1 = curr[0];\r\n            const st_1 = curr[1];\r\n            acc = st_1;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, () => {\r\n    });\r\n}\r\n\r\nexport function indexNotFound() {\r\n    throw (new Error(SR_keyNotFoundAlt));\r\n}\r\n\r\nexport function checkNonNull(argName, arg) {\r\n    if (arg == null) {\r\n        Operators_NullArg(argName);\r\n    }\r\n}\r\n\r\nexport function mkSeq(f) {\r\n    return Enumerator_Seq_$ctor_673A07F2(f);\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return getEnumerator(xs);\r\n}\r\n\r\nexport function delay(generator) {\r\n    return mkSeq(() => getEnumerator(generator()));\r\n}\r\n\r\nexport function concat(sources) {\r\n    return mkSeq(() => Enumerator_concat(sources));\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    return mkSeq(() => Enumerator_unfold(generator, state));\r\n}\r\n\r\nexport function empty() {\r\n    return delay(() => (new Array(0)));\r\n}\r\n\r\nexport function singleton(x) {\r\n    return delay(() => singleton_1(x));\r\n}\r\n\r\nexport function ofArray(arr) {\r\n    return arr;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    if (xs instanceof FSharpList) {\r\n        return toArray_1(xs);\r\n    }\r\n    else {\r\n        return Array.from(xs);\r\n    }\r\n}\r\n\r\nexport function ofList(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function toList(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return ofArray_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        return ofSeq_1(xs);\r\n    }\r\n}\r\n\r\nexport function generate(create, compute, dispose) {\r\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\r\n}\r\n\r\nexport function generateIndexed(create, compute, dispose) {\r\n    return mkSeq(() => {\r\n        let i = -1;\r\n        return Enumerator_generateWhileSome(create, (x) => {\r\n            i = ((i + 1) | 0);\r\n            return compute(i, x);\r\n        }, dispose);\r\n    });\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return concat([xs, ys]);\r\n}\r\n\r\nexport function cast(xs) {\r\n    return mkSeq(() => {\r\n        checkNonNull(\"source\", xs);\r\n        return Enumerator_cast(getEnumerator(xs));\r\n    });\r\n}\r\n\r\nexport function choose(chooser, xs) {\r\n    return generate(() => ofSeq(xs), (e) => {\r\n        let curr = void 0;\r\n        while ((curr == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return curr;\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let c = 0;\r\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            while (((c === 0) && b1) && b2) {\r\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\r\n                if (c === 0) {\r\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                }\r\n            }\r\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function contains(value, xs, comparer) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function enumerateFromFunctions(create, moveNext, current) {\r\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : (void 0)), (x_1) => {\r\n        const matchValue = x_1;\r\n        if (isDisposable(matchValue)) {\r\n            disposeSafe(matchValue);\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateThenFinally(source, compensation) {\r\n    const compensation_1 = compensation;\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\r\n        }\r\n        catch (matchValue) {\r\n            compensation_1();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateUsing(resource, source) {\r\n    const compensation = () => {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            let copyOfStruct = resource;\r\n            disposeSafe(copyOfStruct);\r\n        }\r\n    };\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation, (ofSeq)(source(resource)));\r\n        }\r\n        catch (matchValue_1) {\r\n            compensation();\r\n            throw matchValue_1;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateWhile(guard, xs) {\r\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : (void 0)), 0));\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    return choose((x) => {\r\n        if (f(x)) {\r\n            return some(x);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, xs);\r\n}\r\n\r\nexport function exists(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let found = false;\r\n            while (((!found) && e1[\"System.Collections.IEnumerator.MoveNext\"]()) && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return found;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n            else {\r\n                return v;\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? (void 0) : some(v);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (predicate(c)) {\r\n                res = some(c);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function find(predicate, xs) {\r\n    const matchValue = tryFind(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(predicate, xs) {\r\n    return tryFindBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findBack(predicate, xs) {\r\n    const matchValue = tryFindBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (i_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\r\n                        return i;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return void 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0);\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function findIndex(predicate, xs) {\r\n    const matchValue = tryFindIndex(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, xs) {\r\n    return tryFindIndexBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(predicate, xs) {\r\n    const matchValue = tryFindIndexBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let acc = state;\r\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return acc;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let acc = state;\r\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return acc;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function forAll(predicate, xs) {\r\n    return !exists((x) => (!predicate(x)), xs);\r\n}\r\n\r\nexport function forAll2(predicate, xs, ys) {\r\n    return !exists2((x, y) => (!predicate(x, y)), xs, ys);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryHead_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryHead_2(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function head(xs) {\r\n    const matchValue = tryHead(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function initialize(count, f) {\r\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : (void 0)), 0);\r\n}\r\n\r\nexport function initializeInfinite(f) {\r\n    return initialize(2147483647, f);\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length === 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return isEmpty_1(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function tryItem(index, xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryItem_1(index, xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryItem_2(index, xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            const loop = (index_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const index_1 = index_1_mut;\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        return void 0;\r\n                    }\r\n                    else if (index_1 === 0) {\r\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    }\r\n                    else {\r\n                        index_1_mut = (index_1 - 1);\r\n                        continue loop;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(index);\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function item(index, xs) {\r\n    const matchValue = tryItem(index, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function tryLast(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    return acc;\r\n                }\r\n                else {\r\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                    continue loop;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function length(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length | 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return length_1(xs) | 0;\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            let count = 0;\r\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                count = ((count + 1) | 0);\r\n            }\r\n            return count | 0;\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            disposeSafe(tupledArg_1[1]);\r\n        }\r\n    });\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            disposeSafe(tupledArg_1[1]);\r\n        }\r\n    });\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        const e3 = tupledArg[2];\r\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) && e3[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            try {\r\n                disposeSafe(tupledArg_1[1]);\r\n            }\r\n            finally {\r\n                disposeSafe(tupledArg_1[2]);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function readOnly(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return map((x) => x, xs);\r\n}\r\n\r\nexport class CachedSeq$1 {\r\n    constructor(cleanup, res) {\r\n        this.cleanup = cleanup;\r\n        this.res = res;\r\n    }\r\n    Dispose() {\r\n        const _ = this;\r\n        _.cleanup();\r\n    }\r\n    GetEnumerator() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n}\r\n\r\nexport function CachedSeq$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.CachedSeq`1\", [gen0], CachedSeq$1);\r\n}\r\n\r\nexport function CachedSeq$1_$ctor_Z7A8347D4(cleanup, res) {\r\n    return new CachedSeq$1(cleanup, res);\r\n}\r\n\r\nexport function CachedSeq$1__Clear(_) {\r\n    _.cleanup();\r\n}\r\n\r\nexport function cache(source) {\r\n    checkNonNull(\"source\", source);\r\n    const prefix = [];\r\n    let enumeratorR = void 0;\r\n    return CachedSeq$1_$ctor_Z7A8347D4(() => {\r\n        Operators_Lock(prefix, () => {\r\n            clear(prefix);\r\n            let pattern_matching_result, e;\r\n            if (enumeratorR != null) {\r\n                if (value_1(enumeratorR) != null) {\r\n                    pattern_matching_result = 0;\r\n                    e = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    pattern_matching_result = 1;\r\n                }\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n            switch (pattern_matching_result) {\r\n                case 0: {\r\n                    disposeSafe(e);\r\n                    break;\r\n                }\r\n            }\r\n            enumeratorR = (void 0);\r\n        });\r\n    }, unfold((i_1) => Operators_Lock(prefix, () => {\r\n        if (i_1 < prefix.length) {\r\n            return [prefix[i_1], i_1 + 1];\r\n        }\r\n        else {\r\n            if (i_1 >= prefix.length) {\r\n                let optEnumerator_2;\r\n                if (enumeratorR != null) {\r\n                    optEnumerator_2 = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    const optEnumerator = getEnumerator(source);\r\n                    enumeratorR = some(optEnumerator);\r\n                    optEnumerator_2 = optEnumerator;\r\n                }\r\n                if (optEnumerator_2 == null) {\r\n                }\r\n                else {\r\n                    const enumerator = optEnumerator_2;\r\n                    if (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        void (prefix.push(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                    }\r\n                    else {\r\n                        disposeSafe(enumerator);\r\n                        enumeratorR = some(void 0);\r\n                    }\r\n                }\r\n            }\r\n            return (i_1 < prefix.length) ? [prefix[i_1], i_1 + 1] : (void 0);\r\n        }\r\n    }), 0));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const ysCache = cache(ys);\r\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function tryPick(chooser, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function pick(chooser, xs) {\r\n    const matchValue = tryPick(chooser, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function reduce(folder, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return acc;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else {\r\n            throw (new Error(SR_inputSequenceEmpty));\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function reduceBack(folder, xs) {\r\n    const arr = toArray(xs);\r\n    if (arr.length > 0) {\r\n        return arr.reduceRight(folder);\r\n    }\r\n    else {\r\n        throw (new Error(SR_inputSequenceEmpty));\r\n    }\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return delay(() => ofArray(reverse_1(toArray(xs))));\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    return delay(() => {\r\n        let acc = state;\r\n        return concat([singleton(state), map((x) => {\r\n            acc = folder(acc, x);\r\n            return acc;\r\n        }, xs)]);\r\n    });\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\r\n}\r\n\r\nexport function skip(count, source) {\r\n    return mkSeq(() => {\r\n        const e = ofSeq(source);\r\n        try {\r\n            for (let _ = 1; _ <= count; _++) {\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n                }\r\n            }\r\n            return Enumerator_enumerateThenFinally(() => {\r\n            }, e);\r\n        }\r\n        catch (matchValue) {\r\n            disposeSafe(e);\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function skipWhile(predicate, xs) {\r\n    return delay(() => {\r\n        let skipped = true;\r\n        return filter((x) => {\r\n            if (skipped) {\r\n                skipped = predicate(x);\r\n            }\r\n            return !skipped;\r\n        }, xs);\r\n    });\r\n}\r\n\r\nexport function tail(xs) {\r\n    return skip(1, xs);\r\n}\r\n\r\nexport function take(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < count) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() && predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) && e[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    return delay(() => concat(map(mapping, xs)));\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs)))));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs)))));\r\n}\r\n\r\nexport function transpose(xss) {\r\n    return delay(() => ofArray(map_1(ofArray, transpose_1(map_1(toArray, toArray(xss))))));\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    return delay(() => {\r\n        const arr = toArray(xs);\r\n        arr.sort(comparer);\r\n        return ofArray(arr);\r\n    });\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if (i === index) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let status = -1;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        if (i === index) {\r\n            status = 0;\r\n        }\r\n        let inserted;\r\n        if (status === 0) {\r\n            if (e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                inserted = some(e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                status = 1;\r\n                inserted = (void 0);\r\n            }\r\n        }\r\n        else {\r\n            inserted = (void 0);\r\n        }\r\n        if (inserted == null) {\r\n            if (e1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                if (status < 1) {\r\n                    throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n                }\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return some(value_1(inserted));\r\n        }\r\n    }, (tupledArg_1) => {\r\n        disposeSafe(tupledArg_1[0]);\r\n        disposeSafe(tupledArg_1[1]);\r\n    });\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < index) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n        }\r\n        else {\r\n            if (i === index) {\r\n                for (let _ = 1; _ <= count; _++) {\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"count\"));\r\n                    }\r\n                }\r\n            }\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\n","import { disposeSafe, structuralHash, equals } from \"./Util.js\";\r\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\r\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\r\n\r\nexport const LanguagePrimitives_GenericEqualityComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport const LanguagePrimitives_GenericEqualityERComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport function LanguagePrimitives_FastGenericComparer() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function Operators_Failure(message) {\r\n    return new Error(message);\r\n}\r\n\r\nexport function Operators_FailurePattern(exn) {\r\n    return exn.message;\r\n}\r\n\r\nexport function Operators_NullArg(x) {\r\n    throw (new Error(x));\r\n}\r\n\r\nexport function Operators_Using(resource, action) {\r\n    try {\r\n        return action(resource);\r\n    }\r\n    finally {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            disposeSafe(resource);\r\n        }\r\n    }\r\n}\r\n\r\nexport function Operators_Lock(_lockObj, action) {\r\n    return action();\r\n}\r\n\r\nexport function ExtraTopLevelOperators_LazyPattern(input) {\r\n    return input.Value;\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\r\n    return format.cont((s) => {\r\n        StringBuilder__Append_Z721C83C5(builder, s);\r\n        return continuation();\r\n    });\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\r\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\r\n    }, builder, format);\r\n}\r\n\r\n","import { compare } from \"./Util.js\";\r\nimport { unfold, delay } from \"./Seq.js\";\r\nimport { op_Addition, fromZero } from \"./BigInt.js\";\r\nimport { op_Addition as op_Addition_1, fromParts } from \"./Decimal.js\";\r\nimport { op_Addition as op_Addition_2, fromBits } from \"./Long.js\";\r\n\r\nexport function makeRangeStepFunction(step, stop, zero, add) {\r\n    const stepComparedWithZero = compare(step, zero) | 0;\r\n    if (stepComparedWithZero === 0) {\r\n        throw (new Error(\"The step of a range cannot be zero\"));\r\n    }\r\n    const stepGreaterThanZero = stepComparedWithZero > 0;\r\n    return (x) => {\r\n        const comparedWithLast = compare(x, stop) | 0;\r\n        return ((stepGreaterThanZero && (comparedWithLast <= 0)) ? true : ((!stepGreaterThanZero) && (comparedWithLast >= 0))) ? [x, add(x, step)] : (void 0);\r\n    };\r\n}\r\n\r\nexport function integralRangeStep(start, step, stop, zero, add) {\r\n    const stepFn = makeRangeStepFunction(step, stop, zero, add);\r\n    return delay(() => unfold(stepFn, start));\r\n}\r\n\r\nexport function rangeBigInt(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromZero(), op_Addition);\r\n}\r\n\r\nexport function rangeDecimal(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromParts(0, 0, 0, false, 0), op_Addition_1);\r\n}\r\n\r\nexport function rangeDouble(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, 0, (x, y) => (x + y));\r\n}\r\n\r\nexport function rangeInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, false), op_Addition_2);\r\n}\r\n\r\nexport function rangeUInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, true), op_Addition_2);\r\n}\r\n\r\nexport function rangeChar(start, stop) {\r\n    const intStop = stop.charCodeAt(0) | 0;\r\n    return delay(() => unfold((c) => {\r\n        if (c <= intStop) {\r\n            return [String.fromCharCode(c), c + 1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, start.charCodeAt(0)));\r\n}\r\n\r\n","namespace Elmish\nopen System\n\n[<Struct>]\ntype internal RingState<'item> =\n    | Writable of wx:'item array * ix:int\n    | ReadWritable of rw:'item array * wix:int * rix:int\n\ntype internal RingBuffer<'item>(size) =\n    let doubleSize ix (items: 'item array) =\n        seq { yield! items |> Seq.skip ix\n              yield! items |> Seq.take ix\n              for _ in 0..items.Length do\n                yield Unchecked.defaultof<'item> }\n        |> Array.ofSeq\n\n    let mutable state : 'item RingState =\n        Writable (Array.zeroCreate (max size 10), 0)\n\n    member __.Pop() =\n        match state with\n        | ReadWritable (items, wix, rix) ->\n            let rix' = (rix + 1) % items.Length\n            match rix' = wix with\n            | true -> \n                state <- Writable(items, wix)\n            | _ ->\n                state <- ReadWritable(items, wix, rix')\n            Some items.[rix]\n        | _ ->\n            None\n\n    member __.Push (item:'item) =\n        match state with\n        | Writable (items, ix) ->\n            items.[ix] <- item\n            let wix = (ix + 1) % items.Length\n            state <- ReadWritable(items, wix, ix)\n        | ReadWritable (items, wix, rix) ->\n            items.[wix] <- item\n            let wix' = (wix + 1) % items.Length\n            match wix' = rix with\n            | true -> \n                state <- ReadWritable(items |> doubleSize rix, items.Length, 0)\n            | _ -> \n                state <- ReadWritable(items, wix', rix)","namespace Elmish.React\n\nopen Fable.React\nopen Elmish\n\ntype LazyProps<'model> = {\n    model:'model\n    render:unit->ReactElement\n    equal:'model->'model->bool\n}\n\nmodule Components =\n    type LazyView<'model>(props) =\n        inherit Component<LazyProps<'model>,obj>(props)\n\n        override this.shouldComponentUpdate(nextProps, _nextState) =\n            not <| this.props.equal this.props.model nextProps.model\n\n        override this.render () =\n            this.props.render ()\n\n[<AutoOpen>]\nmodule Common =\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n\n\n","module Client.CineMol.Styles\n\n\ntype RGB = int * int * int\ntype Alpha = float\ntype DiffusionGradient = Alpha[]\n\ntype Color = { RGB: RGB; Alpha: Alpha }\n    with\n    member x.Diffuse (alpha : float) : float * float * float =\n        let R, G, B = x.RGB\n        (float R) * alpha, (float G) * alpha, (float B * alpha)\n\nlet atomColorGradient: DiffusionGradient = [| 1.0; 0.89; 0.66; 0.34; 0.0 |]\n\ntype AtomType =\n    | H  | He | Li | Be | B  | C  | N  | O  | F  | Ne | Na | Mg | Al | Si\n    | P  | S  | Cl | Ar | K  | Ca | Sc | Ti | V  | Cr | Mn | Fe | Co | Ni\n    | Cu | Zn | Ga | Ge | As | Se | Br | Kr | Rb | Sr | Y  | Zr | Nb | Mo\n    | Tc | Ru | Rh | Pd | Ag | Cd | In | Sn | Sb | Te | I  | Xe | Cs | Ba\n    | La | Ce | Pr | Nd | Pm | Sm | Eu | Gd | Tb | Dy | Ho | Er | Tm | Yb\n    | Lu | Hf | Ta | W  | Re | Os | Ir | Pt | Au | Hg | Tl | Pb | Bi | Po\n    | At | Rn | Fr | Ra | Ac | Th | Pa | U  | Np | Pu | Am | Cm | Bk | Cf\n    | Es | Fm | Md | No | Lr | Rf | Db | Sg | Bh | Hs | Mt | Ds | Rg | Cn\n    | Nh | Fl | Mc | Lv | Ts | Og | Unknown\n\ntype AtomColorStyle = | CPK\n\nlet getAtomColor (style: AtomColorStyle) (atomType: AtomType) : Color =\n    match style with\n    | CPK ->\n        match atomType with\n        | H  -> 255, 255, 255 | He -> 255, 255, 192 | Li -> 204, 128, 255\n        | Be -> 194, 255, 000 | B  -> 255, 181, 181 | C  -> 144, 144, 144\n        | N  -> 048, 080, 248 | O  -> 255, 013, 013 | F  -> 144, 224, 080\n        | Ne -> 179, 227, 245 | Na -> 171, 092, 242 | Mg -> 138, 255, 000\n        | Al -> 191, 166, 166 | Si -> 240, 200, 160 | P  -> 255, 128, 000\n        | S  -> 255, 255, 048 | Cl -> 031, 240, 031 | Ar -> 128, 209, 227\n        | K  -> 143, 064, 212 | Ca -> 061, 255, 000 | Sc -> 230, 230, 230\n        | Ti -> 191, 194, 199 | V  -> 166, 166, 171 | Cr -> 138, 153, 199\n        | Mn -> 156, 122, 199 | Fe -> 224, 102, 051 | Co -> 240, 144, 160\n        | Ni -> 080, 208, 080 | Cu -> 200, 128, 051 | Zn -> 125, 128, 176\n        | Ga -> 194, 143, 143 | Ge -> 102, 143, 143 | As -> 189, 128, 227\n        | Se -> 255, 161, 000 | Br -> 166, 041, 041 | Kr -> 092, 184, 209\n        | Rb -> 112, 046, 176 | Sr -> 000, 255, 000 | Y  -> 148, 255, 255\n        | Zr -> 148, 224, 224 | Nb -> 115, 194, 201 | Mo -> 084, 181, 181\n        | Tc -> 059, 158, 158 | Ru -> 036, 143, 143 | Rh -> 010, 125, 140\n        | Pd -> 000, 105, 133 | Ag -> 192, 192, 192 | Cd -> 255, 217, 143\n        | In -> 166, 117, 115 | Sn -> 102, 128, 128 | Sb -> 158, 099, 181\n        | Te -> 212, 122, 000 | I  -> 148, 000, 148 | Xe -> 066, 158, 176\n        | Cs -> 087, 023, 143 | Ba -> 000, 201, 000 | La -> 112, 212, 255\n        | Ce -> 255, 255, 199 | Pr -> 217, 255, 199 | Nd -> 199, 255, 199\n        | Pm -> 163, 255, 199 | Sm -> 143, 255, 199 | Eu -> 097, 255, 199\n        | Gd -> 069, 255, 199 | Tb -> 048, 255, 199 | Dy -> 031, 255, 199\n        | Ho -> 000, 255, 156 | Er -> 000, 230, 117 | Tm -> 000, 212, 082\n        | Yb -> 000, 191, 056 | Lu -> 000, 171, 036 | Hf -> 077, 194, 255\n        | Ta -> 077, 166, 255 | W  -> 033, 148, 214 | Re -> 038, 125, 171\n        | Os -> 038, 102, 150 | Ir -> 023, 084, 135 | Pt -> 208, 208, 224\n        | Au -> 255, 209, 035 | Hg -> 184, 184, 208 | Tl -> 166, 084, 077\n        | Pb -> 087, 089, 097 | Bi -> 158, 079, 181 | Po -> 171, 092, 000\n        | At -> 117, 079, 069 | Rn -> 066, 130, 150 | Fr -> 066, 000, 102\n        | Ra -> 000, 125, 000 | Ac -> 112, 171, 250 | Th -> 000, 186, 255\n        | Pa -> 000, 161, 255 | U  -> 000, 143, 255 | Np -> 000, 128, 255\n        | Pu -> 000, 107, 255 | Am -> 084, 092, 242 | Cm -> 120, 092, 227\n        | Bk -> 138, 079, 227 | Cf -> 161, 054, 212 | Es -> 179, 031, 212\n        | Fm -> 179, 031, 186 | Md -> 179, 013, 166 | No -> 189, 013, 135\n        | Lr -> 199, 000, 102 | Rf -> 204, 000, 089 | Db -> 209, 000, 079\n        | Sg -> 217, 000, 069 | Bh -> 224, 000, 056 | Hs -> 230, 000, 046\n        | Mt -> 235, 000, 038 | _  -> 000, 000, 000\n        |> (fun rgb -> { RGB = rgb; Alpha = 1.0 })\n\ntype AtomGeomStyle = | Default\ntype Radius = float\n\nlet getAtomRadius (style: AtomGeomStyle) (atomType: AtomType) : Radius =\n    match style with\n    | Default ->\n        // Atom radii in pico meters (based on quantum mechanical wave functions).\n        match atomType with\n        | H  -> 037 | Li -> 152 | Be -> 112 | B  -> 088 | C  -> 077\n        | N  -> 070 | O  -> 066 | F  -> 064 | Na -> 186 | Mg -> 160\n        | Al -> 143 | Si -> 117 | P  -> 110 | S  -> 104 | Cl -> 099\n        | K  -> 231 | Ca -> 197 | Sc -> 160 | Ti -> 146 | V  -> 131\n        | Cr -> 125 | Mn -> 129 | Fe -> 126 | Co -> 126 | Ni -> 124\n        | Cu -> 128 | Zn -> 133 | Ga -> 122 | Ge -> 122 | As -> 121\n        | Se -> 117 | Br -> 114 | Rb -> 241 | Sr -> 215 | Y  -> 180\n        | Zr -> 157 | Nb -> 143 | Mo -> 136 | Tc -> 130 | Ru -> 133\n        | Rh -> 134 | Pd -> 138 | Ag -> 144 | Cd -> 149 | In -> 162\n        | Sn -> 140 | Sb -> 141 | Te -> 137 | I  -> 133 | Cs -> 262\n        | Ba -> 217 | Hf -> 157 | Ta -> 143 | W  -> 137 | Re -> 137\n        | Os -> 134 | Ir -> 135 | Pt -> 138 | Au -> 144 | Hg -> 150\n        | Tl -> 171 | Pb -> 175 | Bi -> 146 | Po -> 140 | At -> 140\n        | _  -> 077\n        |> float\n\nlet normalizeRadius (style: AtomGeomStyle) (radius: Radius) : Radius =\n    match style with\n    // Default atom radius is normalized by dividing by hydrogen atom radius.\n    | Default -> radius / (getAtomRadius Default AtomType.C)","﻿module Client.CineMol.Types\r\n\r\nopen System\r\nopen Styles\r\n\r\ntype Zoom = { Ratio: float }\r\n    with\r\n    static member init = { Ratio = 1.0 }\r\n\r\ntype Rotation = { AxisX: float; AxisY: float; AxisZ: float }\r\n    with\r\n    static member init =\r\n        { AxisX = 0.0; AxisY = 0.0; AxisZ = 0.0 }\r\n\r\ntype Axis = | X | Y | Z\r\n    with\r\n    member x.RotationMatrix : Point3D * float -> Point3D =\r\n        match x with\r\n        | X ->\r\n            (fun (p: Point3D, rad: float) ->\r\n                { X = p.X\r\n                  Y = p.Y * Math.Cos(rad) - p.Z * Math.Sin(rad)\r\n                  Z = p.Y * Math.Sin(rad) + p.Z * Math.Cos(rad) })\r\n        | Y ->\r\n            (fun (p: Point3D, rad: float) ->\r\n                { X = p.X * Math.Cos(rad) + p.Z * Math.Sin(rad)\r\n                  Y = p.Y\r\n                  Z = p.Z * Math.Cos(rad) - p.X * Math.Sin(rad) })\r\n        | Z ->\r\n            (fun (p: Point3D, rad: float) ->\r\n                { X = p.X * Math.Cos(rad) - p.Y * Math.Sin(rad)\r\n                  Y = p.X * Math.Sin(rad) + p.Y * Math.Cos(rad)\r\n                  Z = p.Z })\r\n\r\nand Point2D = { X: float; Y: float }\r\n    with\r\n    static member (-) (p1: Point2D, p2: Point2D) : Point2D =\r\n        { X = p1.X - p2.X; Y = p1.Y - p2.Y }\r\n\r\n    static member Pow (p: Point2D) (d: float) : Point2D =\r\n        { X = p.X ** d; Y = p.Y ** d }\r\n\r\n    static member Sum (p: Point2D) : float =\r\n        p.X + p.Y\r\n\r\n    member p1.Distance (p2: Point2D) : float =\r\n        Math.Sqrt(Point2D.Sum(Point2D.Pow (p1 - p2) 2.0))\r\n\r\n    member p1.Midpoint (p2: Point2D) : Point2D =\r\n        { X = (p1.X + p2.X) / 2.0\r\n          Y = (p1.Y + p2.Y) / 2.0 }\r\n\r\n    member p1.FindVector (p2: Point2D) : Vector2D =\r\n        { X = p2.X - p1.X; Y = p2.Y - p1.Y }\r\n\r\nand Vector2D = { X: float; Y: float }\r\n    with\r\n    member u.SumOfSquares : float =\r\n        u.X ** 2.0 + u.Y ** 2.0\r\n\r\n    member u.Magnitude : float =\r\n        Math.Sqrt(u.SumOfSquares)\r\n\r\n    static member (*) (k, v: Vector2D) =\r\n        { X = k * v.X; Y = k * v.Y }\r\n\r\n    static member (+) (v1: Vector2D, v2: Vector2D) =\r\n        { X = v1.X + v2.X; Y = v1.Y + v2.Y }\r\n\r\n    member u.Norm : Vector2D =\r\n        let mag = u.Magnitude\r\n        let div = if mag = 0.0 then infinity else 1.0 / mag\r\n        div * u\r\n\r\n    member u.Dot (v: Vector2D) : float = u.X * v.X + u.Y * v.Y\r\n\r\nand Point3D = { X: float; Y: float; Z: float }\r\n    with\r\n    static member (-) (p1: Point3D, p2: Point3D) : Point3D =\r\n        { X = p1.X - p2.X; Y = p1.Y - p2.Y; Z = p1.Z - p2.Z }\r\n\r\n    static member Pow (p: Point3D) (d: float) : Point3D =\r\n        { X = p.X ** d; Y = p.Y ** d; Z = p.Z ** d }\r\n\r\n    static member Sum (p: Point3D) : float =\r\n        p.X + p.Y + p.Z\r\n\r\n    member p1.Distance (p2: Point3D) : float =\r\n        Math.Sqrt(Point3D.Sum(Point3D.Pow (p1 - p2) 2.0))\r\n\r\n    member p1.Centroid (p2: Point3D) : Point3D =\r\n        { X = (p1.X + p2.X) / 2.0\r\n          Y = (p1.Y + p2.X) / 2.0\r\n          Z = (p1.Z + p2.Z) / 2.0 }\r\n\r\n    member p.Rotate (axis: Axis) (rad: float) : Point3D =\r\n        axis.RotationMatrix(p, rad)\r\n\r\n    member p1.FindVector (p2: Point3D) : Vector3D =\r\n        { X = p2.X - p1.X; Y = p2.Y - p1.Y; Z = p2.Z - p1.Z }\r\n\r\nand Vector3D = { X: float; Y: float; Z: float }\r\n    with\r\n    member u.SumOfSquares : float =\r\n        u.X ** 2.0 + u.Y ** 2.0 + u.Z ** 2.0\r\n\r\n    member u.Magnitude : float =\r\n        Math.Sqrt(u.SumOfSquares)\r\n\r\n    static member (*) (k, v: Vector3D) =\r\n        { X = k * v.X; Y = k * v.Y; Z = k * v.Z }\r\n\r\n    static member (+) (v1: Vector3D, v2: Vector3D) =\r\n        { X = v1.X + v2.X; Y = v1.Y + v2.Y; Z = v1.Z + v2.Z }\r\n\r\n    member u.Norm : Vector3D =\r\n        let mag = u.Magnitude\r\n        let div = if mag = 0.0 then infinity else 1.0 / mag\r\n        div * u\r\n\r\n    member u.Dot (v: Vector3D) : float = u.X * v.X + u.Y * v.Y + u.Z * v.Z\r\n\r\n    member u.Cross (v: Vector3D) : Vector3D =\r\n        { X = u.Y * v.Z - u.Z * v.Y\r\n          Y = u.Z * v.X - u.X * v.Z\r\n          Z = u.X * v.Y - u.Y * v.X }\r\n\r\n    member x.ProjectVector (v: Vector3D) : float = (v.Dot x) / v.Magnitude\r\n\r\ntype Index = int\r\n\r\ntype SphereSphereIntersection =\r\n    | Eclipsed\r\n    | NoIntersection\r\n    | IntersectionPoint of Point3D\r\n    | IntersectionCircle of Point3D * Radius * Vector3D\r\n\r\ntype Clipping = { Line: Line }\r\nand Line = Point2D * Point2D\r\n\r\ntype AtomInfo =\r\n    { Index: Index\r\n      AtomType: AtomType\r\n      Center: Point3D\r\n      Radius: Radius }\r\n    with\r\n    member x.Rotate (axis: Axis) (rad: float) : AtomInfo =\r\n        { x with Center = x.Center.Rotate axis rad }\r\n\r\n    member this.Intersect (other: AtomInfo) : SphereSphereIntersection =\r\n        let dist = this.Center.Distance other.Center\r\n\r\n        match dist with\r\n        | d when d >= (this.Radius + other.Radius) || (d = 0.0 && this.Radius = other.Radius)\r\n            -> NoIntersection\r\n\r\n        | d when (d + this.Radius) < other.Radius\r\n            -> Eclipsed\r\n\r\n        | _ ->\r\n            // Intersection plane\r\n            let A = 2.0 * (other.Center.X - this.Center.X)\r\n            let B = 2.0 * (other.Center.Y - this.Center.Y)\r\n            let C = 2.0 * (other.Center.Z - this.Center.Z)\r\n            let D = this.Center.X ** 2.0 - other.Center.X ** 2.0 + this.Center.Y ** 2.0 - other.Center.Y ** 2.0 +\r\n                    this.Center.Z ** 2.0 - other.Center.Z ** 2.0 - this.Radius ** 2.0 + other.Radius ** 2.0\r\n\r\n            // Intersection center\r\n            let t = (this.Center.X * A + this.Center.Y * B + this.Center.Z * C + D) /\r\n                    (A * (this.Center.X - other.Center.X) + B * (this.Center.Y - other.Center.Y) + C * (this.Center.Z - other.Center.Z))\r\n            let x = this.Center.X + t * (other.Center.X - this.Center.X)\r\n            let y = this.Center.Y + t * (other.Center.Y - this.Center.Y)\r\n            let z = this.Center.Z + t * (other.Center.Z - this.Center.Z)\r\n            let intersectionCenter: Point3D = { X = x; Y = y; Z = z }\r\n\r\n            // Intersection\r\n            let x = (this.Radius ** 2.0 + dist ** 2.0 - other.Radius ** 2.0) / (2.0 * this.Radius * dist)\r\n            if x < 1.0 then\r\n                let alpha = Math.Acos(x)\r\n                let R = this.Radius * Math.Sin alpha\r\n                match R with\r\n                | 0.0 -> IntersectionPoint intersectionCenter\r\n                | _ ->\r\n                    let v = this.Center.FindVector other.Center\r\n                    IntersectionCircle (intersectionCenter, R, v)\r\n            else\r\n                NoIntersection\r\n\r\ntype ProjectedAtomInfo =\r\n    { Index: Index\r\n      AtomType: AtomType\r\n      Center: Point2D\r\n      Radius: Radius\r\n      Clipping: Clipping list }\r\n\r\n\r\ntype BondInfo =\r\n    { Index: Index\r\n      Start: Index\r\n      End: Index\r\n      BondType: BondType\r\n      Scaling: float }\r\nand BondType = | Single | Double | Triple | Aromatic | Unknown\r\n\r\nlet createAtom (index: int) (atomType: AtomType) (c: Point3D) (r: Radius) : AtomInfo =\r\n    { Index = index; AtomType = atomType; Center = c; Radius = r }\r\n\r\ntype Molecule = { Atoms: AtomInfo[]; Bonds: BondInfo[] }\r\ntype ProjectedMolecule = { Atoms: ProjectedAtomInfo[]; Bonds: BondInfo[] }\r\n\r\ntype ViewBox = float * float * float * float\r\n\r\ntype Depiction = | Filled | BallAndStick | Wire\r\n\r\nlet origin: Point3D = { X = 0.0; Y = 0.0; Z = 0.0 }\r\n\r\nlet physicalProjection\r\n    cameraPerpendicular\r\n    cameraHorizon\r\n    cameraForward\r\n    (pov: Point3D)\r\n    (p: Point3D) : Point3D =\r\n    let pointVector: Vector3D = pov.FindVector p\r\n    { X = pointVector.ProjectVector cameraPerpendicular\r\n      Y = pointVector.ProjectVector cameraHorizon\r\n      Z = pointVector.ProjectVector cameraForward }\r\n\r\nlet perspectiveProjection (focalLength: float) (p: Point3D) : Point3D =\r\n    let scaleFactor = focalLength / p.Z\r\n    { X = p.X * scaleFactor\r\n      Y = p.Y * scaleFactor\r\n      Z = p.Z * scaleFactor }\r\n\r\nlet project\r\n    cameraPerpendicular\r\n    cameraHorizon\r\n    cameraForward\r\n    (pov: Point3D)\r\n    focalLength\r\n    (p: Point3D)\r\n    : Point3D =\r\n    p\r\n    |> physicalProjection cameraPerpendicular cameraHorizon cameraForward pov\r\n    |> perspectiveProjection focalLength\r\n","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\nexport function divRem(x, y, out) {\n    const div = ~~(x / y);\n    const rem = x % y;\n    if (out != null) {\n        out.contents = rem;\n        return div;\n    }\n    else {\n        return [div, rem];\n    }\n}\n","module Client.CineMol.Parsing\n\nopen System\nopen System.Text.RegularExpressions\n\nopen Styles\nopen Types\n\nexception ParserError of string\n\nlet s = @\"\\s{1,}\"\nlet d = @\"[-+]?[0-9]*\\.?[0-9]+\"\nlet d_cap = $\"({d})\"\nlet w_cap = $@\"(\\w+)\"\n\nlet atomLine : string =\n    [ \"$\" ]\n    |> (@) [ for _ in [ 0 .. 11 ] do yield s + d ]\n    |> (@) [ s + w_cap]\n    |> (@) [ for _ in [ 0 .. 2 ] do yield s + d_cap ]\n    |> (@) [ \"^\" ]\n    |> String.concat \"\"\n\nlet (|AtomLine|_|) (line: string) : string list option =\n    let m = Regex.Match(line, atomLine)\n    if m.Success then Some(List.tail [ for g in m.Groups -> g.Value ])\n    else None\n\nlet bondLine : string =\n    [ \"$\" ]\n    |> (@) [ for _ in [ 0 .. 3 ] do yield s + d ]\n    |> (@) [ for _ in [ 0 .. 2 ] do yield s + d_cap ]\n    |> (@) [ \"^\" ]\n    |> String.concat \"\"\n\nlet (|BondLine|_|) (line: string) : string list option =\n    let m = Regex.Match(line, bondLine)\n    if m.Success then Some(List.tail [ for g in m.Groups -> g.Value ])\n    else None\n\nlet tryCastToAtom (atom: string) : AtomType =\n    match atom with\n    | \"H\"  -> H  | \"He\" -> He | \"Li\" -> Li | \"Be\" -> Be | \"B\"  -> B  | \"C\"  -> C  | \"N\"  -> N\n    | \"O\"  -> O  | \"F\"  -> F  | \"Ne\" -> Ne | \"Na\" -> Na | \"Mg\" -> Mg | \"Al\" -> Al | \"Si\" -> Si\n    | \"P\"  -> P  | \"S\"  -> S  | \"Cl\" -> Cl | \"Ar\" -> Ar | \"K\"  -> K  | \"Ca\" -> Ca | \"Sc\" -> Sc\n    | \"Ti\" -> Ti | \"V\"  -> V  | \"Cr\" -> Cr | \"Mn\" -> Mn | \"Fe\" -> Fe | \"Co\" -> Co | \"Ni\" -> Ni\n    | \"Cu\" -> Cu | \"Zn\" -> Zn | \"Ga\" -> Ga | \"Ge\" -> Ge | \"As\" -> As | \"Se\" -> Se | \"Br\" -> Br\n    | \"Kr\" -> Kr | \"Rb\" -> Rb | \"Sr\" -> Sr | \"Zr\" -> Zr | \"Nb\" -> Nb | \"Mo\" -> Mo | \"Tc\" -> Tc\n    | \"Ru\" -> Ru | \"Rh\" -> Rh | \"Pd\" -> Pd | \"Ag\" -> Ag | \"Cd\" -> Cd | \"In\" -> In | \"Sn\" -> Sn\n    | \"Sb\" -> Sb | \"Te\" -> Te | \"I\"  -> I  | \"Xe\" -> Xe | \"Cs\" -> Cs | \"Ba\" -> Ba | \"La\" -> La\n    | \"Ce\" -> Ce | \"Pr\" -> Pr | \"Nd\" -> Nd | \"Pm\" -> Pm | \"Sm\" -> Sm | \"Eu\" -> Eu | \"Gd\" -> Gd\n    | \"Tb\" -> Tb | \"Dy\" -> Dy | \"Ho\" -> Ho | \"Er\" -> Er | \"Tm\" -> Tm | \"Yb\" -> Yb | \"Lu\" -> Lu\n    | \"Hf\" -> Hf | \"Ta\" -> Ta | \"W\"  -> W  | \"Re\" -> Re | \"Os\" -> Os | \"Ir\" -> Ir | \"Pt\" -> Pt\n    | \"Au\" -> Au | \"Hg\" -> Hg | \"Tl\" -> Tl | \"Pb\" -> Pb | \"Bi\" -> Bi | \"Po\" -> Po | \"At\" -> At\n    | \"Rn\" -> Rn | \"Fr\" -> Fr | \"Ra\" -> Ra | \"Ac\" -> Ac | \"Th\" -> Th | \"Pa\" -> Pa | \"U\"  -> U\n    | \"Np\" -> Np | \"Pu\" -> Pu | \"Am\" -> Am | \"Cm\" -> Cm | \"Bk\" -> Bk | \"Cf\" -> Cf | \"Es\" -> Es\n    | \"Fm\" -> Fm | \"Md\" -> Md | \"No\" -> No | \"Lr\" -> Lr | \"Rf\" -> Rf | \"Db\" -> Db | \"Sg\" -> Sg\n    | \"Bh\" -> Bh | \"Hs\" -> Hs | \"Mt\" -> Mt | \"Ds\" -> Ds | \"Rg\" -> Rg | \"Cn\" -> Cn | \"Nh\" -> Nh\n    | \"Fl\" -> Fl | \"Mc\" -> Mc | \"Lv\" -> Lv | \"Ts\" -> Ts | \"Og\" -> Og | \"Y\"  -> AtomType.Y\n    | _ -> AtomType.Unknown\n\nlet tryCastToBond (bond: string) : BondType =\n    match bond with\n    | \"1\" -> Single\n    | \"2\" -> Double\n    | \"3\" -> Triple\n    | \"4\" -> Aromatic\n    | _ -> BondType.Unknown\n\nlet tryCastToFloat (s: string) : float =\n    try s |> float\n    with :? FormatException -> 0.0\n\nlet tryCastToInt (s: string) : int =\n    try s |> int\n    with :? FormatException -> 0\n\nlet parseSdf (sdf: string) : Molecule[] =\n    let mutable atoms: AtomInfo list = []\n    let mutable atomCount: int = 0\n    let mutable bonds: BondInfo list = []\n    let mutable bondCount: int = 0\n    [|\n        for line in sdf.Split [|'\\n'|] do\n            match line with\n            | line when line.Contains(\"$$$$\") = true ->\n                yield { Atoms = atoms |> List.toArray; Bonds = bonds |> List.toArray }\n                atomCount <- 0\n                atoms <- []\n            | AtomLine [ x; y; z; symbol] ->\n                atomCount <- atomCount + 1\n                let atomType = tryCastToAtom symbol\n                let center: Point3D = {\n                    X = tryCastToFloat x\n                    Y = tryCastToFloat y\n                    Z = tryCastToFloat z\n                }\n                let radius: Radius = getAtomRadius Default atomType |> normalizeRadius Default\n                let atom = createAtom atomCount atomType center radius\n                atoms <- atoms @ [ atom ]\n            | BondLine [s; e; bondType] ->\n                let bondType = tryCastToBond bondType\n                let s = tryCastToInt s\n                let e = tryCastToInt e\n                bondCount <- bondCount + 1\n                let bond: BondInfo = {\n                    Index = bondCount\n                    Start = s\n                    End = e\n                    BondType = bondType\n                    Scaling = 1.0\n                }\n                bondCount <- bondCount + 1\n                let revBond: BondInfo = {\n                    Index = bondCount\n                    Start = e\n                    End = s\n                    BondType = bondType\n                    Scaling = 1.0\n                }\n                bonds <- bonds @ [ bond; revBond ]\n            | _ -> ()\n    |]\n","import { FSharpRef } from \"./Types.js\";\nexport function tryParse(str, defValue) {\n    // TODO: test if value is valid and in range\n    if (str != null && /\\S/.test(str)) {\n        const v = +str.replace(\"_\", \"\");\n        if (!Number.isNaN(v)) {\n            defValue.contents = v;\n            return true;\n        }\n    }\n    return false;\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(0);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\n// JS Number.isFinite function evals false for NaN\nexport function isInfinity(x) {\n    return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;\n}\n","module Client.CineMol.Helpers\n\nopen System\n\nlet round (n: int) (f: float) = Math.Round(f, n)\nlet floatToStr (f: float) : string = Operators.string f\nlet intToStr (d: int) : string = Operators.string d\n\nlet abs f = (f ** 2.0) ** 0.5","module Client.CineMol.Geometry\n\nopen System\n\nopen Types\n\nlet intersectionBetweenCircles\n    (c_p1: Point2D)\n    (r_p1: float)\n    (c_p2: Point2D)\n    (r_p2: float)\n    : Line option =\n    // Calculate the distance between the center of the two circles\n    let d = Math.Sqrt((c_p2.X - c_p1.X) ** 2.0 + (c_p2.Y - c_p1.Y) ** 2.0)\n    // Non-intersecting circles\n    if d > (r_p1 + r_p2) then None\n    // Coincident circles\n    elif d = 0.0 && r_p1 = r_p2 then None\n    // One circle within other circle\n    elif d < abs (r_p1 - r_p1) || d < 1E-5 then None\n    // Two intersection points\n    else\n        let a = (r_p1 ** 2.0 - r_p2 ** 2.0 + d ** 2.0) / (2.0 * d)\n        let h1 = r_p1 ** 2.0 - a ** 2.0\n        if h1 <= 0.0 then None\n        else\n            let h2 = Math.Sqrt(h1)\n            let x2 = c_p1.X + a * (c_p2.X - c_p1.X) / d\n            let y2 = c_p1.Y + a * (c_p2.Y - c_p1.Y) / d\n            let x3 = x2 + h2 * (c_p2.Y - c_p1.Y) / d\n            let y3 = y2 - h2 * (c_p2.X - c_p1.X) / d\n            let x4 = x2 - h2 * (c_p2.Y - c_p1.Y) / d\n            let y4 = y2 + h2 * (c_p2.X - c_p1.X) / d\n            Some ({ X = x3; Y = y3 }, { X = x4; Y = y4 })\n\nlet clip (projAtom: AtomInfo) (projMol: Molecule) (atom: AtomInfo) (mol: Molecule) : Clipping list =\n    let clippingAtoms = [|\n        for projOtherAtom, otherAtom in Array.zip projMol.Atoms mol.Atoms do\n            match atom.Intersect otherAtom with\n            | IntersectionCircle _ ->\n                match projAtom.Intersect projOtherAtom with\n                | IntersectionCircle (p, r, _) ->\n                    yield (p, r)\n                | _ -> ()\n            | _ -> () |]\n\n    match clippingAtoms with\n    // No clipping\n    | cs when cs.Length = 0 -> []\n    // Clipping\n    | cs ->\n            let intersections =\n                cs\n                |> Array.map (fun (p, r) ->\n                    let center2D: Point2D = { X = projAtom.Center.X; Y = projAtom.Center.Y }\n                    let clipWithCenter2D: Point2D = { X = p.X; Y = p.Y }\n                    intersectionBetweenCircles center2D projAtom.Radius clipWithCenter2D r)\n            [ for intersection in intersections do\n                match intersection with\n                | None -> ()\n                | Some (p1, p2) -> yield { Line = p1, p2 } ]\n\nlet calcSlope (p1: Point2D) (p2: Point2D) : float =\n    (p2.Y - p1.Y) / (p2.X - p1.X)\n\n// https://library.fridoverweij.com/docs/intersection_line_circle.html\n// not used; might contain bugs\nlet intersectionBetweenCircleAndLine\n    (c_p: Point2D)\n    (r_p: float)\n    (l_p1: Point2D)\n    (l_p2: Point2D)\n    : (Point2D * Point2D) option =\n    let a = calcSlope l_p1 l_p2\n    let b = -1.0\n    let c = l_p1.Y - (a * l_p1.X)\n    let y x = (a * x) + c\n\n    let A = ((a * a) / (b * b)) + 1.0\n    let B = 2.0 * (((a * c) / (b * b)) - c_p.X + (a / b) * c_p.Y)\n    let C = (c_p.X * c_p.X) + (c_p.Y * c_p.Y) + ((2.0 * c) / b) * c_p.Y + ((c * c) / (b * b)) - (r_p * r_p)\n\n    let d = (B * B) - 4.0 * A * C\n    if d > 0.0 then\n        let x1 = (-B + Math.Sqrt(d)) / (2.0 * A)\n        let y1 = y x1\n        let x2 = (-B - Math.Sqrt(d)) / (2.0 * A)\n        let y2 = y x2\n        Some (\n            { X = x1; Y = y1 },\n            { X = x2; Y = y2 }\n        )\n    else None\n","import { substring, format, isNullOrEmpty, join } from \"./String.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { clear, int32ToString } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\n\r\nexport class StringBuilder {\r\n    constructor(value, capacity) {\r\n        this.buf = [];\r\n        if (!isNullOrEmpty(value)) {\r\n            void (this.buf.push(value));\r\n        }\r\n    }\r\n    toString() {\r\n        const __ = this;\r\n        return join(\"\", __.buf);\r\n    }\r\n}\r\n\r\nexport function StringBuilder$reflection() {\r\n    return class_type(\"System.Text.StringBuilder\", void 0, StringBuilder);\r\n}\r\n\r\nexport function StringBuilder_$ctor_Z18115A39(value, capacity) {\r\n    return new StringBuilder(value, capacity);\r\n}\r\n\r\nexport function StringBuilder_$ctor_Z524259A4(capacity) {\r\n    return StringBuilder_$ctor_Z18115A39(\"\", capacity);\r\n}\r\n\r\nexport function StringBuilder_$ctor_Z721C83C5(value) {\r\n    return StringBuilder_$ctor_Z18115A39(value, 16);\r\n}\r\n\r\nexport function StringBuilder_$ctor() {\r\n    return StringBuilder_$ctor_Z18115A39(\"\", 16);\r\n}\r\n\r\nexport function StringBuilder__Append_Z721C83C5(x, s) {\r\n    void (x.buf.push(s));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_244C7CD6(x, c) {\r\n    void (x.buf.push(c));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_Z524259A4(x, o) {\r\n    void (x.buf.push(int32ToString(o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_5E38073B(x, o) {\r\n    void (x.buf.push(o.toString()));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_Z1FBCCD16(x, o) {\r\n    void (x.buf.push(toString(o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_4E60E31B(x, o) {\r\n    void (x.buf.push(toString(o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_695F1130(x, cs) {\r\n    void (x.buf.push(cs.join('')));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_43A65C09(x, s) {\r\n    void (x.buf.push(toString(s)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__AppendFormat_433E080(x, fmt, o) {\r\n    void (x.buf.push(format(fmt, o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__AppendLine(x) {\r\n    void (x.buf.push(\"\\n\"));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__AppendLine_Z721C83C5(x, s) {\r\n    void (x.buf.push(s));\r\n    void (x.buf.push(\"\\n\"));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__get_Length(x) {\r\n    let len = 0;\r\n    for (let i = x.buf.length - 1; i >= 0; i--) {\r\n        len = ((len + x.buf[i].length) | 0);\r\n    }\r\n    return len | 0;\r\n}\r\n\r\nexport function StringBuilder__ToString_Z37302880(x, firstIndex, length) {\r\n    return substring(toString(x), firstIndex, length);\r\n}\r\n\r\nexport function StringBuilder__Clear(x) {\r\n    clear(x.buf);\r\n    return x;\r\n}\r\n\r\n","module Client.CineMol.Svg\n\nopen System\nopen System.Text\n\nopen Helpers\nopen Styles\nopen Types\nopen Geometry\n\nlet header ((xMin, yMin, width, height): ViewBox) =\n    $\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\\n    \\n<svg\\\n    \\n\\tid=\\\"Layer_1\\\"\\\n    \\n\\txmlns=\\\"http://www.w3.org/2000/svg\\\"\\\n    \\n\\tviewBox=\\\"{xMin} {yMin} {width} {height}\\\"\\\n    \\n>\"\n\n// =====================================================================================================================\n// Style\n// =====================================================================================================================\nlet writeAtomDefs (atom: ProjectedAtomInfo) : string =\n    let r1, g1, b1 = (getAtomColor CPK atom.AtomType).Diffuse atomColorGradient.[0]\n    let r2, g2, b2 = (getAtomColor CPK atom.AtomType).Diffuse atomColorGradient.[1]\n    let r3, g3, b3 = (getAtomColor CPK atom.AtomType).Diffuse atomColorGradient.[2]\n    let r4, g4, b4 = (getAtomColor CPK atom.AtomType).Diffuse atomColorGradient.[3]\n    let r5, g5, b5 = (getAtomColor CPK atom.AtomType).Diffuse atomColorGradient.[4]\n    $\"\\n<radialGradient\\\n    \\n\\tid=\\\"radial-gradient-{atom.Index}\\\"\\\n    \\n\\tcx=\\\"{floatToStr atom.Center.X}\\\"\\\n    \\n\\tcy=\\\"{floatToStr atom.Center.Y}\\\"\\\n    \\n\\tfx=\\\"{floatToStr atom.Center.X}\\\"\\\n    \\n\\tfy=\\\"{floatToStr atom.Center.Y}\\\"\\\n    \\n\\tr=\\\"{floatToStr (atom.Radius + 0.4)}\\\"\\\n    \\n\\tgradientTransform=\\\"matrix(1, 0, 0, 1, 0, 0)\\\"\\\n    \\n\\tgradientUnits=\\\"userSpaceOnUse\\\"\\\n    \\n>\\\n    \\n<stop offset=\\\"{floatToStr (1.0 - atomColorGradient.[0])}\\\" \\\n    stop-color=\\\"rgb({floatToStr r1},{floatToStr g1},{floatToStr b1})\\\"/>\\\n    \\n<stop offset=\\\"{floatToStr (1.0 - atomColorGradient.[1])}\\\" \\\n    stop-color=\\\"rgb({floatToStr r2},{floatToStr g2},{floatToStr b2})\\\"/>\\\n    \\n<stop offset=\\\"{floatToStr (1.0 - atomColorGradient.[2])}\\\" \\\n    stop-color=\\\"rgb({floatToStr r3},{floatToStr g3},{floatToStr b3})\\\"/>\\\n    \\n<stop offset=\\\"{floatToStr (1.0 - atomColorGradient.[3])}\\\" \\\n    stop-color=\\\"rgb({floatToStr r4},{floatToStr g4},{floatToStr b4})\\\"/>\\\n    \\n<stop offset=\\\"{floatToStr (1.0 - atomColorGradient.[4])}\\\" \\\n    stop-color=\\\"rgb({floatToStr r5},{floatToStr g5},{floatToStr b5})\\\"/>\\\n    \\n</radialGradient>\"\n\nlet writeAtomsDefs (atoms: ProjectedAtomInfo[]) : string =\n    atoms\n    |> Array.map writeAtomDefs\n    |> String.concat \"\"\n\nlet writeAtomsStyle (atoms: ProjectedAtomInfo[]) : string =\n    atoms\n    |> Array.map (fun atom -> $\"\\n.atom-{atom.Index}{{fill:url(#radial-gradient-{atom.Index});}}\")\n    |> String.concat \"\"\n\nlet writeBondDefs (atoms: ProjectedAtomInfo[]) (bond: BondInfo) : string =\n    let atoms = Array.toList atoms\n\n    let rec findAtom (l: ProjectedAtomInfo list) atomIdx : ProjectedAtomInfo option =\n        match l with\n        | [] -> None\n        | x::xs -> if x.Index = atomIdx then Some x else findAtom xs atomIdx\n\n    match findAtom atoms bond.Start, findAtom atoms bond.End with\n    | Some s, Some e ->\n        let r3s, g3s, b3s = (getAtomColor CPK s.AtomType).Diffuse atomColorGradient.[2]\n        let r3e, g3e, b3e = (getAtomColor CPK e.AtomType).Diffuse atomColorGradient.[2]\n        $\"\\n<linearGradient\\\n        \\n\\tid=\\\"linear-gradient-{bond.Index}-atom-{s.Index}\\\"\\\n        \\n\\tx1=\\\"{floatToStr s.Center.X}\\\"\\\n        \\n\\ty1=\\\"{floatToStr s.Center.Y}\\\"\\\n        \\n\\tx2=\\\"{floatToStr e.Center.X}\\\"\\\n        \\n\\ty2=\\\"{floatToStr e.Center.Y}\\\"\\\n        \\n\\tgradientUnits=\\\"userSpaceOnUse\\\"\\\n        \\n>\\\n        \\n<stop offset=\\\"{floatToStr (1.0 - atomColorGradient.[2])}\\\" \\\n        stop-color=\\\"rgb({floatToStr r3s},{floatToStr g3s},{floatToStr b3s})\\\"/>\\\n        \\n</linearGradient>\n        \\n<linearGradient\\\n        \\n\\tid=\\\"linear-gradient-{bond.Index}-atom-{e.Index}\\\"\\\n        \\n\\tx1=\\\"{floatToStr s.Center.X}\\\"\\\n        \\n\\ty1=\\\"{floatToStr s.Center.Y}\\\"\\\n        \\n\\tx2=\\\"{floatToStr e.Center.X}\\\"\\\n        \\n\\ty2=\\\"{floatToStr e.Center.Y}\\\"\\\n        \\n\\tgradientUnits=\\\"userSpaceOnUse\\\"\\\n        \\n>\\\n        \\n<stop offset=\\\"{floatToStr (1.0 - atomColorGradient.[2])}\\\" \\\n        stop-color=\\\"rgb({floatToStr r3e},{floatToStr g3e},{floatToStr b3e})\\\"/>\\\n        \\n</linearGradient>\"\n    | _ -> \"\"\n\nlet writeBondsDefs (atoms: ProjectedAtomInfo[]) (bonds: BondInfo[]) : string =\n    bonds\n    |> Array.map (writeBondDefs atoms)\n    |> String.concat \"\"\n\nlet writeBondsStyle (atoms: ProjectedAtomInfo[]) (bonds: BondInfo[]) : string =\n    bonds\n    |> Array.map (fun bond ->\n        $\"\\n.bond-{bond.Index}-atom-{bond.Start}{{fill:url(#linear-gradient-{bond.Index}-atom-{bond.Start});}}\n        \\n.bond-{bond.Index}-atom-{bond.End}{{fill:url(#linear-gradient-{bond.Index}-atom-{bond.End});}}\"\n    )\n    |> String.concat \"\"\n\n// =====================================================================================================================\n// Shapes\n// =====================================================================================================================\nlet reconstructShape (atom: ProjectedAtomInfo) : string =\n    let writeArc (final: Point2D) (radius: Radius) : string =\n        let sweep = 1\n        $\"A {floatToStr radius} {floatToStr radius} 0 {sweep} 0 {floatToStr final.X} {floatToStr final.Y}\"\n\n    match atom.Clipping with\n    | {Line = (p1, p2)}::tail ->\n        let arcs =\n            [ for {Line = (p3, p4)} in tail do $\" L {floatToStr p3.X} {floatToStr p3.Y} {writeArc p4 atom.Radius} \" ]\n            |> String.concat \"\"\n        $\"\\n<path\\\n        \\n\\tclass=\\\"atom-{atom.Index}\\\"\\\n        \\n\\tstyle=\\\"stroke:rgb(0,0,0);stroke-width:0.025\\\"\n        \\n\\td=\\\"M {floatToStr p1.X} {floatToStr p1.Y} {writeArc p2 atom.Radius} {arcs} L {floatToStr p1.X} {floatToStr p1.Y}\\\"\n        \\n/>\"\n    | [] -> \"\"\n\nlet drawAtomFilled (atom: ProjectedAtomInfo) : string =\n    $\"\\n<circle\\\n    \\n\\tclass=\\\"atom-{atom.Index}\\\"\\\n    \\n\\tstyle=\\\"stroke:rgb(0,0,0);stroke-width:0.025\\\"\n    \\n\\tcx=\\\"{floatToStr atom.Center.X}\\\"\\\n    \\n\\tcy=\\\"{floatToStr atom.Center.Y}\\\"\\\n    \\n\\tr=\\\"{floatToStr atom.Radius}\\\"\\\n    \\n/>\"\n\nlet writeAtomFilled (atom: ProjectedAtomInfo) : string =\n    match atom.Clipping with\n    | [] -> drawAtomFilled atom\n    | _ -> reconstructShape atom\n\nlet writeAtomsFilled (atoms: ProjectedAtomInfo[]) : string =\n    atoms\n    |> Array.map (fun atom -> writeAtomFilled atom)\n    |> String.concat \"\"\n\nlet writeAtomsWire (atoms: ProjectedAtomInfo[]) (bonds: BondInfo[]) : string =\n    let atoms = Array.toList atoms\n    let bonds = Array.toList bonds\n\n    let rec findAtom (l: ProjectedAtomInfo list) atomIdx : ProjectedAtomInfo option =\n        match l with\n        | [] -> None\n        | x::xs -> if x.Index = atomIdx then Some x else findAtom xs atomIdx\n\n    let findBonds (l: BondInfo list) atomIdx : BondInfo list =\n        l |> List.filter (fun b -> b.Start = atomIdx)\n\n    let mutable drawnAtoms = []\n\n    let drawAtom (atom: ProjectedAtomInfo) : string =\n        let r, g, b = (getAtomColor CPK atom.AtomType).RGB\n        $\"<circle\\\n        \\n\\tclass=\\\"atom-{atom.Index}\\\"\\\n        \\n\\tstyle=\\\"fill:rgb({intToStr r},{intToStr g},{intToStr b})\\\"\n        \\n\\tcx=\\\"{floatToStr atom.Center.X}\\\"\\\n        \\n\\tcy=\\\"{floatToStr atom.Center.Y}\\\"\\\n        \\n\\tr=\\\"{floatToStr 0.05}\\\"\\\n        \\n/>\"\n\n    [\n        for startAtom in atoms do\n            yield drawAtom startAtom\n            drawnAtoms <- drawnAtoms @ [ startAtom.Index ]\n            match findBonds bonds startAtom.Index with\n            | [] -> ()\n            | atomBonds ->\n                for atomBond in atomBonds do\n                    if not (List.contains atomBond.End drawnAtoms) then\n                        match findAtom atoms atomBond.End with\n                        | Some endAtom ->\n                            let s, e = startAtom, endAtom\n                            let m = s.Center.Midpoint e.Center\n                            let sR, sG, sB = (getAtomColor CPK s.AtomType).RGB\n                            let eR, eG, eB = (getAtomColor CPK e.AtomType).RGB\n                            yield\n                                $\"<line\\\n                                \\n\\tx1=\\\"{s.Center.X}\\\"\\\n                                \\n\\tx2=\\\"{m.X}\\\"\\\n                                \\n\\ty1=\\\"{s.Center.Y}\\\"\\\n                                \\n\\ty2=\\\"{m.Y}\\\"\\\n                                \\n\\tstyle=\\\"stroke:rgb({intToStr sR},{intToStr sG},{intToStr sB});stroke-width:0.1\\\"/>\"\n                            yield\n                                $\"<line\\\n                                \\n\\tx1=\\\"{m.X}\\\"\\\n                                \\n\\tx2=\\\"{e.Center.X}\\\"\\\n                                \\n\\ty1=\\\"{m.Y}\\\"\\\n                                \\n\\ty2=\\\"{e.Center.Y}\\\"\\\n                                \\n\\tstyle=\\\"stroke:rgb({intToStr eR},{intToStr eG},{intToStr eB});stroke-width:0.1\\\"/>\"\n                        | None -> ()\n    ]\n    |> String.concat \"\"\n\ntype BondEnd = | Start | End\n\nlet writeBallAndStick (atoms: ProjectedAtomInfo[]) (bonds: BondInfo[]) : string =\n    let atoms = Array.toList atoms\n    let bonds = Array.toList bonds\n\n    let drawAtom (atom: ProjectedAtomInfo) : string =\n        $\"<circle\\\n        \\n\\tclass=\\\"atom-{atom.Index}\\\"\\\n        \\n\\tstyle=\\\"stroke:rgb(0,0,0);stroke-width:0.025\\\"\n        \\n\\tcx=\\\"{floatToStr atom.Center.X}\\\"\\\n        \\n\\tcy=\\\"{floatToStr atom.Center.Y}\\\"\\\n        \\n\\tr=\\\"{floatToStr (atom.Radius / 2.0)}\\\"\\\n        \\n/>\"\n\n    let drawSingleBond (bond: BondInfo) (s: ProjectedAtomInfo) (e: ProjectedAtomInfo) : string =\n        let round = round 3\n        let width = 0.15 * bond.Scaling\n        let sProj: Point2D = { X = s.Center.X; Y = s.Center.Y }\n        let eProj: Point2D = { X = e.Center.X; Y = e.Center.Y }\n\n        let factor = 0.20\n        let sProj: Point2D = {\n            X = sProj.X + (factor * s.Radius) * (sProj.FindVector eProj).X\n            Y = sProj.Y + (factor * s.Radius) * (sProj.FindVector eProj).Y\n        }\n        let eProj: Point2D = {\n            X = eProj.X + (factor * e.Radius) * (eProj.FindVector sProj).X\n            Y = eProj.Y + (factor * e.Radius) * (eProj.FindVector sProj).Y\n        }\n\n        [|\n            Start, sProj, sProj.Midpoint eProj\n            End, sProj.Midpoint eProj, eProj\n        |]\n        |> Array.map (fun (bondEnd, sProj, eProj) ->\n            let slope = calcSlope sProj eProj\n\n            // Construct cylinder for bond line\n            let perpSlope = -1.0 * (1.0 / slope)  // Opposite reciprocal to get perpendicular slope\n            let t =  width / Math.Sqrt (1.0 + Math.Pow(perpSlope, 2.0))\n            let sTop: Point2D = { X = round (sProj.X + t); Y = round (sProj.Y + (perpSlope * t)) }\n            let sBot: Point2D = { X = round (sProj.X - t); Y = round (sProj.Y - (perpSlope * t)) }\n            let eTop: Point2D = { X = round (eProj.X + t); Y = round (eProj.Y + (perpSlope * t)) }\n            let eBot: Point2D = { X = round (eProj.X - t); Y = round (eProj.Y - (perpSlope * t)) }\n            let sSweep, eSweep = if sProj.Y > eProj.Y then 1, 0 else 0, 1\n\n            let bondEnd =\n                match bondEnd with\n                | Start -> s.Index\n                | End -> e.Index\n\n            // Draw bond\n            $\"<path \\\n            \\n\\tclass=\\\"bond-{bond.Index}-atom-{bondEnd}\\\"\n            \\n\\tstyle=\\\"stroke:rgb(0,0,0);stroke-width:0.025\\\"\n            \\n\\td= \\\n            \\n\\t\\t\\\"M {floatToStr sTop.X} {floatToStr sTop.Y}\\\n            \\n\\t\\tA {floatToStr width} {floatToStr width} 0 0 {intToStr sSweep} {floatToStr sBot.X} {floatToStr sBot.Y}\\\n            \\n\\t\\tL {floatToStr eBot.X} {floatToStr eBot.Y}\\\n            \\n\\t\\tA {floatToStr width} {floatToStr width} 0 0 {intToStr eSweep} {floatToStr eTop.X} {floatToStr eTop.Y}\\\n            \\n\\t\\tL {floatToStr sTop.X} {floatToStr sTop.Y}\\\"\\\n            \\n/>\"\n        )\n        |> String.concat \"\"\n\n    let drawDoubleBond (bond: BondInfo) (s: ProjectedAtomInfo) (e: ProjectedAtomInfo) : string =\n        let round = round 3\n        let sProj: Point2D = { X = s.Center.X; Y = s.Center.Y }\n        let eProj: Point2D = { X = e.Center.X; Y = e.Center.Y }\n\n        let factor = 0.20\n        let sProj: Point2D = {\n            X = sProj.X + (factor * s.Radius) * (sProj.FindVector eProj).X\n            Y = sProj.Y + (factor * s.Radius) * (sProj.FindVector eProj).Y\n        }\n        let eProj: Point2D = {\n            X = eProj.X + (factor * e.Radius) * (eProj.FindVector sProj).X\n            Y = eProj.Y + (factor * e.Radius) * (eProj.FindVector sProj).Y\n        }\n\n        [|\n            Start, sProj, sProj.Midpoint eProj\n            End, sProj.Midpoint eProj, eProj\n        |]\n        |> Array.map (fun (bondEnd, sProj, eProj) ->\n            let width = 0.10 * bond.Scaling\n            let slope = calcSlope sProj eProj\n            let perpSlope = -1.0 * (1.0 / slope)  // Opposite reciprocal to get perpendicular slope\n            let t =  width / Math.Sqrt (1.0 + Math.Pow(perpSlope, 2.0))\n\n            let aSideTop, aSideBot: Point2D * Point2D = (\n                { X = round (sProj.X + t); Y = round (sProj.Y + (perpSlope * t)) },\n                { X = round (eProj.X + t); Y = round (eProj.Y + (perpSlope * t)) }\n            )\n            let bSideTop, bSideBot: Point2D * Point2D = (\n                { X = round (sProj.X - t); Y = round (sProj.Y - (perpSlope * t)) },\n                { X = round (eProj.X - t); Y = round (eProj.Y - (perpSlope * t)) }\n            )\n\n            let constructCylinder p1 p2 =\n                let width = 0.05 * bond.Scaling\n                // Construct cylinder for bond line\n                let slope = calcSlope p1 p2\n                let perpSlope = -1.0 * (1.0 / slope)  // Opposite reciprocal to get perpendicular slope\n                let t =  width / Math.Sqrt (1.0 + Math.Pow(perpSlope, 2.0))\n                let sTop: Point2D = { X = round (p1.X + t); Y = round (p1.Y + (perpSlope * t)) }\n                let sBot: Point2D = { X = round (p1.X - t); Y = round (p1.Y - (perpSlope * t)) }\n                let eTop: Point2D = { X = round (p2.X + t); Y = round (p2.Y + (perpSlope * t)) }\n                let eBot: Point2D = { X = round (p2.X - t); Y = round (p2.Y - (perpSlope * t)) }\n                let sSweep, eSweep = if p1.Y > p2.Y then 1, 0 else 0, 1\n                sTop, sBot, eTop, eBot, sSweep, eSweep\n\n            let sTop1, sBot1, eTop1, eBot1, sSweep1, eSweep1 = constructCylinder aSideTop aSideBot\n            let sTop2, sBot2, eTop2, eBot2, sSweep2, eSweep2 = constructCylinder bSideTop bSideBot\n\n            let bondEnd =\n                match bondEnd with\n                | Start -> s.Index\n                | End -> e.Index\n\n            // Draw bond\n            [\n                $\"<path \\\n                \\n\\tclass=\\\"bond-{bond.Index}-atom-{bondEnd}\\\"\n                \\n\\tstyle=\\\"stroke:rgb(0,0,0);stroke-width:0.025\\\"\n                \\n\\td= \\\n                \\n\\t\\t\\\"M {floatToStr sTop1.X} {floatToStr sTop1.Y}\\\n                \\n\\t\\tA {floatToStr width} {floatToStr width} 0 0 {intToStr sSweep1} {floatToStr sBot1.X} {floatToStr sBot1.Y}\\\n                \\n\\t\\tL {floatToStr eBot1.X} {floatToStr eBot1.Y}\\\n                \\n\\t\\tA {floatToStr width} {floatToStr width} 0 0 {intToStr eSweep1} {floatToStr eTop1.X} {floatToStr eTop1.Y}\\\n                \\n\\t\\tL {floatToStr sTop1.X} {floatToStr sTop1.Y}\\\"\\\n                \\n/>\"\n\n                $\"<path \\\n                \\n\\tclass=\\\"bond-{bond.Index}-atom-{bondEnd}\\\"\n                \\n\\tstyle=\\\"stroke:rgb(0,0,0);stroke-width:0.025\\\"\n                \\n\\td= \\\n                \\n\\t\\t\\\"M {floatToStr sTop2.X} {floatToStr sTop2.Y}\\\n                \\n\\t\\tA {floatToStr width} {floatToStr width} 0 0 {intToStr sSweep2} {floatToStr sBot2.X} {floatToStr sBot2.Y}\\\n                \\n\\t\\tL {floatToStr eBot2.X} {floatToStr eBot2.Y}\\\n                \\n\\t\\tA {floatToStr width} {floatToStr width} 0 0 {intToStr eSweep2} {floatToStr eTop2.X} {floatToStr eTop2.Y}\\\n                \\n\\t\\tL {floatToStr sTop2.X} {floatToStr sTop2.Y}\\\"\\\n                \\n/>\"\n            ]\n            |> String.concat \"\"\n        )\n        |> String.concat \"\"\n\n    let rec findAtom (l: ProjectedAtomInfo list) atomIdx : ProjectedAtomInfo option =\n        match l with\n        | [] -> None\n        | x::xs -> if x.Index = atomIdx then Some x else findAtom xs atomIdx\n\n    let findBonds (l: BondInfo list) atomIdx : BondInfo list =\n        l |> List.filter (fun b -> b.Start = atomIdx)\n\n    let mutable drawnAtoms = []\n\n    [\n        for startAtom in atoms do\n            yield drawAtom startAtom\n            drawnAtoms <- drawnAtoms @ [ startAtom.Index ]\n            match findBonds bonds startAtom.Index with\n            | [] -> ()\n            | atomBonds ->\n                for atomBond in atomBonds do\n                    if not (List.contains atomBond.End drawnAtoms) then\n                        match findAtom atoms atomBond.End with\n                        | Some endAtom ->\n                            match atomBond.BondType with\n                            | Single -> yield drawSingleBond atomBond startAtom endAtom\n                            | Double -> yield drawDoubleBond atomBond startAtom endAtom\n                            | _ -> ()\n                        | None -> ()\n    ]\n    |> String.concat \"\"\n\n// =====================================================================================================================\n// Compile SVG\n// =====================================================================================================================\nlet add (s: string) (sb: StringBuilder) : StringBuilder = sb.Append(s)\n\nlet stringify (sb: StringBuilder) : string = sb.ToString()\n\nlet writeSVG viewBox depiction (mol: ProjectedMolecule) : string =\n    match depiction with\n    | Filled ->\n        StringBuilder()\n        |> add (header viewBox)\n        |> add \"\\n<defs>\\n<style>\"\n        |> add (writeAtomsStyle mol.Atoms)\n        |> add \"\\n</style>\"\n        |> add (writeAtomsDefs mol.Atoms)\n        |> add \"\\n</defs>\"\n        |> add (writeAtomsFilled mol.Atoms)\n        |> add \"\\n</svg>\"\n        |> stringify\n\n    | BallAndStick ->\n        StringBuilder()\n        |> add (header viewBox)\n        |> add \"\\n<defs>\\n<style>\"\n        |> add (writeAtomsStyle mol.Atoms)\n        |> add (writeBondsStyle mol.Atoms mol.Bonds)\n        |> add \"\\n</style>\"\n        |> add (writeAtomsDefs mol.Atoms)\n        |> add (writeBondsDefs mol.Atoms mol.Bonds)\n        |> add \"\\n</defs>\"\n        |> add (writeBallAndStick mol.Atoms mol.Bonds)\n        |> add \"\\n</svg>\"\n        |> stringify\n\n    | Wire ->\n        StringBuilder()\n        |> add (header viewBox)\n        |> add \"\\n<defs>\\n<style>\"\n        |> add \"\\n</style>\"\n        |> add \"\\n</defs>\"\n        |> add (writeAtomsWire mol.Atoms mol.Bonds)\n        |> add \"\\n</svg>\"\n        |> stringify\n\n    | _ -> \"fails_drawing\"  // Other depictions not yet implemented\n","module Client.CineMol.Drawing\n\nopen System\n\nopen Helpers\nopen Styles\nopen Types\nopen Geometry\nopen Svg\n\ntype DrawOptions = {Depiction: Depiction; ShowHydrogenAtoms: bool }\n    with static member init = { Depiction = Filled; ShowHydrogenAtoms = false }\n\nlet filterAtoms (atomType: AtomType) (atoms: AtomInfo[]) : AtomInfo[] =\n    Array.filter(fun (atom: AtomInfo) -> atom.AtomType <> atomType) atoms\n\nlet rotateAtoms (axis: Axis) (rads: float) (atoms: AtomInfo[]) : AtomInfo[] =\n    atoms\n    |> Array.map (fun (atom: AtomInfo) ->\n        atom.Rotate axis ((rads / 100.0) * 2.0 * Math.PI))\n\nlet changeDistanceToAtoms (ratio: float) (mol: Molecule) : Molecule =\n    let transformAtom (a: AtomInfo) =\n        { a with\n            Center = {\n                X = a.Center.X * ratio\n                Y = a.Center.Y * ratio\n                Z = a.Center.Z * ratio  }\n            Radius = a.Radius * ratio }\n    let transformBond b =\n        { b with Scaling = b.Scaling * ratio }\n    { mol with Atoms = Array.map (fun a -> transformAtom a) mol.Atoms; Bonds = Array.map (fun b -> transformBond b) mol.Bonds }\n\nlet draw\n    (viewBox: ViewBox option)\n    (options: DrawOptions)\n    (rotation: Rotation)\n    (zoom: Zoom)\n    (mol: Molecule)\n    : string * ViewBox =\n\n    // Rotate atoms based on supplied rotations in radians around axes.\n    let mol = {\n        mol with Atoms = mol.Atoms\n                         |> rotateAtoms Y rotation.AxisX\n                         |> rotateAtoms Z rotation.AxisY\n                         |> rotateAtoms X rotation.AxisY\n    }\n\n    // Calculate view box offset (set before zoom, otherwise view box changes with zoom).\n    let offsetViewBox =\n        let minimumOffset = 2.0\n        match mol.Atoms |> Array.map (fun a -> a.Center.Distance origin) |> Array.max |> (*) 2.0 |> round 0 with\n        | x when x < minimumOffset -> minimumOffset | x -> x\n\n    let viewBox =\n        match viewBox with\n        | None -> -offsetViewBox, -offsetViewBox, offsetViewBox * 2.0, offsetViewBox * 2.0\n        | Some x -> x\n\n    let focalLength: float = offsetViewBox\n    let pov: Point3D = { X = 1E-5; Y = 1E-5; Z = focalLength }\n    let distPovOrigin: float = pov.Distance origin\n\n    // Filter atoms based on atom type.\n    let mol = { mol with Atoms = if options.ShowHydrogenAtoms = false then filterAtoms H mol.Atoms else mol.Atoms }\n\n    // Apply zoom based on supplied scroll.\n    let perspectiveMol = changeDistanceToAtoms zoom.Ratio mol\n\n    // Sort drawing order point cloud based on distance point to POV.\n    let perspectiveMol = { perspectiveMol with Atoms = perspectiveMol.Atoms |> Array.sortBy (fun atom -> atom.Center.Distance pov |> (*) -1.0) }\n\n    // Recalculate radii based on distance point to POV.\n    let perspectiveMol = {\n        perspectiveMol with\n            Atoms = perspectiveMol.Atoms\n                    |> Array.map (fun atom ->\n                        let projectedRadius = (distPovOrigin / (pov.Distance atom.Center)) * atom.Radius\n                        { atom with Radius = projectedRadius }) }\n\n    // Apply perspective projection on 3D point cloud on 2D view box\n    let cameraForward: Vector3D = { X = -pov.X; Y = -pov.Y; Z = -pov.Z }\n    let cameraPerpendicular: Vector3D = { X = cameraForward.Y; Y = -cameraForward.X; Z = 0.0 }\n    let cameraHorizon: Vector3D = cameraForward.Cross cameraPerpendicular\n    let project p = project cameraPerpendicular cameraHorizon cameraForward pov focalLength p\n    let setPerspectiveAtom (atom: AtomInfo) : AtomInfo = { atom with Center = project atom.Center }\n\n    let perspectiveMol = {\n        perspectiveMol with\n            Atoms = perspectiveMol.Atoms |> Array.map (fun atom -> setPerspectiveAtom atom)\n    }\n\n    // Calculate clipping.\n    let projectedMol =\n        { Atoms =\n            Array.zip perspectiveMol.Atoms mol.Atoms\n            |> Array.map (fun (perspectiveAtom, atom) ->\n                { Index = perspectiveAtom.Index\n                  AtomType = perspectiveAtom.AtomType\n                  Center = { X = perspectiveAtom.Center.X; Y = perspectiveAtom.Center.Y }\n                  Radius = perspectiveAtom.Radius\n//                  Clipping = clip perspectiveAtom perspectiveMol atom mol\n                  Clipping = []\n                })\n          Bonds = perspectiveMol.Bonds }\n\n    writeSVG viewBox options.Depiction projectedMol, viewBox\n","module Client.CineMol.Encoding\n\nopen System\n\nexception UnexpectedCharToEncode of string\n\ntype Encoding = | ISO_8859_1\n    with\n    member x.GetEncoding (c: char) : byte =\n        match x with\n\n        // Encode character according to ISO 8859-1.\n        | ISO_8859_1 ->\n            match c with\n            | '\\t'  | '\\n'  | ' '  -> 32uy\n            | '!'  -> 33uy  | '\"'  -> 34uy  | '#'  -> 35uy  | '$'  -> 36uy\n            | '%'  -> 37uy  | '&'  -> 38uy  | '''  -> 39uy  | '('  -> 40uy\n            | ')'  -> 41uy  | '*'  -> 42uy  | '+'  -> 43uy  | ','  -> 44uy\n            | '-'  -> 45uy  | '.'  -> 46uy  | '/'  -> 47uy  | '0'  -> 48uy\n            | '1'  -> 49uy  | '2'  -> 50uy  | '3'  -> 51uy  | '4'  -> 52uy\n            | '5'  -> 53uy  | '6'  -> 54uy  | '7'  -> 55uy  | '8'  -> 56uy\n            | '9'  -> 57uy  | ':'  -> 58uy  | ';'  -> 59uy  | '<'  -> 60uy\n            | '='  -> 61uy  | '>'  -> 62uy  | '?'  -> 63uy  | '@'  -> 64uy\n            | 'A'  -> 65uy  | 'B'  -> 66uy  | 'C'  -> 67uy  | 'D'  -> 68uy\n            | 'E'  -> 69uy  | 'F'  -> 70uy  | 'G'  -> 71uy  | 'H'  -> 72uy\n            | 'I'  -> 73uy  | 'J'  -> 74uy  | 'K'  -> 75uy  | 'L'  -> 76uy\n            | 'M'  -> 77uy  | 'N'  -> 78uy  | 'O'  -> 79uy  | 'P'  -> 80uy\n            | 'Q'  -> 81uy  | 'R'  -> 82uy  | 'S'  -> 83uy  | 'T'  -> 84uy\n            | 'U'  -> 85uy  | 'V'  -> 86uy  | 'W'  -> 87uy  | 'X'  -> 88uy\n            | 'Y'  -> 89uy  | 'Z'  -> 90uy  | '['  -> 91uy  | '\\\\' -> 92uy\n            | ']'  -> 93uy  | '^'  -> 94uy  | '_'  -> 95uy  | '`'  -> 96uy\n            | 'a'  -> 97uy  | 'b'  -> 98uy  | 'c'  -> 99uy  | 'd'  -> 100uy\n            | 'e' -> 101uy  | 'f'  -> 102uy | 'g'  -> 103uy | 'h'  -> 104uy\n            | 'i' -> 105uy  | 'j'  -> 106uy | 'k'  -> 107uy | 'l'  -> 108uy\n            | 'm' -> 109uy  | 'n'  -> 110uy | 'o'  -> 111uy | 'p'  -> 112uy\n            | 'q' -> 113uy  | 'r'  -> 114uy | 's'  -> 115uy | 't'  -> 116uy\n            | 'u' -> 117uy  | 'v'  -> 118uy | 'w'  -> 119uy | 'x'  -> 120uy\n            | 'y' -> 121uy  | 'z'  -> 122uy | '{'  -> 123uy | '|'  -> 124uy\n            | '}' -> 125uy  | '~'  -> 126uy\n            | _   ->\n                $\"Unknown character to encode {x}: {c}\"\n                |> UnexpectedCharToEncode\n                |> raise\n\nlet encode (encoding: Encoding) (src: string) : byte[] =\n    src\n    |> Seq.toArray\n    |> Array.map (fun c -> encoding.GetEncoding c)\n\nlet toBase64String (toEncode : string) : string =\n    let bytes =  encode ISO_8859_1 toEncode\n    Convert.ToBase64String(bytes)\n","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nimport Decimal from \"./Decimal.js\";\nimport { fromInt as int64FromInt } from \"./Long.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class MethodInfo {\n    constructor(name, parameters, returnType) {\n        this.name = name;\n        this.parameters = parameters;\n        this.returnType = returnType;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport class GenericParameter extends TypeInfo {\n    constructor(name) {\n        super(name);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(\"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport function measure_type(fullname) {\n    return new TypeInfo(fullname);\n}\nexport function generic_type(name) {\n    return new GenericParameter(name);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof TypeInfo) {\n        const elemType = getElementType(info);\n        if (elemType != null) {\n            return name(elemType) + \"[]\";\n        }\n        else {\n            const i = info.fullname.lastIndexOf(\".\");\n            return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n        }\n    }\n    else {\n        return info.name;\n    }\n}\nexport function fullName(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return fullName(elemType) + \"[]\";\n    }\n    else if (t.generics == null || t.generics.length === 0) {\n        return t.fullname;\n    }\n    else {\n        return t.fullname + \"[\" + t.generics.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n}\nexport function namespace(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return namespace(elemType);\n    }\n    else {\n        const i = t.fullname.lastIndexOf(\".\");\n        return i === -1 ? \"\" : t.fullname.substr(0, i);\n    }\n}\nexport function isArray(t) {\n    return getElementType(t) != null;\n}\nexport function getElementType(t) {\n    var _a;\n    return t.fullname === \"[]\" && ((_a = t.generics) === null || _a === void 0 ? void 0 : _a.length) === 1 ? t.generics[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isGenericParameter(t) {\n    return t instanceof GenericParameter;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    return (t2.fullname === obj_type.fullname) || (t1.parent != null && (t1.parent.Equals(t2) || isSubclassOf(t1.parent, t2)));\n}\nfunction isErasedToNumber(t) {\n    return isEnum(t) || [\n        int8_type.fullname,\n        uint8_type.fullname,\n        int16_type.fullname,\n        uint16_type.fullname,\n        int32_type.fullname,\n        uint32_type.fullname,\n        float32_type.fullname,\n        float64_type.fullname,\n    ].includes(t.fullname);\n}\nexport function isInstanceOfType(t, o) {\n    if (t.fullname === obj_type.fullname)\n        return true;\n    switch (typeof o) {\n        case \"boolean\":\n            return t.fullname === bool_type.fullname;\n        case \"string\":\n            return t.fullname === string_type.fullname;\n        case \"function\":\n            return isFunction(t);\n        case \"number\":\n            return isErasedToNumber(t);\n        default:\n            return t.construct != null && o instanceof t.construct;\n    }\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else if (isErasedToNumber(t)) {\n        return 0;\n    }\n    else {\n        switch (t.fullname) {\n            case obj_type.fullname:\n                return {};\n            case bool_type.fullname:\n                return false;\n            case \"System.Int64\":\n            case \"System.UInt64\":\n                // typeof<int64> and typeof<uint64> get transformed to class_type(\"System.Int64\")\n                // and class_type(\"System.UInt64\") respectively. Test for the name of the primitive type.\n                return int64FromInt(0);\n            case decimal_type.fullname:\n                return new Decimal(0);\n            case char_type.fullname:\n                // Even though char is a value type, it's erased to string, and Unchecked.defaultof<char> is null\n                return null;\n            default:\n                throw new Error(`Cannot access constructor of ${t.fullname}`);\n        }\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","namespace Fulma\r\n\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\nmodule Reflection =\r\n\r\n    open Microsoft.FSharp.Reflection\r\n    open System\r\n\r\n    let getCaseName (case : 'T) =\r\n#if FABLE_COMPILER\r\n        Fable.Core.Reflection.getCaseName case\r\n#else\r\n        // Get UnionCaseInfo value from the F# reflection tools\r\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\r\n        caseInfo.GetCustomAttributes()\r\n        |> Seq.tryPick (function\r\n                        | :? CompiledNameAttribute as att -> Some att.CompiledName\r\n                        | _ -> None)\r\n        |> Option.defaultWith (fun () -> caseInfo.Name)\r\n#endif\r\n\r\n    let getCaseTag (case : 'T) =\r\n#if FABLE_COMPILER\r\n        Fable.Core.Reflection.getCaseTag case\r\n#else\r\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\r\n        caseInfo.Tag\r\n#endif\r\n\r\n[<RequireQualifiedAccess>]\r\ntype Screen =\r\n    | All\r\n    | [<CompiledName(\"desktop\")>] Desktop\r\n    | [<CompiledName(\"tablet\")>] Tablet\r\n    | [<CompiledName(\"mobile\")>] Mobile\r\n    | [<CompiledName(\"widescreen\")>] WideScreen\r\n    | [<CompiledName(\"touch\")>] Touch\r\n    | [<CompiledName(\"fullhd\")>] FullHD\r\n\r\n    static member ToString (screen : Screen) =\r\n        match screen with\r\n        | All -> \"\"\r\n        | Desktop\r\n        | Tablet\r\n        | Mobile\r\n        | WideScreen\r\n        | Touch\r\n        | FullHD -> \"-\" + Reflection.getCaseName screen\r\n\r\n[<AutoOpen>]\r\nmodule Color =\r\n\r\n    type IColor =\r\n        | [<CompiledName(\"is-black\")>] IsBlack\r\n        | [<CompiledName(\"is-dark\")>] IsDark\r\n        | [<CompiledName(\"is-light\")>] IsLight\r\n        | [<CompiledName(\"is-white\")>] IsWhite\r\n        | [<CompiledName(\"is-primary\")>] IsPrimary\r\n        | [<CompiledName(\"is-info\")>] IsInfo\r\n        | [<CompiledName(\"is-success\")>] IsSuccess\r\n        | [<CompiledName(\"is-warning\")>] IsWarning\r\n        | [<CompiledName(\"is-danger\")>] IsDanger\r\n        | [<CompiledName(\"is-link\")>] IsLink\r\n        | [<CompiledName(\"is-black-bis\")>] IsBlackBis\r\n        | [<CompiledName(\"is-black-ter\")>] IsBlackTer\r\n        | [<CompiledName(\"is-grey-darker\")>] IsGreyDarker\r\n        | [<CompiledName(\"is-grey-dark\")>] IsGreyDark\r\n        | [<CompiledName(\"is-grey\")>] IsGrey\r\n        | [<CompiledName(\"is-grey-light\")>] IsGreyLight\r\n        | [<CompiledName(\"is-grey-lighter\")>] IsGreyLighter\r\n        | [<CompiledName(\"is-white-ter\")>] IsWhiteTer\r\n        | [<CompiledName(\"is-white-bis\")>] IsWhiteBis\r\n        /// Allow you to specify a custom color. The color will be prefixed by \"is-\"\r\n        | IsCustomColor of string\r\n        /// Allow you to specify a NoColor case.\r\n        | NoColor\r\n\r\n    let ofColor level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"is-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> Reflection.getCaseName level\r\n\r\n[<AutoOpen>]\r\nmodule Size =\r\n\r\n    type ISize =\r\n        | [<CompiledName(\"is-small\")>] IsSmall\r\n        | [<CompiledName(\"is-medium\")>] IsMedium\r\n        | [<CompiledName(\"is-large\")>] IsLarge\r\n\r\n    let inline ofSize size =\r\n        Reflection.getCaseName size\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextSize =\r\n    type Option =\r\n        | Is1\r\n        | Is2\r\n        | Is3\r\n        | Is4\r\n        | Is5\r\n        | Is6\r\n        | Is7\r\n\r\n        static member ToString (x: Option) =\r\n            Reflection.getCaseTag x + 1 |> string\r\n\r\n    let inline generic screen size =\r\n        \"is-size-\" + Option.ToString size + Screen.ToString screen\r\n\r\n    let inline only screen size =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-size-\" + Option.ToString size + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-size-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextAlignment =\r\n\r\n    type Option =\r\n        /// Add `has-text-centered`\r\n        | [<CompiledName(\"has-text-centered\")>] Centered\r\n        /// Add `has-text-justified`\r\n        | [<CompiledName(\"has-text-justified\")>] Justified\r\n        /// Add `has-text-left`\r\n        | [<CompiledName(\"has-text-left\")>] Left\r\n        /// Add `has-text-right`\r\n        | [<CompiledName(\"has-text-right\")>] Right\r\n\r\n        static member inline ToString opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let inline generic screen alignment =\r\n        Option.ToString alignment + Screen.ToString screen\r\n\r\n    let inline only screen alignment =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            Option.ToString alignment + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-size-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexDirection =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-direction-row</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-row\")>] Row\r\n        /// <summary>Add <c>is-flex-direction-row-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-row-reverse\")>] RowReverse\r\n        /// <summary>Add <c>is-flex-direction-column</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-column\")>] Column\r\n        /// <summary>Add <c>is-flex-direction-column-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-column-reverse\")>] ColumnReverse\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexWrap =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-wrap-nowrap</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-nowrap\")>] NoWrap\r\n        /// <summary>Add <c>is-flex-wrap-wrap</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-wrap\")>] Wrap\r\n        /// <summary>Add <c>is-flex-wrap-wrap-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-wrap-reverse\")>] WrapReverse\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexJustifyContent =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-justify-content-flex-start</c></summary>\r\n        | [<CompiledName(\"is-justify-content-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-justify-content-flex-end</c></summary>\r\n        | [<CompiledName(\"is-justify-content-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-justify-content-center</c></summary>\r\n        | [<CompiledName(\"is-justify-content-center\")>] Center\r\n        /// <summary>Add <c>is-justify-content-space-between</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-between\")>] SpaceBetween\r\n        /// <summary>Add <c>is-justify-content-space-around</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-around\")>] SpaceAround\r\n        /// <summary>Add <c>is-justify-content-space-evenly</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-evenly\")>] SpaceEvenly\r\n        /// <summary>Add <c>is-justify-content-start</c></summary>\r\n        | [<CompiledName(\"is-justify-content-start\")>] Start\r\n        /// <summary>Add <c>is-justify-content-end</c></summary>\r\n        | [<CompiledName(\"is-justify-content-end\")>] End\r\n        /// <summary>Add <c>is-justify-content-left</c></summary>\r\n        | [<CompiledName(\"is-justify-content-left\")>] Left\r\n        /// <summary>Add <c>is-justify-content-right</c></summary>\r\n        | [<CompiledName(\"is-justify-content-right\")>] Right\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignContent =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-content-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-content-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-content-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-content-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-content-center</c></summary>\r\n        | [<CompiledName(\"is-align-content-center\")>] Center\r\n        /// <summary>Add <c>is-align-content-space-between</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-between\")>] SpaceBetween\r\n        /// <summary>Add <c>is-align-content-space-around</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-around\")>] SpaceAround\r\n        /// <summary>Add <c>is-align-content-space-evenly</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-evenly\")>] SpaceEvenly\r\n        /// <summary>Add <c>is-align-content-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-content-stretch\")>] Stretch\r\n        /// <summary>Add <c>is-align-content-start</c></summary>\r\n        | [<CompiledName(\"is-align-content-start\")>] Start\r\n        /// <summary>Add <c>is-align-content-end</c></summary>\r\n        | [<CompiledName(\"is-align-content-end\")>] End\r\n        /// <summary>Add <c>is-align-content-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-content-baseline\")>] Baseline\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignItems =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-items-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-items-stretch\")>] Stretch\r\n        /// <summary>Add <c>is-align-items-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-items-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-items-center</c></summary>\r\n        | [<CompiledName(\"is-align-items-center\")>] Center\r\n        /// <summary>Add <c>is-align-items-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-items-baseline\")>] Baseline\r\n        /// <summary>Add <c>is-align-items-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-start\")>] Start\r\n        /// <summary>Add <c>is-align-items-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-end\")>] End\r\n        /// <summary>Add <c>is-align-items-self-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-self-start\")>] SelfStart\r\n        /// <summary>Add <c>is-align-items-self-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-self-end\")>] SelfEnd\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignSelf =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-self-auto</c></summary>\r\n        | [<CompiledName(\"is-align-self-auto\")>] Auto\r\n        /// <summary>Add <c>is-align-self-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-self-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-self-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-self-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-self-center</c></summary>\r\n        | [<CompiledName(\"is-align-self-center\")>] Center\r\n        /// <summary>Add <c>is-align-self-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-self-baseline\")>] Baseline\r\n        /// <summary>Add <c>is-align-self-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-self-stretch\")>] Stretch\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexGrow =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-grow-0</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-0\")>] Is0\r\n        /// <summary>Add <c>is-flex-grow-1</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-1\")>] Is1\r\n        /// <summary>Add <c>is-flex-grow-2</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-2\")>] Is2\r\n        /// <summary>Add <c>is-flex-grow-3</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-3\")>] Is3\r\n        /// <summary>Add <c>is-flex-grow-4</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-4\")>] Is4\r\n        /// <summary>Add <c>is-flex-grow-5</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-5\")>] Is5\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexShrink =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-shrink-0</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-0\")>] Is0\r\n        /// <summary>Add <c>is-flex-shrink-1</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-1\")>] Is1\r\n        /// <summary>Add <c>is-flex-shrink-2</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-2\")>] Is2\r\n        /// <summary>Add <c>is-flex-shrink-3</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-3\")>] Is3\r\n        /// <summary>Add <c>is-flex-shrink-4</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-4\")>] Is4\r\n        /// <summary>Add <c>is-flex-shrink-5</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-5\")>] Is5\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextWeight =\r\n\r\n    type Option =\r\n        /// Add `has-text-weight-light`\r\n        | [<CompiledName(\"has-text-weight-light\")>] Light\r\n        /// Add `has-text-weight-normal`\r\n        | [<CompiledName(\"has-text-weight-normal\")>] Normal\r\n        /// Add `has-text-weight-semibold`\r\n        | [<CompiledName(\"has-text-weight-semibold\")>] SemiBold\r\n        /// Add `has-text-weight-bold`\r\n        | [<CompiledName(\"has-text-weight-bold\")>] Bold\r\n        /// Add `has-text-weight-medium`\r\n        | [<CompiledName(\"has-text-weight-medium\")>] Medium\r\n\r\n    let inline internal ofOption opt =\r\n        Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextTransform =\r\n\r\n    type Option =\r\n        /// Add `is-capitalized`\r\n        | [<CompiledName(\"is-capitalized\")>] Capitalized\r\n        /// Add `is-lowercase`\r\n        | [<CompiledName(\"is-lowercase\")>] LowerCase\r\n        /// Add `is-uppercase`\r\n        | [<CompiledName(\"is-uppercase\")>] UpperCase\r\n        /// Add `is-italic`\r\n        | [<CompiledName(\"is-italic\")>] Italic\r\n        /// Add `is-underlined`\r\n        | [<CompiledName(\"is-underlined\")>] Underlined\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Display =\r\n\r\n    type Option =\r\n        | [<CompiledName(\"block\")>] Block\r\n        | [<CompiledName(\"flex\")>] Flex\r\n        | [<CompiledName(\"inline\")>] Inline\r\n        | [<CompiledName(\"inline-block\")>] InlineBlock\r\n        | [<CompiledName(\"inline-flex\")>] InlineFlex\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let internal toDisplayClass screen display =\r\n        let display = Option.toClass display\r\n        let screen = Screen.ToString screen\r\n\r\n        \"is-\" + display + screen\r\n\r\n    let internal toDisplayOnlyClass screen display =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            let display = Option.toClass display\r\n            let screen = Screen.ToString screen\r\n            \"is-\" + display + screen + \"-only\"\r\n\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support display only.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Spacing =\r\n    type TypeAndDirection =\r\n        | [<CompiledName(\"m\")>] Margin\r\n        | [<CompiledName(\"mt\")>] MarginTop\r\n        | [<CompiledName(\"mr\")>] MarginRight\r\n        | [<CompiledName(\"mb\")>] MarginBottom\r\n        | [<CompiledName(\"ml\")>] MarginLeft\r\n        | [<CompiledName(\"my\")>] MarginTopAndBottom\r\n        | [<CompiledName(\"mx\")>] MarginLeftAndRight\r\n        | [<CompiledName(\"p\")>] Padding\r\n        | [<CompiledName(\"pt\")>] PaddingTop\r\n        | [<CompiledName(\"pr\")>] PaddingRight\r\n        | [<CompiledName(\"pb\")>] PaddingBottom\r\n        | [<CompiledName(\"pl\")>] PaddingLeft\r\n        | [<CompiledName(\"py\")>] PaddingTopAndBottom\r\n        | [<CompiledName(\"px\")>] PaddingLeftAndRight\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    type Amount =\r\n        | [<CompiledName(\"auto\")>] IsAuto\r\n        | [<CompiledName(\"0\")>] Is0\r\n        | [<CompiledName(\"1\")>] Is1\r\n        | [<CompiledName(\"2\")>] Is2\r\n        | [<CompiledName(\"3\")>] Is3\r\n        | [<CompiledName(\"4\")>] Is4\r\n        | [<CompiledName(\"5\")>] Is5\r\n        | [<CompiledName(\"6\")>] Is6\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let internal toSpacingClass typ amount =\r\n        let typ = TypeAndDirection.toClass typ\r\n        let amount = Amount.toClass amount\r\n\r\n        typ + \"-\" + amount\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Modifier =\r\n    let internal ofBackground level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"has-background-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> \"has-background-\" + (Reflection.getCaseName level).[3..]\r\n\r\n    let internal ofText level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"has-text-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> \"has-text-\" + (Reflection.getCaseName level).[3..]\r\n\r\n    let internal ofInvisible screen =\r\n        \"is-invisible\" + Screen.ToString screen\r\n\r\n    let internal ofHidden screen =\r\n        \"is-hidden\" + Screen.ToString screen\r\n\r\n    let internal ofInvisibleOnly screen =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-invisible\" + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-invisible-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n    let internal ofHiddenOnly screen =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-hidden\" + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-hidden-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n    type IModifier =\r\n        | BackgroundColor of IColor\r\n        | TextColor of IColor\r\n        | TextWeight of TextWeight.Option\r\n        | TextSize of Screen * TextSize.Option\r\n        | TextSizeOnly of Screen * TextSize.Option\r\n        | TextAlignment of Screen * TextAlignment.Option\r\n        | TextAlignmentOnly of Screen * TextAlignment.Option\r\n        | TextTransform of TextTransform.Option\r\n        | Display of Screen * Display.Option\r\n        | DisplayOnly of Screen * Display.Option\r\n        | [<CompiledName(\"is-clearfix\")>] IsClearfix\r\n        | [<CompiledName(\"is-pulled-left\")>] IsPulledLeft\r\n        | [<CompiledName(\"is-pulled-right\")>] IsPulledRight\r\n        | [<CompiledName(\"is-marginless\")>] IsMarginless\r\n        | [<CompiledName(\"is-paddingless\")>] IsPaddingless\r\n        | [<CompiledName(\"is-overlay\")>] IsOverlay\r\n        | [<CompiledName(\"is-clipped\")>] IsClipped\r\n        | [<CompiledName(\"is-radiusless\")>] IsRadiusless\r\n        | [<CompiledName(\"is-shadowless\")>] IsShadowless\r\n        | [<CompiledName(\"is-unselectable\")>] IsUnselectable\r\n        | [<CompiledName(\"is-clickable\")>] IsClickable\r\n        | [<CompiledName(\"is-relative\")>] IsRelative\r\n        | [<CompiledName(\"is-flex\")>] IsFlex\r\n        | IsInvisible of Screen * bool\r\n        | IsHidden of Screen * bool\r\n        | IsInvisibleOnly of Screen * bool\r\n        | IsHiddenOnly of Screen * bool\r\n        | IsSrOnly\r\n        | IsScreenReaderOnly\r\n        | Spacing of Spacing.TypeAndDirection * Spacing.Amount\r\n        // Flexbox helpers\r\n        | FlexDirection of FlexDirection.Option\r\n        | FlexWrap of FlexWrap.Option\r\n        | FlexJustifyContent of FlexJustifyContent.Option\r\n        | FlexAlignContent of FlexAlignContent.Option\r\n        | FlexAlignItems of FlexAlignItems.Option\r\n        | FlexAlignSelf of FlexAlignSelf.Option\r\n        | FlexGrow of FlexGrow.Option\r\n        | FlexShrink of FlexShrink.Option\r\n\r\n\r\n\r\n                //     | IsGap (screen, size) ->\r\n                // if not (List.contains \"is-variable\" result.Classes) then\r\n                //     result.AddClass(\"is-variable\").AddClass(gapSizeGeneric screen size)\r\n                // else\r\n                //     result.AddClass(gapSizeGeneric screen size)\r\n\r\n\r\n\r\n    let parseModifiers options =\r\n        let parseOptions result option =\r\n            match option with\r\n            | BackgroundColor color             -> (ofBackground color)::result\r\n            | TextColor color                   -> (ofText color)::result\r\n            | TextWeight textWeight             -> (TextWeight.ofOption textWeight)::result\r\n            | TextSize (screen, size)           -> (TextSize.generic screen size)::result\r\n            | TextSizeOnly (screen, size)       -> (TextSize.only screen size)::result\r\n            | TextAlignment (screen, size)      -> (TextAlignment.generic screen size)::result\r\n            | TextAlignmentOnly (screen, size)  -> (TextAlignment.only screen size)::result\r\n            | TextTransform transform           -> (TextTransform.Option.toClass transform)::result\r\n            | Display (screen, display)         -> (Display.toDisplayClass screen display)::result\r\n            | DisplayOnly (screen, display)     -> (Display.toDisplayOnlyClass screen display)::result\r\n            | IsInvisible (screen, b)           -> if b then (ofInvisible screen)::result else result\r\n            | IsInvisibleOnly (screen, b)       -> if b then (ofInvisibleOnly screen)::result else result\r\n            | IsHidden (screen, b)              -> if b then (ofHidden screen)::result else result\r\n            | IsHiddenOnly (screen, b)          -> if b then (ofHiddenOnly screen)::result else result\r\n            | IsSrOnly\r\n            | IsScreenReaderOnly -> \"is-sr-only\"::result\r\n            | IsClearfix\r\n            | IsPulledLeft\r\n            | IsPulledRight\r\n            | IsMarginless\r\n            | IsPaddingless\r\n            | IsOverlay\r\n            | IsClipped\r\n            | IsRadiusless\r\n            | IsShadowless\r\n            | IsClickable\r\n            | IsUnselectable\r\n            | IsFlex\r\n            | IsRelative -> (Reflection.getCaseName option)::result\r\n            | Spacing (typ, amount) -> (Spacing.toSpacingClass typ amount)::result\r\n            | FlexDirection direction ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexDirection.Option.toClass direction)::result\r\n                else\r\n                    (FlexDirection.Option.toClass direction)::result\r\n            | FlexWrap option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexWrap.Option.toClass option)::result\r\n                else\r\n                    (FlexWrap.Option.toClass option)::result\r\n            | FlexJustifyContent option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexJustifyContent.Option.toClass option)::result\r\n                else\r\n                    (FlexJustifyContent.Option.toClass option)::result\r\n            | FlexAlignContent option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexAlignContent.Option.toClass option)::result\r\n                else\r\n                    (FlexAlignContent.Option.toClass option)::result\r\n            | FlexAlignItems option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexAlignItems.Option.toClass option)::result\r\n                else\r\n                    (FlexAlignItems.Option.toClass option)::result\r\n\r\n            | FlexAlignSelf option ->\r\n                (FlexAlignSelf.Option.toClass option)::result\r\n\r\n            | FlexGrow size ->\r\n                (FlexGrow.Option.toClass size)::result\r\n\r\n            | FlexShrink size ->\r\n                (FlexShrink.Option.toClass size)::result\r\n\r\n        options |> List.fold parseOptions []\r\n\r\n[<AutoOpen>]\r\nmodule Common =\r\n    type GenericOption =\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    type GenericOptions =\r\n        { Props : IHTMLProp list\r\n          Classes : string list\r\n          RemovedClasses : string list }\r\n\r\n        static member Empty =\r\n            { Props = []; Classes = []; RemovedClasses = [] }\r\n\r\n        static member Parse(options, parser, ?baseClass, ?baseProps) =\r\n            let result = options |> List.fold parser GenericOptions.Empty\r\n\r\n            let result =\r\n                match baseClass with\r\n                | Some baseClass -> result.AddClass(baseClass)\r\n                | None -> result\r\n\r\n            match baseProps with\r\n            | Some baseProps -> result.AddProps(baseProps)\r\n            | None -> result\r\n\r\n        member this.AddProp(prop : IHTMLProp) =\r\n            { this with Props = prop::this.Props }\r\n\r\n        member this.AddProps(props : IHTMLProp list) =\r\n            { this with Props = props@this.Props }\r\n\r\n        member this.AddClass(cl: string) =\r\n            { this with Classes = cl::this.Classes }\r\n\r\n        member this.RemoveClass(cl: string) =\r\n            { this with RemovedClasses = cl::this.RemovedClasses }\r\n\r\n        member this.AddCaseName(case: 'T) =\r\n            Reflection.getCaseName case |> this.AddClass\r\n\r\n        member this.AddModifiers(modifiers) =\r\n            { this with Classes = (modifiers |> Modifier.parseModifiers) @ this.Classes }\r\n\r\n        member this.ToAttributes() =\r\n            match this.Classes |> List.filter (fun cls -> not (System.String.IsNullOrEmpty cls) && not (List.contains cls this.RemovedClasses)) with\r\n            | [] -> this.Props\r\n            | classes -> (classes |> String.concat \" \" |> ClassName :> _) :: this.Props\r\n\r\n        /// Convert to standard element\r\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement list -> ReactElement, ?children): ReactElement =\r\n            let children = defaultArg children []\r\n            el (this.ToAttributes ()) children\r\n\r\n        /// Convert to self closing element\r\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement): ReactElement =\r\n            el (this.ToAttributes ())\r\n\r\n    let parseOptions (result : GenericOptions) option =\r\n        match option with\r\n        | Props props -> result.AddProps props\r\n        | CustomClass customClass -> result.AddClass customClass\r\n        | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n    module Helpers =\r\n\r\n        [<System.Obsolete(\"Use GenericOptions.Parse. This build an abstraction layer usable by all the components and helps reduce the bundle size\")>]\r\n        let classes std (options : string option list) (booleans: (string * bool) list) =\r\n            let std = (std, options) ||> List.fold (fun complete option ->\r\n                match option with\r\n                | Some name -> complete + \" \" + name\r\n                | None -> complete )\r\n            (std, booleans) ||> List.fold (fun complete (name, flag) ->\r\n                if flag then complete + \" \" + name else complete)\r\n            |> ClassName :> IHTMLProp\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Text =\r\n    open Fable.React\r\n\r\n    let p (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(p, children)\r\n\r\n    let div (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(div, children)\r\n\r\n    let span (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(span, children)\r\n","import { equals } from \"./Util.js\";\nimport { Union } from \"./Types.js\";\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function keyValueList(fields, caseRule = CaseRules.None) {\n    const obj = {};\n    const definedCaseRule = caseRule;\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    function assign(key, caseRule, value) {\n        key = changeCase(key, caseRule);\n        obj[key] = value;\n    }\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (kvPair instanceof Union) {\n            const name = kvPair.cases()[kvPair.tag];\n            kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    assign(kvPair[0], caseRule, true);\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    assign(kvPair[0], caseRule, value);\n                    break;\n                default:\n                    assign(kvPair[0], caseRule, kvPair.slice(1));\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            assign(kvPair, caseRule, true);\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return obj;\n}\n// TODO: Move these methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    if (map.has(key)) {\n        defaultValue.contents = map.get(key);\n        return true;\n    }\n    return false;\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule File =\r\n\r\n    type Option =\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Size of ISize\r\n        /// Add `is-focused` class if true\r\n        | [<CompiledName(\"is-focused\")>]IsFocused of bool\r\n        /// Add `is-active` class if true\r\n        | [<CompiledName(\"is-active\")>]IsActive of bool\r\n        /// Add `is-hovered` class if true\r\n        | [<CompiledName(\"is-hovered\")>]IsHovered of bool\r\n        /// Add `is-fullwidth` class\r\n        | [<CompiledName(\"is-fullwidth\")>]IsFullWidth\r\n        /// Add `is-centered` class\r\n        | [<CompiledName(\"is-centered\")>]IsCentered\r\n        /// Add `is-right` class\r\n        | [<CompiledName(\"is-right\")>]IsRight\r\n        /// Add `is-boxed` class\r\n        | [<CompiledName(\"is-boxed\")>]IsBoxed\r\n        /// Add `has-name` class\r\n        | [<CompiledName(\"has-name\")>]HasName\r\n        /// Add `is-empty` class if true\r\n        | [<CompiledName(\"is-empty\")>]IsEmpty of bool\r\n        | Color of IColor\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <div class=\"file\"></div>\r\n    let file (options : Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | Size size -> ofSize size |> result.AddClass\r\n            | IsFullWidth\r\n            | IsCentered\r\n            | IsRight\r\n            | IsBoxed\r\n            | HasName -> result.AddCaseName option\r\n            | Color color -> ofColor color |> result.AddClass\r\n            | IsFocused state\r\n            | IsActive state\r\n            | IsHovered state\r\n            | IsEmpty state -> if state then result.AddCaseName option else result\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"file\").ToReactElement(div, children)\r\n\r\n    /// Generate <input type=\"file\" class=\"file-input\"/>\r\n    let input (options : GenericOption list) =\r\n        GenericOptions.Parse(options, parseOptions, \"file-input\", [Type \"file\" :> IHTMLProp]).ToReactElement(input)\r\n\r\n    /// Generate <span class=\"file-cta\"></span>\r\n    let cta (options : GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions, \"file-cta\").ToReactElement(span, children)\r\n\r\n    /// Generate <span class=\"file-name\"></span>\r\n    let name (options : GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions, \"file-name\").ToReactElement(span, children)\r\n\r\n    /// Generate <span class=\"file-icon\"></span>\r\n    let icon (options : GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions, \"file-icon\").ToReactElement(span, children)\r\n\r\n    module Label =\r\n\r\n        /// Generate <span class=\"file-label\"></span>\r\n        let span (options : GenericOption list) children =\r\n            GenericOptions.Parse(options, parseOptions, \"file-label\").ToReactElement(span, children)\r\n\r\n        /// Generate <label class=\"file-label\"></label>\r\n        let label (options : GenericOption list) children =\r\n            GenericOptions.Parse(options, parseOptions, \"file-label\").ToReactElement(label, children)\r\n","module Feliz.Bulma.ElementBuilders\r\n\r\nopen Feliz\r\nopen Feliz.Bulma\r\n\r\nmodule Helpers =\r\n    let [<Literal>] private ClassName = \"className\"\r\n\r\n    let inline internal getClasses (xs:IReactProperty list) =\r\n        xs\r\n        |> List.choose (unbox<string * obj> >> function\r\n            | (k, v) when k = ClassName -> Some (string v)\r\n            | _ -> None)\r\n\r\n    let extractClasses (xs:IReactProperty list) =\r\n        xs\r\n        |> List.rev\r\n        |> List.fold (fun (classes, props) x ->\r\n            match unbox<string * obj> x with\r\n            | (k, v) when k = ClassName -> string v :: classes, props\r\n            | _ -> classes, x :: props) ([], [])\r\n\r\n    let combineClasses cn (xs:IReactProperty list) =\r\n        xs\r\n        |> extractClasses\r\n        |> fun (classes, props) -> (cn :: classes |> prop.classes) :: props\r\n\r\nmodule Div =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.div (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.div [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.div [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.div [ prop.className cn; prop.text value ]\r\n\r\nmodule Nav =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.nav (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.nav [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Article =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.article (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.article [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Section =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.section (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.section [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Footer =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.footer (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.footer [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Label =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.label (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.label [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.label [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.label [ prop.className cn; prop.text value ]\r\n\r\nmodule Input =\r\n    let inline propsWithType (cn:string) (typ: IReactProperty) (xs:IReactProperty list) =\r\n        Html.input (typ :: Helpers.combineClasses cn xs)\r\n\r\nmodule Textarea =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.textarea (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.textarea [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Button =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.button (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.button [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.button [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.button [ prop.className cn; prop.text value ]\r\n\r\nmodule Span =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.span (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.span [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.span [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.span [ prop.className cn; prop.text value ]\r\n\r\nmodule Figure =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.figure (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.figure [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Progress =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.progress (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.progress [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.progress [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.progress [ prop.className cn; prop.text value ]\r\n\r\nmodule Table =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.table (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.table [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule H1 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h1 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h1 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h1 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h1 [ prop.className cn; prop.text value ]\r\n\r\nmodule H2 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h2 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h2 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h2 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h2 [ prop.className cn; prop.text value ]\r\n\r\nmodule H3 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h3 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h3 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h3 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h3 [ prop.className cn; prop.text value ]\r\n\r\nmodule H4 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h4 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h4 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h4 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h4 [ prop.className cn; prop.text value ]\r\n\r\nmodule H5 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h5 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h5 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h5 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h5 [ prop.className cn; prop.text value ]\r\n\r\nmodule H6 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h6 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h6 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h6 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h6 [ prop.className cn; prop.text value ]\r\n\r\nmodule Hr =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.hr (Helpers.combineClasses cn xs)\r\n\r\nmodule Aside =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.aside (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.aside [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule P =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.p (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.p [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.p [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.p [ prop.className cn; prop.text value ]\r\n\r\nmodule Ul =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.ul (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.ul [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Li =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.li (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.li [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Header =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.header (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.header [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule A =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.a (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.a [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.a [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.a [ prop.className cn; prop.text value ]\r\n","module Client.Index\n\nopen Browser\nopen Browser.Types\nopen Elmish\nopen Fable.Core\nopen Fable.React\nopen Fable.React.Props\nopen Feliz\nopen Feliz.Bulma\nopen Fulma\n\nopen Client.CineMol.Types\nopen Client.CineMol.Parsing\nopen Client.CineMol.Encoding\nopen Client.CineMol.Drawing\n\n// ============================================================================\n// Rendering SVG.\n// ============================================================================\nlet render =\n    fun (vb: ViewBox option, options: DrawOptions, rot: Rotation, zoom: Zoom, sdf: string) ->\n        async {\n            let molToDraw =\n                sdf\n                |> parseSdf\n                |> (fun mols -> mols.[0])\n\n            let svg, vb: string * ViewBox option =\n                if molToDraw.Atoms.Length = 0 then\n                    \"\", None\n                else\n                    let svg, vb = draw vb options rot zoom molToDraw\n                    svg, Some vb\n\n            return (svg, svg |> toBase64String, vb)\n        }\n\n// ============================================================================\n// Mouse events for SVG.\n// ============================================================================\ntype MousePosition = { X: float; Y: float }\n\ntype WheelPosition = { Delta: float }\n\ntype DragTarget =\n    | Dragging\n    | NoTarget\n\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    let ups messageCtor =\n        let handler dispatch =\n            window.addEventListener(\"mouseup\", fun _ -> dispatch messageCtor)\n        [ handler ]\n\n    let move messageCtor =\n        let handler dispatch =\n            window.addEventListener(\"mousemove\", fun ev ->\n                let ev = ev :?> MouseEvent\n                { X = ev.pageX; Y = ev.pageY } |> messageCtor |> dispatch)\n        [ handler ]\n\n    let wheel messageCtor =\n        let handler dispatch =\n            window.addEventListener(\"mousewheel\", fun ev ->\n                let ev = ev :?> MouseWheelEvent\n                { Delta = ev.wheelDelta } |> messageCtor |> dispatch)\n        [ handler ]\n\n// ============================================================================\n// Model.\n// ============================================================================\ntype ViewerBackgroundStyle = | Dark | Light\nwith member x.toHex = match x with | Dark -> \"#000000\" | Light -> \"#FFFFFF\"\n\ntype Model = {\n    Sdf: string\n    Svg: string\n    EncodedSvg: string\n    ViewBox: ViewBox option\n    DrawOptions: DrawOptions\n    Rotation: Rotation\n    Zoom: Zoom\n    DragTarget: DragTarget\n    ViewerBackgroundStyle: ViewerBackgroundStyle\n}\n    with\n    member x.renderArgs = x.ViewBox, x.DrawOptions, x.Rotation, x.Zoom, x.Sdf\n    static member init = {\n            Sdf = \"\"\n            Svg = \"\"\n            EncodedSvg = \"\"\n            DrawOptions = DrawOptions.init\n            Rotation = Rotation.init\n            Zoom = Zoom.init\n            ViewBox = None\n            DragTarget = NoTarget\n            ViewerBackgroundStyle = Dark\n        }\n\ntype Msg =\n    /// GUI buttons.\n    | UploadSdf of name: string * content: string\n    | ResetViewer\n    | DownloadSvg\n    | ToggleShowHydrogenAtoms\n    | ToggleDepiction\n    | ToggleBackgroundStyle\n\n    /// Rendering SVG.\n    | Render\n    | GotEncoding of svg: string * encodedSvg: string * viewBox: ViewBox option\n    | SetRotation of MousePosition\n\n    /// Mouse events for dragging SVG.\n    | MouseUp\n    | MouseMove of MousePosition\n    | MouseDrag of MousePosition\n    | MouseDragStarted of MousePosition\n    | MouseDragEnded\n\n    /// Mouse events for zooming in and out on SVG.\n    | WheelScroll of WheelPosition\n\n// ============================================================================\n// Actions.\n// ============================================================================\nlet downloadSvgEvent (svg : string) =\n    let anchor = Dom.document.createElement \"a\"\n    let contentReplace (oldValue: string) (newValue: string) (msg: string) =\n        msg.Replace(oldValue, newValue)\n    let encodedContent =\n        svg\n        |> sprintf \"data:text/plain;charset=utf-8,%s\"\n        |> JS.encodeURI\n        |> contentReplace \"#\" \"%23\"\n    anchor.setAttribute(\"href\", encodedContent)\n    anchor.setAttribute(\"download\", \"model.svg\")\n    anchor.click()\n\n// ============================================================================\n// Initializing model.\n// ============================================================================\nlet init () : Model * Cmd<Msg> =\n    let cmd =\n        Cmd.batch [\n            Cmd.ups MouseUp\n            Cmd.move MouseMove\n            Cmd.wheel WheelScroll\n        ]\n    Model.init, cmd\n\n// ============================================================================\n// Updating model.\n// ============================================================================\nlet update (msg: Msg) (model: Model) : Model * Cmd<Msg> =\n    match msg with\n\n    /// Upload SDF.\n    | UploadSdf (_, content) ->\n        { model with Sdf = content }, Cmd.ofMsg Render\n\n    /// Reset viewer.\n    | ResetViewer ->\n        let newModel = { Model.init with ViewerBackgroundStyle = model.ViewerBackgroundStyle }\n        newModel, Cmd.OfAsync.perform render newModel.renderArgs GotEncoding\n\n    /// Download SVG.\n    | DownloadSvg ->\n        downloadSvgEvent model.Svg\n        model, Cmd.none\n\n    /// Toggle show hydrogens.\n    | ToggleShowHydrogenAtoms ->\n        let toggle = not model.DrawOptions.ShowHydrogenAtoms\n\n        let newModel = {\n            model with\n                DrawOptions = {\n                    model.DrawOptions with\n                        ShowHydrogenAtoms = toggle\n                }\n            }\n\n        newModel, Cmd.OfAsync.perform render newModel.renderArgs GotEncoding\n\n    /// Toggle depiction.\n    | ToggleDepiction ->\n        let toggle =\n            if model.DrawOptions.Depiction = Depiction.Filled then\n                Depiction.BallAndStick\n            elif model.DrawOptions.Depiction = Depiction.BallAndStick then\n                Depiction.Wire\n            else\n                Depiction.Filled\n\n        let newModel = {\n            model with\n                DrawOptions = {\n                    model.DrawOptions with\n                        Depiction = toggle\n                }\n            }\n\n        newModel, Cmd.OfAsync.perform render newModel.renderArgs GotEncoding\n\n    /// Toggle backgroundc color\n    | ToggleBackgroundStyle ->\n        let toggle = if model.ViewerBackgroundStyle = Dark then Light else Dark\n        let newModel = { model with ViewerBackgroundStyle = toggle }\n        newModel, Cmd.none\n\n    /// Render SVG from SDF message.\n    | Render ->\n        model, Cmd.OfAsync.perform render model.renderArgs GotEncoding\n\n    /// Store rendered, encoded SVG in model message.\n    | GotEncoding (svg, encodedSvg, viewBox) ->\n        { model with\n            EncodedSvg = encodedSvg\n            Svg = svg\n            ViewBox = viewBox\n        }, Cmd.none\n\n    /// Set new rotation of molecule in SVG message.\n    | SetRotation position ->\n        { model with\n            Rotation = {\n                model.Rotation with\n                    AxisX = position.X\n                    AxisY = position.Y\n            }\n        },\n        Cmd.OfAsync.perform render model.renderArgs GotEncoding\n\n    /// Mouse drag messages for rendered, encoded SVG in model.\n    | MouseUp ->\n        model, Cmd.ofMsg MouseDragEnded\n\n    | MouseMove (position: MousePosition) ->\n        model, Cmd.ofMsg (MouseDrag position)\n\n    | MouseDragStarted _ ->\n        { model with DragTarget = Dragging }, Cmd.none\n\n    | MouseDragEnded ->\n        { model with DragTarget = NoTarget }, Cmd.none\n\n    | MouseDrag (position: MousePosition) ->\n        match model.DragTarget with\n        | Dragging -> model, Cmd.ofMsg (SetRotation position)\n        | _ -> model, Cmd.none\n\n    /// Mouse scroll message for rendered, encoded SVG in model.\n    | WheelScroll (wheel: WheelPosition) ->\n        let incr = if wheel.Delta < 0.0 then -0.05 else +0.05\n        let newRatio =\n            let newRatio = model.Zoom.Ratio + incr\n            if newRatio < 0.0 then 0.0 else newRatio\n        let newModel = { model with Zoom = { model.Zoom with Ratio = newRatio } }\n        newModel, Cmd.OfAsync.perform render newModel.renderArgs GotEncoding\n\n// ============================================================================\n// Buttons\n// ============================================================================\nlet private uploadFileEvent dispatch =\n    Fulma.File.input [\n        Props [\n            OnInput (\n                fun ev ->\n                    let file = (ev.target :?> HTMLInputElement).files.[0]\n                    let name = file.name\n                    let reader = FileReader.Create()\n                    reader.onload <- fun _ ->\n                        let content = reader.result :?> string\n                        (name, content) |> UploadSdf |> dispatch\n                    reader.readAsText file\n\n                    /// Setting value to empty string removes cached filename\n                    /// again and makes sure you can upload the same file\n                    /// (after refresh) for a second time.\n                    (ev.target :?> HTMLInputElement).value <- \"\"\n            )\n        ]\n    ]\n\nlet private uploadFileButton dispatch =\n    Bulma.button.a [\n        prop.className \"sidebar-button\"\n        prop.children [\n            Html.i [ prop.className \"fas fa-upload\" ]\n            uploadFileEvent dispatch\n        ]\n    ]\n\nlet private resetViewerButton dispatch =\n    Bulma.button.a [\n        prop.className \"sidebar-button\"\n        prop.children [ Html.i [ prop.className \"fas fa-sync\" ] ]\n        prop.onClick (fun _ -> ResetViewer |> dispatch)\n    ]\n\nlet private downloadButton dispatch =\n    Bulma.button.a [\n        prop.className \"sidebar-button\"\n        prop.children [ Html.i [ prop.className \"fas fa-download\" ] ]\n        prop.onClick (fun _ -> DownloadSvg |> dispatch)\n    ]\n\nlet private showHydrogensButton dispatch =\n    Bulma.button.a [\n        prop.className \"sidebar-button\"\n        prop.style [ style.fontWeight 700; style.color \"#000000\" ]\n        prop.children [ Html.span \"Hs\" ]\n        prop.onClick (fun _ -> ToggleShowHydrogenAtoms |> dispatch)\n    ]\n\nlet private changeDepictionButton dispatch =\n    Bulma.button.a [\n        prop.className \"sidebar-button\"\n        prop.children [ Html.i [ prop.className \"fas fa-eye\" ] ]\n        prop.onClick (fun _ -> ToggleDepiction |> dispatch)\n    ]\n\nlet private changeBackgroundStyle dispatch =\n    Bulma.button.a [\n        prop.className \"sidebar-button\"\n        prop.children [ Html.i [ prop.className \"fas fa-adjust\" ] ]\n        prop.onClick (fun _ -> ToggleBackgroundStyle |> dispatch)\n    ]\n\n// ============================================================================\n// GUI element: SVG viewer.\n// ============================================================================\nlet private svgViewer (dispatch: Msg -> unit) model =\n    let svg =\n        match model.EncodedSvg with\n        | e when e.Length = 0 ->\n            let emptySvg = $\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<svg id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"{0} {0} {100} {100}\\\"><style></style></svg>\"\n            let encoded = emptySvg |> toBase64String\n            $\"data:image/svg+xml;base64,{encoded}\"\n        | _ ->\n            $\"data:image/svg+xml;base64,{model.EncodedSvg}\"\n\n    let size =\n        let width = int window.innerWidth - 50\n        let height = int window.innerHeight\n        if width < height then\n            [ style.width width; style.height width ]\n        else\n            [ style.width height; style.height height ]\n\n    Html.div [\n        prop.className \"viewer-window\"\n        prop.style size\n        prop.onMouseDown (fun ev ->\n            ev.preventDefault()\n            let coordsMouseDown = { X = ev.pageX; Y = ev.pageY }\n            dispatch (MouseDragStarted coordsMouseDown))\n        prop.children [\n            img [\n                Class \"viewer-svg\"\n                Style [ BackgroundColor model.ViewerBackgroundStyle.toHex ]\n                Src svg\n            ]\n        ]\n    ]\n\n// ============================================================================\n// Main view.\n// ============================================================================\n\n/// <container>\n///     Main view.\n/// </container>\nlet view (model: Model) (dispatch: Msg -> unit) =\n    Html.div [\n        prop.className \"cinemol\"\n        prop.style [ style.backgroundColor model.ViewerBackgroundStyle.toHex ]\n        prop.children [\n            Html.div [\n                prop.className \"sidebar\"\n                prop.children [\n                    resetViewerButton dispatch\n                    uploadFileButton dispatch\n                    downloadButton dispatch\n                    showHydrogensButton dispatch\n                    changeDepictionButton dispatch\n                    changeBackgroundStyle dispatch\n                ]\n            ]\n            svgViewer dispatch model\n        ]\n    ]","namespace Elmish.React\n\n[<AutoOpen>]\nmodule Helpers =\n    open Fable.React.Props\n    open Fable.Core.JsInterop\n\n    /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n    /// Can be used instead of `DefaultValue` and `Value` props to override input box value.\n    let inline valueOrDefault value =\n        Ref <| (fun e -> if e |> isNull |> not && !!e?value <> !!value then e?value <- !!value)\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n\n        open Fable.React\n        open Browser\n        open Elmish\n\n        let withReactBatchedUsing lazyView2With placeholderId (program:Program<_,_,_,_>) =\n            let mutable lastRequest = None\n            let setState model dispatch =\n                match lastRequest with\n                | Some r -> window.cancelAnimationFrame r\n                | _ -> ()\n\n                lastRequest <- Some (window.requestAnimationFrame (fun _ ->\n                    ReactDom.render(\n                        lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                        document.getElementById placeholderId\n                    )))\n\n            program\n            |> Program.withSetState setState\n\n        let withReactSynchronousUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n        let withReactHydrateUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.hydrate(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n    /// NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n    let withReactBatched placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// New renders are triggered immediately after an update.\n    let withReactSynchronous placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let withReactUnoptimized placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n    let withReactHydrate placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactHydrateUsing lazyView2With placeholderId program\n","(**\nProgram\n---------\nCore abstractions for creating and running the dispatch loop.\n\n*)\n\nnamespace Elmish\n\n\n/// Program type captures various aspects of program behavior\ntype Program<'arg, 'model, 'msg, 'view> = private {\n    init : 'arg -> 'model * Cmd<'msg>\n    update : 'msg -> 'model -> 'model * Cmd<'msg>\n    subscribe : 'model -> Cmd<'msg>\n    view : 'model -> Dispatch<'msg> -> 'view\n    setState : 'model -> Dispatch<'msg> -> unit\n    onError : (string*exn) -> unit\n    syncDispatch: Dispatch<'msg> -> Dispatch<'msg>\n}\n\n/// Program module - functions to manipulate program instances\n[<RequireQualifiedAccess>]\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule Program =\n    /// Typical program, new commands are produced by `init` and `update` along with the new state.\n    let mkProgram \n        (init : 'arg -> 'model * Cmd<'msg>) \n        (update : 'msg -> 'model -> 'model * Cmd<'msg>)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init\n          update = update\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Simple program that produces only new state with `init` and `update`.\n    let mkSimple \n        (init : 'arg -> 'model) \n        (update : 'msg -> 'model -> 'model)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init >> fun state -> state,Cmd.none\n          update = fun msg -> update msg >> fun state -> state,Cmd.none\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Subscribe to external source of events.\n    /// The subscription is called once - with the initial model, but can dispatch new messages at any time.\n    let withSubscription (subscribe : 'model -> Cmd<'msg>) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let sub model =\n            Cmd.batch [ program.subscribe model\n                        subscribe model ]\n        { program with subscribe = sub }\n\n    /// Trace all the updates to the console\n    let withConsoleTrace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let traceInit (arg:'arg) =\n            let initModel,cmd = program.init arg\n            Log.toConsole (\"Initial state:\", initModel)\n            initModel,cmd\n\n        let traceUpdate msg model =\n            Log.toConsole (\"New message:\", msg)\n            let newModel,cmd = program.update msg model\n            Log.toConsole (\"Updated state:\", newModel)\n            newModel,cmd\n\n        { program with\n            init = traceInit \n            update = traceUpdate }\n\n    /// Trace all the messages as they update the model\n    let withTrace trace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let update msg model =\n            let state,cmd = program.update msg model\n            trace msg state\n            state,cmd\n        { program\n            with update = update }\n\n    /// Handle dispatch loop exceptions\n    let withErrorHandler onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = onError }\n\n    /// For library authors only: map existing error handler and return new `Program` \n    let mapErrorHandler map (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = map program.onError }\n\n    /// For library authors only: get the current error handler \n    let onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        program.onError\n\n    /// For library authors only: function to render the view with the latest state \n    let withSetState (setState:'model -> Dispatch<'msg> -> unit)\n                     (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with setState = setState }\n\n    /// For library authors only: return the function to render the state \n    let setState (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.setState\n\n    /// For library authors only: return the view function \n    let view (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.view\n\n    /// For library authors only: function to synchronize the dispatch function\n    let withSyncDispatch (syncDispatch:Dispatch<'msg> -> Dispatch<'msg>)\n                         (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with syncDispatch = syncDispatch }\n\n    /// For library authors only: map the program type\n    let map mapInit mapUpdate mapView mapSetState mapSubscribe\n            (program: Program<'arg, 'model, 'msg, 'view>) =\n        { init = mapInit program.init\n          update = mapUpdate program.update\n          view = mapView program.view\n          setState = mapSetState program.setState\n          subscribe = mapSubscribe program.subscribe\n          onError = program.onError\n          syncDispatch = id }\n\n    /// Start the program loop.\n    /// arg: argument to pass to the init() function.\n    /// program: program created with 'mkSimple' or 'mkProgram'.\n    let runWith (arg: 'arg) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let (model,cmd) = program.init arg\n        let rb = RingBuffer 10\n        let mutable reentered = false\n        let mutable state = model        \n        let rec dispatch msg = \n            if reentered then\n                rb.Push msg\n            else\n                reentered <- true\n                let mutable nextMsg = Some msg\n                while Option.isSome nextMsg do\n                    let msg = nextMsg.Value\n                    try\n                        let (model',cmd') = program.update msg state\n                        program.setState model' syncDispatch\n                        cmd' |> Cmd.exec (fun ex -> program.onError (sprintf \"Error in command while handling: %A\" msg, ex)) syncDispatch\n                        state <- model'\n                    with ex ->\n                        program.onError (sprintf \"Unable to process the message: %A\" msg, ex)\n                    nextMsg <- rb.Pop()\n                reentered <- false\n        and syncDispatch = program.syncDispatch dispatch            \n\n        program.setState model syncDispatch\n        let sub = \n            try \n                program.subscribe model \n            with ex ->\n                program.onError (\"Unable to subscribe:\", ex)\n                Cmd.none\n        Cmd.batch [sub; cmd]\n        |> Cmd.exec (fun ex -> program.onError (\"Error intitializing:\", ex)) syncDispatch\n\n    /// Start the dispatch loop with `unit` for the init() function.\n    let run (program: Program<unit, 'model, 'msg, 'view>) = runWith () program\n","module App\n\nopen Client\nopen Index\nopen Elmish\nopen Elmish.React\n\n#if DEBUG\nopen Elmish.Debug\nopen Elmish.HMR\n#endif\n\nProgram.mkProgram init update view\n#if DEBUG\n|> Program.withConsoleTrace\n#endif\n|> Program.withReactSynchronous \"elmish-app\"\n#if DEBUG\n|> Program.withDebugger\n#endif\n|> Program.run"],"names":["x","Array","isArray","ArrayBuffer","isView","Dispose","sameConstructor","y","Object","getPrototypeOf","constructor","Enumerator","iter","this","current","cur","next","value","done","Error","o","GetEnumerator","Symbol","iterator","en","hasNext","undefined","padWithZeros","i","length","str","toString","date","date1","offset","kind","getTimezoneOffset","radix","ObjectRef","static","idMap","has","set","count","get","stringHash","s","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","GetHashCode","isHashable","arrayHash","Date","getTime","dateHash","values","map","v","id","equalArraysWith","eq","Equals","isEquatable","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","compareArrays","comp","j","compareArraysWith","compare","CompareTo","isComparable","key","compareObjects","max","comparer","createObj","fields","obj","kv","WeakMap","CURRIED","arity","f","uncurried","args","res","_curry","arg","concat","callStack","self","seqToString","cons","entries","k","join","name","String","cases","tag","toJSON","fieldStr","withParens","indexOf","unionToString","splice","other","recordToJSON","recordToString","recordGetHashCode","recordEquals","thisNames","recordCompareTo","result","FSharpRef","contentsOrGetter","setter","getter","contents","dateOffsetToString","isMinus","minutes","Math","abs","dateToHalfUTCString","half","toISOString","substring","dateToStringWithCustomFormat","format","utc","replace","match","rep","Number","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","isNaN","symbol","sd","toPrecision","dp","toExponential","toHex","pattern","options","flags","RegExp","reg","input","startAt","lastIndex","exec","fsFormatRegExp","printf","cont","strParts","matches","strIdx","matchIndex","index","push","createPrinter","toText","continuePrint","formatReplacement","padLength","precision","sign","toLowerCase","isLessThan","multiply","parseInt","toFixed","toUpperCase","_provider","_a","_b","_c","d","dateWithOffset","dateToISOStringWithOffset","dateToStringWithOffset","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","dateToStringWithKind","zeroFlag","minusFlag","ch","padLeft","_strParts","_matches","_result","padArg","slice","_padLength","isNullOrEmpty","delimiter","xs","from","isRight","Helpers_allocateArrayFromCons","fill","target","targetIndex","start","source","array1","array2","differentLengths","head","tail","super","xs_1_mut","ys_1_mut","loop","xs_1","ys_1","matchValue","xt","yt","i_mut","h_mut","t","_key","c","ListEnumerator$1","it","__","FSharpList_get_Empty","FSharpList_Cons_305B8EAC","FSharpList__get_IsEmpty","FSharpList__get_Head","FSharpList__get_Tail","FSharpList__get_Length","folder","state","acc","action","unitVar0","ofArrayWithTail","tail_1","ys","root","node","t_2","setPrototypeOf","prototype","Trampoline","callCount","maxTrampolineCallCount","incrementAndCheck","hijack","setTimeout","ctx","cancelToken","isCancelled","onCancel","trampoline","err","onError","Bind","computation","binder","onSuccess","ex","Combine","computation1","computation2","Delay","generator","For","sequence","body","While","Return","ReturnFrom","TryFinally","compensation","TryWith","catchHandler","ex2","Using","resource","guard","Zero","FSharpChoice$2","emptyContinuation","_x","defaultCancellationToken","cancelled","_id","_cancelled","_listeners","Map","cancel","listener","addListener","removeListener","delete","register","$","startImmediate","cancellationToken","continuation","exceptionContinuation","cancellationContinuation","startWithContinuations","Some","delegates","Add","_addHandler","Publish","Trigger","senderOrValue","valueOrUndefined","sender","forEach","AddHandler","handler","RemoveHandler","_removeHandler","Subscribe","callback","OnNext","onNext","onCompleted","OnError","_e","OnCompleted","interval","returnVal","_enabled","_isDisposed","_intervalId","_timeoutId","Interval","AutoReset","_elapsed","Elapsed","Enabled","setInterval","clearTimeout","clearInterval","Close","Start","Stop","dispatch","cmd","call","cmds","lists","enumerator","xs_6","msg","task","ofSuccess","work","Choice_makeChoice1Of2","_arg1","r","Enumerator_notStarted","Enumerator_alreadyFinished","Enumerator_Seq","e","Enumerator_FromFunctions$1","dispose","Enumerator_noReset","Enumerator_FromFunctions$1_$ctor_58C54629","Enumerator_generateWhileSome","openf","compute","closef","curr","started","x_1","finish","matchValue_1","mkSeq","Enumerator_Seq_$ctor_673A07F2","argName","Operators_NullArg","sources","outerOpt","innerOpt","finished","inner","outer","copyOfStruct","inner_1","outer_1","Enumerator_concat","ar","xs_3","xs_5","ofSeq","mapping","create","e_1","_","Enumerator_enumerateThenFinally","integralRangeStep","step","stop","zero","add","stepFn","stepComparedWithZero","stepGreaterThanZero","comparedWithLast","makeRangeStepFunction","st_1","Enumerator_unfold","rangeDouble","size","wix","rix","items","rix'","item","wix'","ix","props","nextProps","_nextState","model","alpha","patternInput","RGB","style","atomType","p1","p2","X","Y","p","Z","u","cameraPerpendicular","cameraHorizon","cameraForward","pov","focalLength","scaleFactor","perspectiveProjection","pointVector","physicalProjection","NumberStyles","getRange","unsigned","bitsize","prefix","digits","AllowHexSpecifier","getRadix","invalidDigits","getInvalidDigits","test","regexMatch","validResponse","isValid","umin","umax","min","list2","d_cap","defValue","n","m","pow","floor","round","StringBuilder","capacity","buf","StringBuilder_$ctor","_arg1_0","_arg1_1","_arg1_2","_arg1_3","atom","atoms","writeAtomDefs","l","atomIdx","drawnAtoms","bonds","findAtom","bond","p3","sb","depiction","startAtom","sProj","eProj","axis","rads","rad","tupledArg","viewBox","rotation","zoom","mol","rotateAtoms","AxisY","AxisX","Atoms","offsetViewBox","a","reduction","array","reduction_1","Compare","distPovOrigin","ShowHydrogenAtoms","perspectiveMol","ratio","Center","Radius","b","Scaling","Bonds","changeDistanceToAtoms","Ratio","projection","project","writeSVG","Depiction","perspectiveAtom","Index","AtomType","message","toEncode","inArray","fromCharCode","btoa","notSupported","encoding","UnexpectedCharToEncode","TypeInfo","fullname","generics","construct","parent","enumCases","fullName","getHashCode","getGenerics","t1","t2","getRecordElements","k1","v1","k2","v2","elemType","getElementType","assertUnion","case","screen","cl","option","modifiers","arg10","level","display","typ","amount","direction","dashify","separator","charAt","caseRule","definedCaseRule","fail","kvPair","assign","changeCase","parser","baseClass","baseProps","cls","cn","classes","vb","rot","sdf","molToDraw","atomCount","bondCount","line","z","activePatternResult24007","atomLine","g","tryCastToAtom","center","tryCastToFloat","radius","getAtomRadius","bondType","activePatternResult24006","bondLine","BondType","tryCastToBond","tryCastToInt","revBond","parseSdf","draw","svg","messageCtor","window","ev","wheelDelta","ViewBox","DrawOptions","Rotation","Zoom","Sdf","file","reader","FileReader","elems","uploadFileEvent","css","height","program","view","init","rb","reentered","syncDispatch","nextMsg","update","model'","subscribe","arg0","newRatio","newModel","inputRecord","ViewerBackgroundStyle","render","anchor","encodedContent","downloadSvgEvent","Svg","position","text","console","lazyView2With","placeholderId","setState","document","getElementById","equal"],"sourceRoot":""}