{"version":3,"file":"app.765473dfecb691b9f631.js","mappings":"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","sources":["webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Util.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Types.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Date.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Numeric.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/String.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Array.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/List.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/AsyncBuilder.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Choice.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Async.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Option.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Event.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Observable.js","webpack:///./src/Client/output/fable_modules/Fable.Elmish.3.1.0/prelude.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Timer.js","webpack:///./src/Client/output/fable_modules/Fable.Elmish.3.1.0/cmd.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Seq.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/FSharp.Core.js","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Range.js","webpack:///./src/Client/output/fable_modules/Fable.Elmish.3.1.0/ring.fs","webpack:///./src/Client/output/fable_modules/Fable.Elmish.React.3.0.1/common.fs","webpack:///./src/Client/Cinemole/Types.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Double.js","webpack:///./src/Client/Cinemole/Parsing.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/RegExp.js","webpack:///./src/Client/Cinemole/Helpers.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/System.Text.js","webpack:///./src/Client/Cinemole/Svg.fs","webpack:///./src/Client/Cinemole/Geometry.fs","webpack:///./src/Client/Cinemole/Drawing.fs","webpack:///./src/Client/Cinemole/Render.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Reflection.js","webpack:///./src/Client/output/fable_modules/Fulma.2.16.0/Common.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/MapUtil.js","webpack:///./src/Client/output/fable_modules/Fulma.2.16.0/Elements/Form/File.fs","webpack:///./src/Client/output/fable_modules/Feliz.Bulma.2.18.0/ElementBuilders.fs","webpack:///./src/Client/Widgets/General.fs","webpack:///./src/Client/output/fable_modules/Fable.React.7.4.3/Fable.React.Extensions.fs","webpack:///./src/Client/Widgets/Settings.fs","webpack:///./src/Client/output/fable_modules/fable-library.3.7.5/Set.js","webpack:///./src/Client/Sidebar.fs","webpack:///./src/Client/Index.fs","webpack:///./src/Client/output/fable_modules/Fable.Elmish.React.3.0.1/react.fs","webpack:///./src/Client/output/fable_modules/Fable.Elmish.3.1.0/program.fs","webpack:///./src/Client/App.fs"],"sourcesContent":["// tslint:disable:ban-types\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nfunction isComparer(x) {\n    return typeof x.Compare === \"function\";\n}\nfunction isComparable(x) {\n    return typeof x.CompareTo === \"function\";\n}\nfunction isEquatable(x) {\n    return typeof x.Equals === \"function\";\n}\nfunction isHashable(x) {\n    return typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function disposeSafe(x) {\n    if (isDisposable(x)) {\n        x.Dispose();\n    }\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator()\n        : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        [Symbol.iterator]() { return this; },\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.IEnumerator.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    else if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x).constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x).constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value, isSetter) => {\n        if (!isSetter) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED = Symbol(\"curried\");\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null || f.length > 1) {\n        return f;\n    }\n    const uncurried = (...args) => {\n        let res = f;\n        for (let i = 0; i < arity; i++) {\n            res = res(args[i]);\n        }\n        return res;\n    };\n    uncurried[CURRIED] = f;\n    return uncurried;\n}\nfunction _curry(args, arity, f) {\n    return (arg) => arity === 1\n        ? f(...args.concat([arg]))\n        // Note it's important to generate a new args array every time\n        // because a partially applied function can be run multiple times\n        : _curry(args.concat([arg]), arity - 1, f);\n}\nexport function curry(arity, f) {\n    if (f == null || f.length === 1) {\n        return f;\n    }\n    else if (CURRIED in f) {\n        return f[CURRIED];\n    }\n    else {\n        return _curry([], arity, f);\n    }\n}\nexport function checkArity(arity, f) {\n    return f.length > arity\n        ? (...args1) => (...args2) => f.apply(undefined, args1.concat(args2))\n        : f;\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return undefined;\n    }\n    else if (CURRIED in f) {\n        f = f[CURRIED];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        return _curry(args, arity, f);\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x).constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons.name;\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr = \"\";\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 2 /* Local */; // better default than Unspecified\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(input) {\n    function fail() {\n        throw new Error(`The string is not a valid Date: ${input}`);\n    }\n    if (input == null || input.trim() === \"\") {\n        fail();\n    }\n    // ISO dates without TZ are parsed as UTC. Adding time without TZ keeps them local.\n    if (input.length === 10 && input[4] === \"-\" && input[7] === \"-\") {\n        input += \"T00:00:00\";\n    }\n    let date = new Date(input);\n    let offset = null;\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*(Z|[+-]([01]?\\d):?([0-5]?\\d)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                if (m[4] === \"Z\") {\n                    offset = \"Z\";\n                }\n                else {\n                    let offsetInMinutes = parseInt(m[5], 10) * 60 + parseInt(m[6] || \"0\", 10);\n                    if (m[4][0] === \"-\") {\n                        offsetInMinutes *= -1;\n                    }\n                    offset = offsetInMinutes;\n                    timeInSeconds -= offsetInMinutes * 60;\n                }\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            fail();\n        }\n        // Check again the date is valid after transformations, see #2229\n        if (isNaN(date.getTime())) {\n            fail();\n        }\n    }\n    return [date, offset];\n}\nexport function parse(str, detectUTC = false) {\n    const [date, offset] = parseRaw(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || (x === null || x === void 0 ? void 0 : x[symbol]);\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        strIdx = interpolateRegExp.lastIndex;\n        // Likewise we need to move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex -= 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = padLeft(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        if (idx < 0 || idx >= args.length) {\n            throw new Error(\"Index must be greater or equal to zero and less than the arguments' length.\");\n        }\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/([0#,]+)(\\.[0#]+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            const decimalPartLength = decimalPart != null ? decimalPart.length : 0;\n                            rep = toFixed(rep, Math.max(decimalPartLength - 1, 0));\n                            // Thousands separator\n                            if (intPart.indexOf(\",\") > 0) {\n                                const [intPart, decimalPart] = rep.split(\".\");\n                                const i = intPart.length % 3;\n                                const thousandGroups = Math.floor(intPart.length / 3);\n                                let thousands = i > 0 ? intPart.substr(0, i) + (thousandGroups > 0 ? \",\" : \"\") : \"\";\n                                for (let j = 0; j < thousandGroups; j++) {\n                                    thousands += intPart.substr(i + j * 3, 3) + (j < thousandGroups - 1 ? \",\" : \"\");\n                                }\n                                rep = decimalPart ? thousands + \".\" + decimalPart : thousands;\n                            }\n                            // In .NET you can mix 0/# placeholders but for simplicity we only check the left most character\n                            intPart = intPart.replace(/,/g, \"\");\n                            const intPartLength = intPart.length > 0 && intPart[0] === \"0\" ? intPart.length : 0;\n                            return padLeft(rep, intPartLength - sign.length + decimalPartLength, \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, options) {\n    count = typeof count === \"number\" ? count : undefined;\n    options = typeof options === \"number\" ? options : 0;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    const removeEmpty = (options & 1) === 1;\n    const trim = (options & 2) === 2;\n    splitters = splitters || [];\n    splitters = splitters.filter(x => x).map(escape);\n    splitters = splitters.length > 0 ? splitters : [\"\\\\s\"];\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    let findSplits = true;\n    let i = 0;\n    do {\n        const match = reg.exec(str);\n        if (match === null) {\n            const candidate = trim ? str.substring(i).trim() : str.substring(i);\n            if (!removeEmpty || candidate.length > 0) {\n                splits.push(candidate);\n            }\n            findSplits = false;\n        }\n        else {\n            const candidate = trim ? str.substring(i, match.index).trim() : str.substring(i, match.index);\n            if (!removeEmpty || candidate.length > 0) {\n                if (count != null && splits.length + 1 === count) {\n                    splits.push(trim ? str.substring(i).trim() : str.substring(i));\n                    findSplits = false;\n                }\n                else {\n                    splits.push(candidate);\n                }\n            }\n            i = reg.lastIndex;\n        }\n    } while (findSplits);\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\nexport function fmt(strs, ...args) {\n    return ({ strs, args });\n}\nexport function fmtWith(fmts) {\n    return (strs, ...args) => ({ strs, args, fmts });\n}\nexport function getFormat(s) {\n    return s.fmts\n        ? s.strs.reduce((acc, newPart, index) => acc + `{${String(index - 1) + s.fmts[index - 1]}}` + newPart)\n        : s.strs.reduce((acc, newPart, index) => acc + `{${index - 1}}` + newPart);\n}\n","import { value as value_2, defaultArg, some } from \"./Option.js\";\r\nimport { min as min_1, disposeSafe, getEnumerator, comparePrimitives, max as max_1 } from \"./Util.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport function Helpers_allocateArrayFromCons(cons, len) {\r\n    if ((typeof cons) === \"function\") {\r\n        return new cons(len);\r\n    }\r\n    else {\r\n        return new Array(len);\r\n    }\r\n}\r\n\r\nfunction indexNotFound() {\r\n    throw (new Error(\"An index satisfying the predicate was not found in the collection.\"));\r\n}\r\n\r\nfunction differentLengths() {\r\n    throw (new Error(\"Arrays had different lengths\"));\r\n}\r\n\r\nexport function append(array1, array2, cons) {\r\n    const len1 = array1.length | 0;\r\n    const len2 = array2.length | 0;\r\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\r\n    for (let i = 0; i <= (len1 - 1); i++) {\r\n        newArray[i] = array1[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        newArray[i_1 + len1] = array2[i_1];\r\n    }\r\n    return newArray;\r\n}\r\n\r\nexport function filter(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function fill(target, targetIndex, count, value) {\r\n    const start = targetIndex | 0;\r\n    return target.fill(value, start, (start + count));\r\n}\r\n\r\nexport function getSubArray(array, start, count) {\r\n    const start_1 = start | 0;\r\n    return array.slice(start_1, (start_1 + count));\r\n}\r\n\r\nexport function last(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    return array[array.length - 1];\r\n}\r\n\r\nexport function tryLast(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[array.length - 1]);\r\n    }\r\n}\r\n\r\nexport function mapIndexed(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(i, source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function map(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const target = Helpers_allocateArrayFromCons(cons, len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = f(source[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function mapIndexed2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map2(f, source1, source2, cons) {\r\n    if (source1.length !== source2.length) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapIndexed3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(i, source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function map3(f, source1, source2, source3, cons) {\r\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\r\n        throw (new Error(\"Arrays had different lengths\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\r\n    for (let i = 0; i <= (source1.length - 1); i++) {\r\n        result[i] = f(source1[i], source2[i], source3[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function mapFold(mapping, state, array, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = 0; i <= (array.length - 1); i++) {\r\n            const patternInput = mapping(acc, array[i]);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function mapFoldBack(mapping, array, state, cons) {\r\n    const matchValue = array.length | 0;\r\n    if (matchValue === 0) {\r\n        return [[], state];\r\n    }\r\n    else {\r\n        let acc = state;\r\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\r\n        for (let i = array.length - 1; i >= 0; i--) {\r\n            const patternInput = mapping(array[i], acc);\r\n            res[i] = patternInput[0];\r\n            acc = patternInput[1];\r\n        }\r\n        return [res, acc];\r\n    }\r\n}\r\n\r\nexport function indexed(source) {\r\n    const len = source.length | 0;\r\n    const target = new Array(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = [i, source[i]];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function truncate(count, array) {\r\n    const count_1 = max_1(comparePrimitives, 0, count) | 0;\r\n    const start = 0;\r\n    return array.slice(start, (start + count_1));\r\n}\r\n\r\nexport function concat(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const matchValue = arrays_1.length | 0;\r\n    switch (matchValue) {\r\n        case 0: {\r\n            return Helpers_allocateArrayFromCons(cons, 0);\r\n        }\r\n        case 1: {\r\n            return arrays_1[0];\r\n        }\r\n        default: {\r\n            let totalIdx = 0;\r\n            let totalLength = 0;\r\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\r\n                const arr_1 = arrays_1[idx];\r\n                totalLength = ((totalLength + arr_1.length) | 0);\r\n            }\r\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\r\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\r\n                const arr_2 = arrays_1[idx_1];\r\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\r\n                    result[totalIdx] = arr_2[j];\r\n                    totalIdx = ((totalIdx + 1) | 0);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function collect(mapping, array, cons) {\r\n    return concat(map(mapping, array, null), cons);\r\n}\r\n\r\nexport function where(predicate, array) {\r\n    return array.filter(predicate);\r\n}\r\n\r\nexport function contains(value, array, eq) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return false;\r\n            }\r\n            else if (eq.Equals(value, array[i])) {\r\n                return true;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function empty(cons) {\r\n    return Helpers_allocateArrayFromCons(cons, 0);\r\n}\r\n\r\nexport function singleton(value, cons) {\r\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\r\n    ar[0] = value;\r\n    return ar;\r\n}\r\n\r\nexport function initialize(count, initializer, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (count - 1); i++) {\r\n        result[i] = initializer(i);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function pairwise(array) {\r\n    if (array.length < 2) {\r\n        return [];\r\n    }\r\n    else {\r\n        const count = (array.length - 1) | 0;\r\n        const result = new Array(count);\r\n        for (let i = 0; i <= (count - 1); i++) {\r\n            result[i] = [array[i], array[i + 1]];\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function replicate(count, initial, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    const result = Helpers_allocateArrayFromCons(cons, count);\r\n    for (let i = 0; i <= (result.length - 1); i++) {\r\n        result[i] = initial;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function copy(array) {\r\n    return array.slice();\r\n}\r\n\r\nexport function reverse(array) {\r\n    const array_2 = array.slice();\r\n    return array_2.reverse();\r\n}\r\n\r\nexport function scan(folder, state, array, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[0] = state;\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        res[i + 1] = folder(res[i], array[i]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function scanBack(folder, array, state, cons) {\r\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\r\n    res[array.length] = state;\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        res[i] = folder(array[i], res[i + 1]);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function skip(count, array, cons) {\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = ((count < 0) ? 0 : count) | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === array.length) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const count_1 = count | 0;\r\n        return array.slice(count_1);\r\n    }\r\n}\r\n\r\nexport function take(count, array, cons) {\r\n    if (count < 0) {\r\n        throw (new Error(\"The input must be non-negative\\\\nParameter name: count\"));\r\n    }\r\n    if (count > array.length) {\r\n        throw (new Error(\"count is greater than array length\\\\nParameter name: count\"));\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        return array.slice(start, (start + count));\r\n    }\r\n}\r\n\r\nexport function takeWhile(predicate, array, cons) {\r\n    let count = 0;\r\n    while ((count < array.length) && predicate(array[count])) {\r\n        count = ((count + 1) | 0);\r\n    }\r\n    if (count === 0) {\r\n        return Helpers_allocateArrayFromCons(cons, 0);\r\n    }\r\n    else {\r\n        const start = 0;\r\n        const count_1 = count | 0;\r\n        return array.slice(start, (start + count_1));\r\n    }\r\n}\r\n\r\nexport function addInPlace(x, array) {\r\n    array.push(x);\r\n}\r\n\r\nexport function addRangeInPlace(range, array) {\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n}\r\n\r\nexport function insertRangeInPlace(index, range, array) {\r\n    let index_1;\r\n    let i = index;\r\n    const enumerator = getEnumerator(range);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            (index_1 = (i | 0), array.splice(index_1, 0, x));\r\n            i = ((i + 1) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n}\r\n\r\nexport function removeInPlace(item_1, array) {\r\n    const i = (array.indexOf(item_1, 0)) | 0;\r\n    if (i > -1) {\r\n        array.splice(i, 1);\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function removeAllInPlace(predicate, array) {\r\n    const countRemoveAll = (count) => {\r\n        const i = (array.findIndex(predicate)) | 0;\r\n        if (i > -1) {\r\n            array.splice(i, 1);\r\n            return (countRemoveAll(count) + 1) | 0;\r\n        }\r\n        else {\r\n            return count | 0;\r\n        }\r\n    };\r\n    return countRemoveAll(0) | 0;\r\n}\r\n\r\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\r\n    const diff = (targetIndex - sourceIndex) | 0;\r\n    for (let i = sourceIndex; i <= ((sourceIndex + count) - 1); i++) {\r\n        target[i + diff] = source[i];\r\n    }\r\n}\r\n\r\nexport function copyToTypedArray(source, sourceIndex, target, targetIndex, count) {\r\n    try {\r\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\r\n    }\r\n    catch (matchValue) {\r\n        copyTo(source, sourceIndex, target, targetIndex, count);\r\n    }\r\n}\r\n\r\nexport function indexOf(array, item_1, start, count) {\r\n    const start_1 = defaultArg(start, 0) | 0;\r\n    const i = (array.indexOf(item_1, start_1)) | 0;\r\n    if ((count != null) && (i >= (start_1 + value_2(count)))) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return i | 0;\r\n    }\r\n}\r\n\r\nexport function partition(f, source, cons) {\r\n    const len = source.length | 0;\r\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\r\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\r\n    let iTrue = 0;\r\n    let iFalse = 0;\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        if (f(source[i])) {\r\n            res1[iTrue] = source[i];\r\n            iTrue = ((iTrue + 1) | 0);\r\n        }\r\n        else {\r\n            res2[iFalse] = source[i];\r\n            iFalse = ((iFalse + 1) | 0);\r\n        }\r\n    }\r\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\r\n}\r\n\r\nexport function find(predicate, array) {\r\n    const matchValue = array.find(predicate);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_2(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, array) {\r\n    return array.find(predicate);\r\n}\r\n\r\nexport function findIndex(predicate, array) {\r\n    const matchValue = (array.findIndex(predicate)) | 0;\r\n    if (matchValue > -1) {\r\n        return matchValue | 0;\r\n    }\r\n    else {\r\n        return indexNotFound() | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, array) {\r\n    const matchValue = (array.findIndex(predicate)) | 0;\r\n    if (matchValue > -1) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function pick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return indexNotFound();\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue != null) {\r\n                    return value_2(matchValue);\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function tryPick(chooser, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i >= array.length) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = chooser(array[i]);\r\n                if (matchValue == null) {\r\n                    i_mut = (i + 1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0);\r\n}\r\n\r\nexport function findBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound();\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return array[i];\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function tryFindBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return some(array[i]);\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function findLastIndex(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return -1;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function findIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return indexNotFound() | 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i | 0;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1) | 0;\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, array) {\r\n    const loop = (i_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut;\r\n            if (i < 0) {\r\n                return void 0;\r\n            }\r\n            else if (predicate(array[i])) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(array.length - 1);\r\n}\r\n\r\nexport function choose(chooser, array, cons) {\r\n    const res = [];\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        const matchValue = chooser(array[i]);\r\n        if (matchValue != null) {\r\n            const y = value_2(matchValue);\r\n            res.push(y);\r\n        }\r\n    }\r\n    if ((typeof cons) === \"function\") {\r\n        return map((x) => x, res, cons);\r\n    }\r\n    else {\r\n        return res;\r\n    }\r\n}\r\n\r\nexport function foldIndexed(folder, state, array) {\r\n    return array.reduce(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg0, delegateArg1)), state);\r\n}\r\n\r\nexport function fold(folder, state, array) {\r\n    return array.reduce((folder), state);\r\n}\r\n\r\nexport function iterate(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(array[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed(action, array) {\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        action(i, array[i]);\r\n    }\r\n}\r\n\r\nexport function iterate2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function iterateIndexed2(action, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        action(i, array1[i], array2[i]);\r\n    }\r\n}\r\n\r\nexport function isEmpty(array) {\r\n    return array.length === 0;\r\n}\r\n\r\nexport function forAll(predicate, array) {\r\n    return array.every(predicate);\r\n}\r\n\r\nexport function permute(f, array) {\r\n    const size = array.length | 0;\r\n    const res = array.slice();\r\n    const checkFlags = new Array(size);\r\n    iterateIndexed((i, x) => {\r\n        const j = f(i) | 0;\r\n        if ((j < 0) ? true : (j >= size)) {\r\n            throw (new Error(\"Not a valid permutation\"));\r\n        }\r\n        res[j] = x;\r\n        checkFlags[j] = 1;\r\n    }, array);\r\n    if (!(checkFlags.every((y) => (1 === y)))) {\r\n        throw (new Error(\"Not a valid permutation\"));\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function setSlice(target, lower, upper, source) {\r\n    const lower_1 = defaultArg(lower, 0) | 0;\r\n    const upper_1 = defaultArg(upper, 0) | 0;\r\n    const length = (((upper_1 > 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\r\n    for (let i = 0; i <= length; i++) {\r\n        target[i + lower_1] = source[i];\r\n    }\r\n}\r\n\r\nexport function sortInPlaceBy(projection, xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(projection(x), projection(y)));\r\n}\r\n\r\nexport function sortInPlace(xs, comparer) {\r\n    xs.sort((x, y) => comparer.Compare(x, y));\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => comparer.Compare(x, y));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    return (xs_1.sort((x, y) => comparer.Compare(projection(x), projection(y))), xs_1);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort((x, y) => (comparer.Compare(x, y) * -1));\r\n    return xs_1;\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    const xs_1 = xs.slice();\r\n    return (xs_1.sort((x, y) => (comparer.Compare(projection(x), projection(y)) * -1)), xs_1);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const comparer_1 = comparer;\r\n    const xs_1 = xs.slice();\r\n    xs_1.sort(comparer_1);\r\n    return xs_1;\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const len1 = xs.length | 0;\r\n    const len2 = ys.length | 0;\r\n    const res = new Array(len1 * len2);\r\n    for (let i = 0; i <= (xs.length - 1); i++) {\r\n        for (let j = 0; j <= (ys.length - 1); j++) {\r\n            res[(i * len2) + j] = [xs[i], ys[j]];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    const res = [];\r\n    const loop = (state_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const state_1 = state_1_mut;\r\n            const matchValue = generator(state_1);\r\n            if (matchValue != null) {\r\n                const x = matchValue[0];\r\n                const s = matchValue[1];\r\n                res.push(x);\r\n                state_1_mut = s;\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(state);\r\n    return res;\r\n}\r\n\r\nexport function unzip(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n    }, array);\r\n    return [res1, res2];\r\n}\r\n\r\nexport function unzip3(array) {\r\n    const len = array.length | 0;\r\n    const res1 = new Array(len);\r\n    const res2 = new Array(len);\r\n    const res3 = new Array(len);\r\n    iterateIndexed((i, tupledArg) => {\r\n        res1[i] = tupledArg[0];\r\n        res2[i] = tupledArg[1];\r\n        res3[i] = tupledArg[2];\r\n    }, array);\r\n    return [res1, res2, res3];\r\n}\r\n\r\nexport function zip(array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function zip3(array1, array2, array3) {\r\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\r\n        differentLengths();\r\n    }\r\n    const result = new Array(array1.length);\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        result[i] = [array1[i], array2[i], array3[i]];\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function chunkBySize(chunkSize, array) {\r\n    if (chunkSize < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: size\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        for (let x = 0; x <= ((~(~Math.ceil(array.length / chunkSize))) - 1); x++) {\r\n            let slice;\r\n            const start_1 = (x * chunkSize) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function splitAt(index, array) {\r\n    let start;\r\n    if ((index < 0) ? true : (index > array.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [(start = 0, array.slice(start, (start + index))), array.slice(index)];\r\n}\r\n\r\nexport function compareWith(comparer, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = 0;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return 1;\r\n        }\r\n        else if (length1 < length2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            while ((i < length1) && (result === 0)) {\r\n                result = (comparer(array1[i], array2[i]) | 0);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result | 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport function equalsWith(equals, array1, array2) {\r\n    if (array1 == null) {\r\n        if (array2 == null) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else if (array2 == null) {\r\n        return false;\r\n    }\r\n    else {\r\n        let i = 0;\r\n        let result = true;\r\n        const length1 = array1.length | 0;\r\n        const length2 = array2.length | 0;\r\n        if (length1 > length2) {\r\n            return false;\r\n        }\r\n        else if (length1 < length2) {\r\n            return false;\r\n        }\r\n        else {\r\n            while ((i < length1) && result) {\r\n                result = equals(array1[i], array2[i]);\r\n                i = ((i + 1) | 0);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function exactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return array[0];\r\n    }\r\n    else if (array.length === 0) {\r\n        throw (new Error(\"The input sequence was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        throw (new Error(\"Input array too long\\\\nParameter name: array\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(array) {\r\n    if (array.length === 1) {\r\n        return some(array[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function head(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    else {\r\n        return array[0];\r\n    }\r\n}\r\n\r\nexport function tryHead(array) {\r\n    if (array.length === 0) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[0]);\r\n    }\r\n}\r\n\r\nexport function tail(array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"Not enough elements\\\\nParameter name: array\"));\r\n    }\r\n    return array.slice(1);\r\n}\r\n\r\nexport function item(index, array) {\r\n    return array[index];\r\n}\r\n\r\nexport function tryItem(index, array) {\r\n    if ((index < 0) ? true : (index >= array.length)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(array[index]);\r\n    }\r\n}\r\n\r\nexport function foldBackIndexed(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1, delegateArg2) => folder(delegateArg2, delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldBack(folder, array, state) {\r\n    return array.reduceRight(((delegateArg0, delegateArg1) => folder(delegateArg1, delegateArg0)), state);\r\n}\r\n\r\nexport function foldIndexed2(folder, state, array1, array2) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        throw (new Error(\"Arrays have different lengths\"));\r\n    }\r\n    for (let i = 0; i <= (array1.length - 1); i++) {\r\n        acc = folder(i, acc, array1[i], array2[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function fold2(folder, state, array1, array2) {\r\n    return foldIndexed2((_arg1, acc, x, y) => folder(acc, x, y), state, array1, array2);\r\n}\r\n\r\nexport function foldBackIndexed2(folder, array1, array2, state) {\r\n    let acc = state;\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    const size = array1.length | 0;\r\n    for (let i = 1; i <= size; i++) {\r\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(f, array1, array2, state) {\r\n    return foldBackIndexed2((_arg1, x, y, acc) => f(x, y, acc), array1, array2, state);\r\n}\r\n\r\nexport function reduce(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduce(reduction_1);\r\n}\r\n\r\nexport function reduceBack(reduction, array) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\"));\r\n    }\r\n    const reduction_1 = reduction;\r\n    return array.reduceRight(reduction_1);\r\n}\r\n\r\nexport function forAll2(predicate, array1, array2) {\r\n    return fold2((acc, x, y) => (acc && predicate(x, y)), true, array1, array2);\r\n}\r\n\r\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\r\n    existsOffset:\r\n    while (true) {\r\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\r\n        if (index === array.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array_mut = array;\r\n            index_mut = (index + 1);\r\n            continue existsOffset;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists(predicate, array) {\r\n    return existsOffset(predicate, array, 0);\r\n}\r\n\r\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\r\n    existsOffset2:\r\n    while (true) {\r\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\r\n        if (index === array1.length) {\r\n            return false;\r\n        }\r\n        else if (predicate(array1[index], array2[index])) {\r\n            return true;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            array1_mut = array1;\r\n            array2_mut = array2;\r\n            index_mut = (index + 1);\r\n            continue existsOffset2;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, array1, array2) {\r\n    if (array1.length !== array2.length) {\r\n        differentLengths();\r\n    }\r\n    return existsOffset2(predicate, array1, array2, 0);\r\n}\r\n\r\nexport function sum(array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, array[i]);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function sumBy(projection, array, adder) {\r\n    let acc = adder.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        acc = adder.Add(acc, projection(array[i]));\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, array[i]);\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function averageBy(projection, array, averager) {\r\n    if (array.length === 0) {\r\n        throw (new Error(\"The input array was empty\\\\nParameter name: array\"));\r\n    }\r\n    let total = averager.GetZero();\r\n    for (let i = 0; i <= (array.length - 1); i++) {\r\n        total = averager.Add(total, projection(array[i]));\r\n    }\r\n    return averager.DivideByInt(total, array.length);\r\n}\r\n\r\nexport function windowed(windowSize, source) {\r\n    if (windowSize <= 0) {\r\n        throw (new Error(\"windowSize must be positive\"));\r\n    }\r\n    let res;\r\n    const len = max_1(comparePrimitives, 0, (source.length - windowSize) + 1) | 0;\r\n    res = (new Array(len));\r\n    for (let i = windowSize; i <= source.length; i++) {\r\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function splitInto(chunks, array) {\r\n    if (chunks < 1) {\r\n        throw (new Error(\"The input must be positive.\\\\nParameter name: chunks\"));\r\n    }\r\n    if (array.length === 0) {\r\n        return [[]];\r\n    }\r\n    else {\r\n        const result = [];\r\n        const chunks_1 = min_1(comparePrimitives, chunks, array.length) | 0;\r\n        const minChunkSize = (~(~(array.length / chunks_1))) | 0;\r\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\r\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\r\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\r\n            let slice;\r\n            const start_1 = ((i * minChunkSize) + min_1(comparePrimitives, chunksWithExtraItem, i)) | 0;\r\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\r\n            result.push(slice);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function transpose(arrays, cons) {\r\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\r\n    const len = arrays_1.length | 0;\r\n    if (len === 0) {\r\n        return new Array(0);\r\n    }\r\n    else {\r\n        const firstArray = arrays_1[0];\r\n        const lenInner = firstArray.length | 0;\r\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\r\n            differentLengths();\r\n        }\r\n        const result = new Array(lenInner);\r\n        for (let i = 0; i <= (lenInner - 1); i++) {\r\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\r\n            for (let j = 0; j <= (len - 1); j++) {\r\n                result[i][j] = arrays_1[j][i];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len + 1);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    target[index] = y;\r\n    for (let i_1 = index; i_1 <= (len - 1); i_1++) {\r\n        target[i_1 + 1] = xs[i_1];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index > len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const ys_1 = Array.from(ys);\r\n    const len2 = ys_1.length | 0;\r\n    const target = new xs.constructor(len + len2);\r\n    for (let i = 0; i <= (index - 1); i++) {\r\n        target[i] = xs[i];\r\n    }\r\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\r\n        target[index + i_1] = ys_1[i_1];\r\n    }\r\n    for (let i_2 = index; i_2 <= (len - 1); i_2++) {\r\n        target[i_2 + len2] = xs[i_2];\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    if ((index < 0) ? true : (index >= xs.length)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    let i = -1;\r\n    return filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        return i !== index;\r\n    }, xs);\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    const len = xs.length | 0;\r\n    if ((index < 0) ? true : (index >= len)) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    const target = new xs.constructor(len);\r\n    for (let i = 0; i <= (len - 1); i++) {\r\n        target[i] = ((i === index) ? y : xs[i]);\r\n    }\r\n    return target;\r\n}\r\n\r\n","import { join } from \"./String.js\";\r\nimport { uncurry, disposeSafe, isArrayLike, getEnumerator, toIterator, compare, structuralHash, equals } from \"./Util.js\";\r\nimport { Record } from \"./Types.js\";\r\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\r\nimport { SR_inputSequenceTooLong, SR_inputSequenceEmpty, SR_inputMustBeNonNegative, SR_notEnoughElements, SR_differentLengths, SR_keyNotFoundAlt, SR_indexOutOfBounds, SR_inputWasEmpty } from \"./Global.js\";\r\nimport { defaultArg, value as value_1, some } from \"./Option.js\";\r\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\r\n\r\nexport class FSharpList extends Record {\r\n    constructor(head, tail) {\r\n        super();\r\n        this.head = head;\r\n        this.tail = tail;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        return (\"[\" + join(\"; \", xs)) + \"]\";\r\n    }\r\n    Equals(other) {\r\n        const xs = this;\r\n        if (xs === other) {\r\n            return true;\r\n        }\r\n        else {\r\n            const loop = (xs_1_mut, ys_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                    const matchValue = [xs_1.tail, ys_1.tail];\r\n                    if (matchValue[0] != null) {\r\n                        if (matchValue[1] != null) {\r\n                            const xt = matchValue[0];\r\n                            const yt = matchValue[1];\r\n                            if (equals(xs_1.head, ys_1.head)) {\r\n                                xs_1_mut = xt;\r\n                                ys_1_mut = yt;\r\n                                continue loop;\r\n                            }\r\n                            else {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (matchValue[1] != null) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(xs, other);\r\n        }\r\n    }\r\n    GetHashCode() {\r\n        const xs = this;\r\n        const loop = (i_mut, h_mut, xs_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\r\n                const matchValue = xs_1.tail;\r\n                if (matchValue != null) {\r\n                    const t = matchValue;\r\n                    if (i > 18) {\r\n                        return h | 0;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\r\n                        xs_1_mut = t;\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return h | 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0, 0, xs) | 0;\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(other) {\r\n        const xs = this;\r\n        const loop = (xs_1_mut, ys_1_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n                const matchValue = [xs_1.tail, ys_1.tail];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const xt = matchValue[0];\r\n                        const yt = matchValue[1];\r\n                        const c = compare(xs_1.head, ys_1.head) | 0;\r\n                        if (c === 0) {\r\n                            xs_1_mut = xt;\r\n                            ys_1_mut = yt;\r\n                            continue loop;\r\n                        }\r\n                        else {\r\n                            return c | 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return 1;\r\n                    }\r\n                }\r\n                else if (matchValue[1] != null) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(xs, other) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const xs = this;\r\n        return ListEnumerator$1_$ctor_3002E699(xs);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const xs = this;\r\n        return getEnumerator(xs);\r\n    }\r\n}\r\n\r\nexport function FSharpList$reflection(gen0) {\r\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList$reflection(gen0))]]);\r\n}\r\n\r\nexport class ListEnumerator$1 {\r\n    constructor(xs) {\r\n        this.xs = xs;\r\n        this.it = this.xs;\r\n        this.current = null;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current;\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        const matchValue = __.it.tail;\r\n        if (matchValue != null) {\r\n            const t = matchValue;\r\n            __.current = __.it.head;\r\n            __.it = t;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        const __ = this;\r\n        __.it = __.xs;\r\n        __.current = null;\r\n    }\r\n    Dispose() {\r\n    }\r\n}\r\n\r\nexport function ListEnumerator$1$reflection(gen0) {\r\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\r\n}\r\n\r\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\r\n    return new ListEnumerator$1(xs);\r\n}\r\n\r\nexport function FSharpList_get_Empty() {\r\n    return new FSharpList(null, void 0);\r\n}\r\n\r\nexport function FSharpList_Cons_305B8EAC(x, xs) {\r\n    return new FSharpList(x, xs);\r\n}\r\n\r\nexport function FSharpList__get_IsEmpty(xs) {\r\n    return xs.tail == null;\r\n}\r\n\r\nexport function FSharpList__get_Length(xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = matchValue;\r\n                continue loop;\r\n            }\r\n            else {\r\n                return i | 0;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs) | 0;\r\n}\r\n\r\nexport function FSharpList__get_Head(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return xs.head;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Tail(xs) {\r\n    const matchValue = xs.tail;\r\n    if (matchValue != null) {\r\n        return matchValue;\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            const matchValue = xs_1.tail;\r\n            if (matchValue != null) {\r\n                if (i === index) {\r\n                    return xs_1.head;\r\n                }\r\n                else {\r\n                    i_mut = (i + 1);\r\n                    xs_1_mut = matchValue;\r\n                    continue loop;\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function empty() {\r\n    return FSharpList_get_Empty();\r\n}\r\n\r\nexport function cons(x, xs) {\r\n    return FSharpList_Cons_305B8EAC(x, xs);\r\n}\r\n\r\nexport function singleton(x) {\r\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    return FSharpList__get_IsEmpty(xs);\r\n}\r\n\r\nexport function length(xs) {\r\n    return FSharpList__get_Length(xs);\r\n}\r\n\r\nexport function head(xs) {\r\n    return FSharpList__get_Head(xs);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        return void 0;\r\n    }\r\n    else {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n}\r\n\r\nexport function tail(xs) {\r\n    return FSharpList__get_Tail(xs);\r\n}\r\n\r\nexport function tryLast(xs_mut) {\r\n    tryLast:\r\n    while (true) {\r\n        const xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return void 0;\r\n        }\r\n        else {\r\n            const t = FSharpList__get_Tail(xs);\r\n            if (FSharpList__get_IsEmpty(t)) {\r\n                return some(FSharpList__get_Head(xs));\r\n            }\r\n            else {\r\n                xs_mut = t;\r\n                continue tryLast;\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const loop = (xs_1_mut, ys_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            const matchValue = [FSharpList__get_IsEmpty(xs_1), FSharpList__get_IsEmpty(ys_1)];\r\n            if (matchValue[0]) {\r\n                if (matchValue[1]) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else if (matchValue[1]) {\r\n                return 1;\r\n            }\r\n            else {\r\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\r\n                if (c === 0) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return c | 0;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs, ys) | 0;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    const len = FSharpList__get_Length(xs) | 0;\r\n    const res = fill(new Array(len), 0, len, null);\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (!FSharpList__get_IsEmpty(xs_1)) {\r\n                res[i] = FSharpList__get_Head(xs_1);\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    loop(0, xs);\r\n    return res;\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_1)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function foldIndexed(folder, state, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, state, xs);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    let acc = state;\r\n    let xs_1 = xs;\r\n    let ys_1 = ys;\r\n    while ((!FSharpList__get_IsEmpty(xs_1)) && (!FSharpList__get_IsEmpty(ys_1))) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\r\n        xs_1 = FSharpList__get_Tail(xs_1);\r\n        ys_1 = FSharpList__get_Tail(ys_1);\r\n    }\r\n    return acc;\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function unfold(gen, state) {\r\n    const loop = (acc_mut, node_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, node = node_mut;\r\n            const matchValue = gen(acc);\r\n            if (matchValue != null) {\r\n                acc_mut = matchValue[1];\r\n                node_mut = ((t = (new FSharpList(matchValue[0], void 0)), (node.tail = t, t)));\r\n                continue loop;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(state, root);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function toSeq(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function ofArrayWithTail(xs, tail_1) {\r\n    let res = tail_1;\r\n    for (let i = xs.length - 1; i >= 0; i--) {\r\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function ofArray(xs) {\r\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    let xs_3, t;\r\n    if (isArrayLike(xs)) {\r\n        return ofArray(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        const root = FSharpList_get_Empty();\r\n        let node = root;\r\n        const enumerator = getEnumerator(xs);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                node = ((xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t))));\r\n            }\r\n        }\r\n        finally {\r\n            disposeSafe(enumerator);\r\n        }\r\n        const xs_5 = node;\r\n        const t_2 = FSharpList_get_Empty();\r\n        xs_5.tail = t_2;\r\n        return FSharpList__get_Tail(root);\r\n    }\r\n}\r\n\r\nexport function concat(lists) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    const action = (xs) => {\r\n        node = fold((acc, x) => {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }, node, xs);\r\n    };\r\n    if (isArrayLike(lists)) {\r\n        lists.forEach(action);\r\n    }\r\n    else if (lists instanceof FSharpList) {\r\n        iterate(action, lists);\r\n    }\r\n    else {\r\n        const enumerator = getEnumerator(lists);\r\n        try {\r\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n        }\r\n        finally {\r\n            disposeSafe(enumerator);\r\n        }\r\n    }\r\n    const xs_6 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_6.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    let t, xs_4, t_2;\r\n    const root = FSharpList_get_Empty();\r\n    let node = (t = (new FSharpList(state, void 0)), (root.tail = t, t));\r\n    let acc = state;\r\n    let xs_3 = xs;\r\n    while (!FSharpList__get_IsEmpty(xs_3)) {\r\n        acc = folder(acc, FSharpList__get_Head(xs_3));\r\n        node = ((xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2))));\r\n        xs_3 = FSharpList__get_Tail(xs_3);\r\n    }\r\n    const xs_6 = node;\r\n    const t_4 = FSharpList_get_Empty();\r\n    xs_6.tail = t_4;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return ofArray(scanBack_1(folder, toArray(xs), state));\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    let xs_1, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    let ys = xs;\r\n    while (!FSharpList__get_IsEmpty(ys)) {\r\n        let zs = mapping(FSharpList__get_Head(ys));\r\n        while (!FSharpList__get_IsEmpty(zs)) {\r\n            node = ((xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t))));\r\n            zs = FSharpList__get_Tail(zs);\r\n        }\r\n        ys = FSharpList__get_Tail(ys);\r\n    }\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = foldIndexed((i, acc, x) => {\r\n        let t;\r\n        return (t = (new FSharpList(mapping(i, x), void 0)), (acc.tail = t, t));\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        let t;\r\n        return (t = (new FSharpList(mapping(x), void 0)), (acc.tail = t, t));\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold2((acc, x, y) => {\r\n        let t;\r\n        return (t = (new FSharpList(mapping(x, y), void 0)), (acc.tail = t, t));\r\n    }, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                acc_mut = ((t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(0, root, xs, ys);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\r\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                ys_1_mut = FSharpList__get_Tail(ys_1);\r\n                zs_1_mut = FSharpList__get_Tail(zs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node_1 = loop(root, xs, ys, zs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node_1.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const patternInput_1 = fold((tupledArg, x) => {\r\n        let t;\r\n        const patternInput = mapping(tupledArg[1], x);\r\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\r\n    }, [root, state], xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_2;\r\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\r\n}\r\n\r\nexport function tryPick(f, xs) {\r\n    const loop = (xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else {\r\n                const matchValue = f(FSharpList__get_Head(xs_1));\r\n                if (matchValue == null) {\r\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return matchValue;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(xs);\r\n}\r\n\r\nexport function pick(f, xs) {\r\n    const matchValue = tryPick(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFind(f, xs) {\r\n    return tryPick((x) => (f(x) ? some(x) : (void 0)), xs);\r\n}\r\n\r\nexport function find(f, xs) {\r\n    const matchValue = tryFind(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(f, xs) {\r\n    return tryFindBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findBack(f, xs) {\r\n    const matchValue = tryFindBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(f, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (f(FSharpList__get_Head(xs_1))) {\r\n                return i;\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function findIndex(f, xs) {\r\n    const matchValue = tryFindIndex(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(f, xs) {\r\n    return tryFindIndexBack_1(f, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(f, xs) {\r\n    const matchValue = tryFindIndexBack(f, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error(SR_keyNotFoundAlt));\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryItem(n, xs) {\r\n    const loop = (i_mut, xs_1_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return void 0;\r\n            }\r\n            else if (i === n) {\r\n                return some(FSharpList__get_Head(xs_1));\r\n            }\r\n            else {\r\n                i_mut = (i + 1);\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(0, xs);\r\n}\r\n\r\nexport function item(n, xs) {\r\n    return FSharpList__get_Item_Z524259A4(xs, n);\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        if (f(x)) {\r\n            const t = new FSharpList(x, void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function partition(f, xs) {\r\n    const patternInput = [FSharpList_get_Empty(), FSharpList_get_Empty()];\r\n    const root2 = patternInput[1];\r\n    const root1 = patternInput[0];\r\n    const patternInput_1 = fold(uncurry(2, (tupledArg) => {\r\n        const lacc = tupledArg[0];\r\n        const racc = tupledArg[1];\r\n        return (x) => {\r\n            let t, t_2;\r\n            return f(x) ? [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc] : [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\r\n        };\r\n    }), [root1, root2], xs);\r\n    const t_4 = FSharpList_get_Empty();\r\n    patternInput_1[0].tail = t_4;\r\n    const t_5 = FSharpList_get_Empty();\r\n    patternInput_1[1].tail = t_5;\r\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\r\n}\r\n\r\nexport function choose(f, xs) {\r\n    const root = FSharpList_get_Empty();\r\n    const node = fold((acc, x) => {\r\n        const matchValue = f(x);\r\n        if (matchValue == null) {\r\n            return acc;\r\n        }\r\n        else {\r\n            const t = new FSharpList(value_1(matchValue), void 0);\r\n            acc.tail = t;\r\n            return t;\r\n        }\r\n    }, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function contains(value, xs, eq) {\r\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\r\n}\r\n\r\nexport function initialize(n, f) {\r\n    let xs, t;\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    for (let i = 0; i <= (n - 1); i++) {\r\n        node = ((xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t))));\r\n    }\r\n    const xs_2 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_2.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reduce(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return fold(f, head(xs), tail(xs));\r\n    }\r\n}\r\n\r\nexport function reduceBack(f, xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error(SR_inputWasEmpty));\r\n    }\r\n    else {\r\n        return foldBack(f, tail(xs), head(xs));\r\n    }\r\n}\r\n\r\nexport function forAll(f, xs) {\r\n    return fold((acc, x) => (acc && f(x)), true, xs);\r\n}\r\n\r\nexport function forAll2(f, xs, ys) {\r\n    return fold2((acc, x, y) => (acc && f(x, y)), true, xs, ys);\r\n}\r\n\r\nexport function exists(f, xs) {\r\n    return tryFindIndex(f, xs) != null;\r\n}\r\n\r\nexport function exists2(f_mut, xs_mut, ys_mut) {\r\n    exists2:\r\n    while (true) {\r\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\r\n        const matchValue = [FSharpList__get_IsEmpty(xs), FSharpList__get_IsEmpty(ys)];\r\n        let pattern_matching_result;\r\n        if (matchValue[0]) {\r\n            if (matchValue[1]) {\r\n                pattern_matching_result = 0;\r\n            }\r\n            else {\r\n                pattern_matching_result = 2;\r\n            }\r\n        }\r\n        else if (matchValue[1]) {\r\n            pattern_matching_result = 2;\r\n        }\r\n        else {\r\n            pattern_matching_result = 1;\r\n        }\r\n        switch (pattern_matching_result) {\r\n            case 0: {\r\n                return false;\r\n            }\r\n            case 1: {\r\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    xs_mut = FSharpList__get_Tail(xs);\r\n                    ys_mut = FSharpList__get_Tail(ys);\r\n                    continue exists2;\r\n                }\r\n            }\r\n            case 2: {\r\n                throw (new Error((SR_differentLengths + \"\\\\nParameter name: \") + \"list2\"));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function unzip(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function unzip3(xs) {\r\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    const arr = toArray(xs);\r\n    arr.sort(comparer);\r\n    return ofArray(arr);\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    return averager.DivideByInt(total, count);\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    return averager.DivideByInt(total, count);\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return ofArray(permute_1(f, toArray(xs)));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs))));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const root = FSharpList_get_Empty();\r\n    let node = root;\r\n    iterate((x) => {\r\n        iterate((y) => {\r\n            let xs_1, t;\r\n            node = ((xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t))));\r\n        }, ys);\r\n    }, xs);\r\n    const xs_3 = node;\r\n    const t_2 = FSharpList_get_Empty();\r\n    xs_3.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function skip(count_mut, xs_mut) {\r\n    skip:\r\n    while (true) {\r\n        const count = count_mut, xs = xs_mut;\r\n        if (count <= 0) {\r\n            return xs;\r\n        }\r\n        else if (FSharpList__get_IsEmpty(xs)) {\r\n            throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n        }\r\n        else {\r\n            count_mut = (count - 1);\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skip;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function skipWhile(predicate_mut, xs_mut) {\r\n    skipWhile:\r\n    while (true) {\r\n        const predicate = predicate_mut, xs = xs_mut;\r\n        if (FSharpList__get_IsEmpty(xs)) {\r\n            return xs;\r\n        }\r\n        else if (!predicate(FSharpList__get_Head(xs))) {\r\n            return xs;\r\n        }\r\n        else {\r\n            predicate_mut = predicate;\r\n            xs_mut = FSharpList__get_Tail(xs);\r\n            continue skipWhile;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function take(count, xs) {\r\n    if (count < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\"));\r\n    }\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\"));\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    const loop = (acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\r\n                return acc;\r\n            }\r\n            else {\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\r\n        let t;\r\n        loop:\r\n        while (true) {\r\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\r\n            if (i <= 0) {\r\n                return acc;\r\n            }\r\n            else if (FSharpList__get_IsEmpty(xs_1)) {\r\n                return acc;\r\n            }\r\n            else {\r\n                i_mut = (i - 1);\r\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\r\n                xs_1_mut = FSharpList__get_Tail(xs_1);\r\n                continue loop;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    const root = FSharpList_get_Empty();\r\n    const node = loop(count, root, xs);\r\n    const t_2 = FSharpList_get_Empty();\r\n    node.tail = t_2;\r\n    return FSharpList__get_Tail(root);\r\n}\r\n\r\nexport function getSlice(startIndex, endIndex, xs) {\r\n    const len = length(xs) | 0;\r\n    const startIndex_1 = defaultArg(startIndex, 0) | 0;\r\n    const endIndex_1 = defaultArg(endIndex, len - 1) | 0;\r\n    if (startIndex_1 < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"startIndex\"));\r\n    }\r\n    else if (endIndex_1 >= len) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"endIndex\"));\r\n    }\r\n    else if (endIndex_1 < startIndex_1) {\r\n        return FSharpList_get_Empty();\r\n    }\r\n    else {\r\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\r\n    }\r\n}\r\n\r\nexport function splitAt(index, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    if (index > FSharpList__get_Length(xs)) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return [take(index, xs), skip(index, xs)];\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    if (FSharpList__get_IsEmpty(xs)) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return FSharpList__get_Head(xs);\r\n    }\r\n    else {\r\n        throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\"));\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    if ((!FSharpList__get_IsEmpty(xs)) && FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\r\n        return some(FSharpList__get_Head(xs));\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return ofArray(pairwise_1(toArray(xs)));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs))));\r\n}\r\n\r\nexport function transpose(lists) {\r\n    return ofArray(map_1(ofArray, transpose_1(map_1(toArray, Array.from(lists)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, FSharpList_Cons_305B8EAC(y, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? FSharpList_Cons_305B8EAC(y, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys_1 = ofSeq(ys);\r\n    const result = fold((acc, x) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return FSharpList_Cons_305B8EAC(x, append(ys_1, acc));\r\n        }\r\n        else {\r\n            return FSharpList_Cons_305B8EAC(x, acc);\r\n        }\r\n    }, FSharpList_get_Empty(), xs);\r\n    return reverse(isDone ? result : (((i + 1) === index) ? append(ys_1, result) : (() => {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    })()));\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let i = -1;\r\n    let isDone = false;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            isDone = true;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    let i = -1;\r\n    let status = -1;\r\n    const ys = filter((_arg1) => {\r\n        i = ((i + 1) | 0);\r\n        if (i === index) {\r\n            status = 0;\r\n            return false;\r\n        }\r\n        else if (i > index) {\r\n            if (i < (index + count)) {\r\n                return false;\r\n            }\r\n            else {\r\n                status = 1;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }, xs);\r\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\r\n    if (status_1 < 1) {\r\n        const arg = (status_1 < 0) ? \"index\" : \"count\";\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + arg));\r\n    }\r\n    return ys;\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    const ys = mapIndexed((i, x) => {\r\n        if (i === index) {\r\n            isDone = true;\r\n            return y;\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n    }, xs);\r\n    if (!isDone) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return ys;\r\n}\r\n\r\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","import { Union } from \"./Types.js\";\r\nimport { union_type } from \"./Reflection.js\";\r\nimport { some } from \"./Option.js\";\r\n\r\nexport class FSharpResult$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Ok\", \"Error\"];\r\n    }\r\n}\r\n\r\nexport function FSharpResult$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpResult`2\", [gen0, gen1], FSharpResult$2, () => [[[\"ResultValue\", gen0]], [[\"ErrorValue\", gen1]]]);\r\n}\r\n\r\nexport function Result_Map(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, mapping(result.fields[0]));\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport function Result_MapError(mapping, result) {\r\n    if (result.tag === 0) {\r\n        return new FSharpResult$2(0, result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, mapping(result.fields[0]));\r\n    }\r\n}\r\n\r\nexport function Result_Bind(binder, result) {\r\n    if (result.tag === 0) {\r\n        return binder(result.fields[0]);\r\n    }\r\n    else {\r\n        return new FSharpResult$2(1, result.fields[0]);\r\n    }\r\n}\r\n\r\nexport class FSharpChoice$2 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of2\", \"Choice2Of2\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$2$reflection(gen0, gen1) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`2\", [gen0, gen1], FSharpChoice$2, () => [[[\"Item\", gen0]], [[\"Item\", gen1]]]);\r\n}\r\n\r\nexport class FSharpChoice$3 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of3\", \"Choice2Of3\", \"Choice3Of3\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$3$reflection(gen0, gen1, gen2) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`3\", [gen0, gen1, gen2], FSharpChoice$3, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]]]);\r\n}\r\n\r\nexport class FSharpChoice$4 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of4\", \"Choice2Of4\", \"Choice3Of4\", \"Choice4Of4\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$4$reflection(gen0, gen1, gen2, gen3) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`4\", [gen0, gen1, gen2, gen3], FSharpChoice$4, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]]]);\r\n}\r\n\r\nexport class FSharpChoice$5 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of5\", \"Choice2Of5\", \"Choice3Of5\", \"Choice4Of5\", \"Choice5Of5\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$5$reflection(gen0, gen1, gen2, gen3, gen4) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`5\", [gen0, gen1, gen2, gen3, gen4], FSharpChoice$5, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]]]);\r\n}\r\n\r\nexport class FSharpChoice$6 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of6\", \"Choice2Of6\", \"Choice3Of6\", \"Choice4Of6\", \"Choice5Of6\", \"Choice6Of6\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$6$reflection(gen0, gen1, gen2, gen3, gen4, gen5) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`6\", [gen0, gen1, gen2, gen3, gen4, gen5], FSharpChoice$6, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]]]);\r\n}\r\n\r\nexport class FSharpChoice$7 extends Union {\r\n    constructor(tag, ...fields) {\r\n        super();\r\n        this.tag = (tag | 0);\r\n        this.fields = fields;\r\n    }\r\n    cases() {\r\n        return [\"Choice1Of7\", \"Choice2Of7\", \"Choice3Of7\", \"Choice4Of7\", \"Choice5Of7\", \"Choice6Of7\", \"Choice7Of7\"];\r\n    }\r\n}\r\n\r\nexport function FSharpChoice$7$reflection(gen0, gen1, gen2, gen3, gen4, gen5, gen6) {\r\n    return union_type(\"FSharp.Core.FSharpChoice`7\", [gen0, gen1, gen2, gen3, gen4, gen5, gen6], FSharpChoice$7, () => [[[\"Item\", gen0]], [[\"Item\", gen1]], [[\"Item\", gen2]], [[\"Item\", gen3]], [[\"Item\", gen4]], [[\"Item\", gen5]], [[\"Item\", gen6]]]);\r\n}\r\n\r\nexport function Choice_makeChoice1Of2(x) {\r\n    return new FSharpChoice$2(0, x);\r\n}\r\n\r\nexport function Choice_makeChoice2Of2(x) {\r\n    return new FSharpChoice$2(1, x);\r\n}\r\n\r\nexport function Choice_tryValueIfChoice1Of2(x) {\r\n    if (x.tag === 0) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function Choice_tryValueIfChoice2Of2(x) {\r\n    if (x.tag === 1) {\r\n        return some(x.fields[0]);\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\n","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder.js\";\nimport { CancellationToken } from \"./AsyncBuilder.js\";\nimport { protectedCont } from \"./AsyncBuilder.js\";\nimport { protectedBind } from \"./AsyncBuilder.js\";\nimport { protectedReturn } from \"./AsyncBuilder.js\";\nimport { Choice_makeChoice1Of2, Choice_makeChoice2Of2 } from \"./Choice.js\";\nimport { TimeoutException } from \"./SystemException.js\";\n// Implemented just for type references\nexport class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// see AsyncBuilder.Delay\nfunction delay(generator) {\n    return protectedCont((ctx) => generator()(ctx));\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function throwIfCancellationRequested(token) {\n    if (token != null && token.isCancelled) {\n        throw new Error(\"Operation is cancelled\");\n    }\n}\nfunction throwAfter(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onError(new TimeoutException());\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function startChild(computation, ms) {\n    if (ms) {\n        const computationWithTimeout = protectedBind(parallel2(computation, throwAfter(ms)), xs => protectedReturn(xs[0]));\n        return startChild(computationWithTimeout);\n    }\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(Choice_makeChoice1Of2(x)),\n            onError: (ex) => ctx.onSuccess(Choice_makeChoice2Of2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return delay(() => awaitPromise(Promise.all(Array.from(computations, (w) => startAsPromise(w)))));\n}\nfunction parallel2(a, b) {\n    return delay(() => awaitPromise(Promise.all([startAsPromise(a), startAsPromise(b)])));\n}\nexport function sequential(computations) {\n    function _sequential(computations) {\n        let pr = Promise.resolve([]);\n        for (const c of computations) {\n            pr = pr.then(results => startAsPromise(c).then(r => results.concat([r])));\n        }\n        return pr;\n    }\n    return delay(() => awaitPromise(_sequential(computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function runSynchronously() {\n    throw new Error(\"Asynchronous code cannot be run synchronously in JS\");\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\nexport default Async;\n","import { compare, equals, structuralHash } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n","import { Observer } from \"./Observable.js\";\nimport { some, value } from \"./Option.js\";\nimport { Choice_tryValueIfChoice1Of2, Choice_tryValueIfChoice2Of2 } from \"./Choice.js\";\nexport class Event {\n    constructor() {\n        this.delegates = [];\n    }\n    Add(f) {\n        this._addHandler(f);\n    }\n    get Publish() {\n        return this;\n    }\n    Trigger(senderOrValue, valueOrUndefined) {\n        let sender;\n        let value;\n        if (valueOrUndefined === undefined) {\n            sender = null;\n            value = senderOrValue;\n        }\n        else {\n            sender = senderOrValue;\n            value = valueOrUndefined;\n        }\n        this.delegates.forEach((f) => f.length === 1 ? f(value) : f(sender, value));\n    }\n    // IDelegateEvent<T> methods\n    AddHandler(handler) {\n        this._addHandler(handler);\n    }\n    RemoveHandler(handler) {\n        this._removeHandler(handler);\n    }\n    // IObservable<T> methods\n    Subscribe(arg) {\n        const callback = typeof arg === \"function\"\n            ? arg\n            : arg.OnNext;\n        this._addHandler(callback);\n        return { Dispose: () => { this._removeHandler(callback); } };\n    }\n    _addHandler(f) {\n        this.delegates.push(f);\n    }\n    _removeHandler(f) {\n        const index = this.delegates.indexOf(f);\n        if (index > -1) {\n            this.delegates.splice(index, 1);\n        }\n    }\n}\nexport function add(callback, sourceEvent) {\n    if (sourceEvent instanceof Event) {\n        sourceEvent.Add(callback);\n    }\n    else {\n        sourceEvent.Subscribe(new Observer(callback));\n    }\n}\nexport function choose(chooser, sourceEvent) {\n    const ev = new Event();\n    add((t) => {\n        const u = chooser(t);\n        if (u != null) {\n            ev.Trigger(value(u));\n        }\n    }, sourceEvent);\n    return ev;\n}\nexport function filter(predicate, sourceEvent) {\n    return choose((x) => predicate(x) ? some(x) : undefined, sourceEvent);\n}\nexport function map(mapping, sourceEvent) {\n    const ev = new Event();\n    add((t) => ev.Trigger(mapping(t)), sourceEvent);\n    return ev;\n}\nexport function merge(event1, event2) {\n    const ev = new Event();\n    const fn = (x) => ev.Trigger(x);\n    add(fn, event1);\n    add(fn, event2);\n    return ev;\n}\nexport function pairwise(sourceEvent) {\n    const ev = new Event();\n    let last;\n    let haveLast = false;\n    add((next) => {\n        if (haveLast) {\n            ev.Trigger([last, next]);\n        }\n        last = next;\n        haveLast = true;\n    }, sourceEvent);\n    return ev;\n}\nexport function partition(predicate, sourceEvent) {\n    return [filter(predicate, sourceEvent), filter((x) => !predicate(x), sourceEvent)];\n}\nexport function scan(collector, state, sourceEvent) {\n    return map((t) => state = collector(state, t), sourceEvent);\n}\nexport function split(splitter, sourceEvent) {\n    return [\n        choose((v) => Choice_tryValueIfChoice1Of2(splitter(v)), sourceEvent),\n        choose((v) => Choice_tryValueIfChoice2Of2(splitter(v)), sourceEvent),\n    ];\n}\nexport function createEvent(addHandler, removeHandler) {\n    return {\n        AddHandler(h) { addHandler(h); },\n        RemoveHandler(h) { removeHandler(h); },\n        Subscribe(r) {\n            const h = (_, args) => r.OnNext(args);\n            addHandler(h);\n            return {\n                Dispose() { removeHandler(h); }\n            };\n        }\n    };\n}\nexport default Event;\n","import { Choice_tryValueIfChoice1Of2, Choice_tryValueIfChoice2Of2 } from \"./Choice.js\";\nimport { value } from \"./Option.js\";\nexport class Observer {\n    constructor(onNext, onError, onCompleted) {\n        this.OnNext = onNext;\n        this.OnError = onError || ((_e) => { return; });\n        this.OnCompleted = onCompleted || (() => { return; });\n    }\n}\nclass Observable {\n    constructor(subscribe) {\n        this.Subscribe = subscribe;\n    }\n}\nexport function protect(f, succeed, fail) {\n    try {\n        return succeed(f());\n    }\n    catch (e) {\n        fail(e);\n    }\n}\nexport function add(callback, source) {\n    source.Subscribe(new Observer(callback));\n}\nexport function choose(chooser, source) {\n    return new Observable((observer) => source.Subscribe(new Observer((t) => protect(() => chooser(t), (u) => { if (u != null) {\n        observer.OnNext(value(u));\n    } }, observer.OnError), observer.OnError, observer.OnCompleted)));\n}\nexport function filter(predicate, source) {\n    return choose((x) => predicate(x) ? x : null, source);\n}\nexport function map(mapping, source) {\n    return new Observable((observer) => source.Subscribe(new Observer((t) => {\n        protect(() => mapping(t), observer.OnNext, observer.OnError);\n    }, observer.OnError, observer.OnCompleted)));\n}\nexport function merge(source1, source2) {\n    return new Observable((observer) => {\n        let stopped = false;\n        let completed1 = false;\n        let completed2 = false;\n        const h1 = source1.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed1 = true;\n                if (completed2) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        const h2 = source2.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed2 = true;\n                if (completed1) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        return {\n            Dispose() {\n                h1.Dispose();\n                h2.Dispose();\n            },\n        };\n    });\n}\nexport function pairwise(source) {\n    return new Observable((observer) => {\n        let last;\n        return source.Subscribe(new Observer((next) => {\n            if (last != null) {\n                observer.OnNext([last, next]);\n            }\n            last = next;\n        }, observer.OnError, observer.OnCompleted));\n    });\n}\nexport function partition(predicate, source) {\n    return [filter(predicate, source), filter((x) => !predicate(x), source)];\n}\nexport function scan(collector, state, source) {\n    return new Observable((observer) => {\n        return source.Subscribe(new Observer((t) => {\n            protect(() => collector(state, t), (u) => { state = u; observer.OnNext(u); }, observer.OnError);\n        }, observer.OnError, observer.OnCompleted));\n    });\n}\nexport function split(splitter, source) {\n    return [\n        choose((v) => Choice_tryValueIfChoice1Of2(splitter(v)), source),\n        choose((v) => Choice_tryValueIfChoice2Of2(splitter(v)), source)\n    ];\n}\nexport function subscribe(callback, source) {\n    return source.Subscribe(new Observer(callback));\n}\n","namespace Elmish\n\n(**\nLog\n---------\nBasic cross-platform logging API.\n\n*)\nmodule internal Log =\n\n#if FABLE_COMPILER\n    open Fable.Core.JS\n\n    let onError (text: string, ex: exn) = console.error (text,ex)\n    let toConsole(text: string, o: #obj) = console.log(text,o)\n\n#else\n#if NETSTANDARD2_0\n    let onError (text: string, ex: exn) = System.Diagnostics.Trace.TraceError(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#else\n    let onError (text: string, ex: exn) = System.Console.Error.WriteLine(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#endif\n#endif\n\n#if FABLE_COMPILER\nmodule internal Timer =\n    open System.Timers\n    let delay interval callback =\n        let t = new Timer(float interval, AutoReset = false)\n        t.Elapsed.Add callback\n        t.Enabled <- true\n        t.Start()\n#endif\n","import Event from \"./Event.js\";\nexport class Timer {\n    constructor(interval) {\n        this._enabled = false;\n        this._isDisposed = false;\n        this._intervalId = 0;\n        this._timeoutId = 0;\n        this.Interval = interval && interval > 0 ? interval : 100;\n        this.AutoReset = true;\n        this._elapsed = new Event();\n    }\n    Elapsed() {\n        return this._elapsed;\n    }\n    get Enabled() {\n        return this._enabled;\n    }\n    set Enabled(x) {\n        if (!this._isDisposed && this._enabled !== x) {\n            this._enabled = x;\n            if (this._enabled) {\n                if (this.AutoReset) {\n                    this._intervalId = setInterval(() => {\n                        if (!this.AutoReset) {\n                            this.Enabled = false;\n                        }\n                        this._elapsed.Trigger(new Date());\n                    }, this.Interval);\n                }\n                else {\n                    this._timeoutId = setTimeout(() => {\n                        this.Enabled = false;\n                        this._timeoutId = 0;\n                        if (this.AutoReset) {\n                            this.Enabled = true;\n                        }\n                        this._elapsed.Trigger(new Date());\n                    }, this.Interval);\n                }\n            }\n            else {\n                if (this._timeoutId) {\n                    clearTimeout(this._timeoutId);\n                    this._timeoutId = 0;\n                }\n                if (this._intervalId) {\n                    clearInterval(this._intervalId);\n                    this._intervalId = 0;\n                }\n            }\n        }\n    }\n    Dispose() {\n        this.Enabled = false;\n        this._isDisposed = true;\n    }\n    Close() {\n        this.Dispose();\n    }\n    Start() {\n        this.Enabled = true;\n    }\n    Stop() {\n        this.Enabled = false;\n    }\n}\nexport default Timer;\n","(**\nCmd\n---------\nCore abstractions for dispatching messages in Elmish.\n\n*)\n\nnamespace Elmish\n\nopen System\n\n/// Dispatch - feed new message into the processing loop\ntype Dispatch<'msg> = 'msg -> unit\n\n/// Subscription - return immediately, but may schedule dispatch of a message at any time\ntype Sub<'msg> = Dispatch<'msg> -> unit\n\n/// Cmd - container for subscriptions that may produce messages\ntype Cmd<'msg> = Sub<'msg> list\n\n/// Cmd module for creating and manipulating commands\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    /// Execute the commands using the supplied dispatcher\n    let internal exec onError (dispatch: Dispatch<'msg>) (cmd: Cmd<'msg>) =\n        cmd |> List.iter (fun call -> try call dispatch with ex -> onError ex)\n\n    /// None - no commands, also known as `[]`\n    let none : Cmd<'msg> =\n        []\n\n    /// When emitting the message, map to another type\n    let map (f: 'a -> 'msg) (cmd: Cmd<'a>) : Cmd<'msg> =\n        cmd |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    /// Aggregate multiple commands\n    let batch (cmds: #seq<Cmd<'msg>>) : Cmd<'msg> =\n        cmds |> List.concat\n\n    /// Command to call the subscriber\n    let ofSub (sub: Sub<'msg>) : Cmd<'msg> =\n        [sub]\n\n    module OfFunc =\n        /// Command to evaluate a simple function and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to evaluate a simple function and map the success to a message\n        /// discarding any possible error\n        let perform (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    ()\n            [bind]\n\n        /// Command to evaluate a simple function and map the error (in case of exception)\n        let attempt (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to issue a specific message\n        let result (msg:'msg) : Cmd<'msg> =\n            [fun dispatch -> dispatch msg]\n\n    module OfAsyncWith =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either (start: Async<unit> -> unit) \n                   (task: 'a -> Async<_>)\n                   (arg: 'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    dispatch (match r with\n                             | Choice1Of2 x -> ofSuccess x\n                             | Choice2Of2 x -> ofError x)\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block to the message\n        let result (start: Async<unit> -> unit) \n                   (task: Async<'msg>) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task\n                    dispatch r\n                }\n            [bind >> start]\n\n    module OfAsync =\n#if FABLE_COMPILER\n        let start x = Timer.delay 0 (fun _ -> Async.StartImmediate x)\n#else\n        let inline start x = Async.Start x\n#endif    \n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either start task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform start task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt start task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result start task\n\n    module OfAsyncImmediate =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either Async.StartImmediate task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform Async.StartImmediate task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt Async.StartImmediate task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result Async.StartImmediate task\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>)\n                    (arg:'a)\n                    (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch =\n                task.``then`` dispatch\n                |> ignore\n            [bind]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise (task: 'a -> Fable.Core.JS.Promise<_>)\n                         (arg:'a)\n                         (ofSuccess: _ -> 'msg)\n                         (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError                     \n#else\n    open System.Threading.Tasks\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>)\n                          (arg:'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>)\n                      (arg:'a)\n                      (ofSuccess: _ -> 'msg)\n                      (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n\n    // Synonymous with `OfFunc.result`, may be removed in the future\n    let inline ofMsg (msg:'msg) : Cmd<'msg> =\n        OfFunc.result msg\n\n    [<Obsolete(\"Use `Cmd.OfAsync.either` instead\")>]\n    let inline ofAsync (task: 'a -> Async<_>)\n                       (arg: 'a)\n                       (ofSuccess: _ -> 'msg)\n                       (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfAsync.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.either` instead\")>]\n    let inline ofFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.perform` instead\")>]\n    let inline performFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.perform task arg ofSuccess\n\n    [<Obsolete(\"Use `Cmd.OfFunc.attempt` instead\")>]\n    let attemptFunc (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.attempt task arg ofError\n\n","import { clear, equals, isArrayLike, isDisposable, toIterator, disposeSafe, getEnumerator } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { Operators_Lock, Operators_NullArg } from \"./FSharp.Core.js\";\r\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, windowed as windowed_1, splitInto as splitInto_1, map as map_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\r\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\r\nimport { SR_indexOutOfBounds } from \"./Global.js\";\r\n\r\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\r\n\r\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\r\n\r\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\r\n\r\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\r\n\r\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\r\n\r\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\r\n\r\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\r\n\r\nexport function Enumerator_noReset() {\r\n    throw (new Error(SR_resetNotSupported));\r\n}\r\n\r\nexport function Enumerator_notStarted() {\r\n    throw (new Error(SR_enumerationNotStarted));\r\n}\r\n\r\nexport function Enumerator_alreadyFinished() {\r\n    throw (new Error(SR_enumerationAlreadyFinished));\r\n}\r\n\r\nexport class Enumerator_Seq {\r\n    constructor(f) {\r\n        this.f = f;\r\n    }\r\n    toString() {\r\n        const xs = this;\r\n        const maxCount = 4;\r\n        let i = 0;\r\n        let str = \"seq [\";\r\n        const e = getEnumerator(xs);\r\n        try {\r\n            while ((i < maxCount) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                if (i > 0) {\r\n                    str = (str + \"; \");\r\n                }\r\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                i = ((i + 1) | 0);\r\n            }\r\n            if (i === maxCount) {\r\n                str = (str + \"; ...\");\r\n            }\r\n            return str + \"]\";\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n    GetEnumerator() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const x = this;\r\n        return x.f();\r\n    }\r\n}\r\n\r\nexport function Enumerator_Seq$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\r\n}\r\n\r\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\r\n    return new Enumerator_Seq(f);\r\n}\r\n\r\nexport class Enumerator_FromFunctions$1 {\r\n    constructor(current, next, dispose) {\r\n        this.current = current;\r\n        this.next = next;\r\n        this.dispose = dispose;\r\n    }\r\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.get_Current\"]() {\r\n        const __ = this;\r\n        return __.current();\r\n    }\r\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n        const __ = this;\r\n        return __.next();\r\n    }\r\n    [\"System.Collections.IEnumerator.Reset\"]() {\r\n        Enumerator_noReset();\r\n    }\r\n    Dispose() {\r\n        const __ = this;\r\n        __.dispose();\r\n    }\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\r\n}\r\n\r\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\r\n    return new Enumerator_FromFunctions$1(current, next, dispose);\r\n}\r\n\r\nexport function Enumerator_cast(e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.IEnumerator.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        if (isDisposable(e)) {\r\n            disposeSafe(e);\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_concat(sources) {\r\n    let outerOpt = void 0;\r\n    let innerOpt = void 0;\r\n    let started = false;\r\n    let finished = false;\r\n    let curr = void 0;\r\n    const finish = () => {\r\n        finished = true;\r\n        if (innerOpt != null) {\r\n            const inner = innerOpt;\r\n            try {\r\n                disposeSafe(inner);\r\n            }\r\n            finally {\r\n                innerOpt = (void 0);\r\n            }\r\n        }\r\n        if (outerOpt != null) {\r\n            const outer = outerOpt;\r\n            try {\r\n                disposeSafe(outer);\r\n            }\r\n            finally {\r\n                outerOpt = (void 0);\r\n            }\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        else if (finished) {\r\n            Enumerator_alreadyFinished();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        let copyOfStruct;\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (finished) {\r\n            return false;\r\n        }\r\n        else {\r\n            let res = void 0;\r\n            while (res == null) {\r\n                const matchValue = [outerOpt, innerOpt];\r\n                if (matchValue[0] != null) {\r\n                    if (matchValue[1] != null) {\r\n                        const inner_1 = matchValue[1];\r\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                            res = true;\r\n                        }\r\n                        else {\r\n                            try {\r\n                                disposeSafe(inner_1);\r\n                            }\r\n                            finally {\r\n                                innerOpt = (void 0);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const outer_1 = matchValue[0];\r\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                            innerOpt = ((copyOfStruct = ie, getEnumerator(copyOfStruct)));\r\n                        }\r\n                        else {\r\n                            finish();\r\n                            res = false;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    outerOpt = getEnumerator(sources);\r\n                }\r\n            }\r\n            return value_1(res);\r\n        }\r\n    }, () => {\r\n        if (!finished) {\r\n            finish();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_enumerateThenFinally(f, e) {\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\r\n        try {\r\n            disposeSafe(e);\r\n        }\r\n        finally {\r\n            f();\r\n        }\r\n    });\r\n}\r\n\r\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\r\n    let started = false;\r\n    let curr = void 0;\r\n    let state = some(openf());\r\n    const dispose = () => {\r\n        if (state != null) {\r\n            const x_1 = value_1(state);\r\n            try {\r\n                closef(x_1);\r\n            }\r\n            finally {\r\n                state = (void 0);\r\n            }\r\n        }\r\n    };\r\n    const finish = () => {\r\n        try {\r\n            dispose();\r\n        }\r\n        finally {\r\n            curr = (void 0);\r\n        }\r\n    };\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (!started) {\r\n            Enumerator_notStarted();\r\n        }\r\n        if (curr != null) {\r\n            return value_1(curr);\r\n        }\r\n        else {\r\n            return Enumerator_alreadyFinished();\r\n        }\r\n    }, () => {\r\n        if (!started) {\r\n            started = true;\r\n        }\r\n        if (state != null) {\r\n            const s = value_1(state);\r\n            let matchValue_1;\r\n            try {\r\n                matchValue_1 = compute(s);\r\n            }\r\n            catch (matchValue) {\r\n                finish();\r\n                throw matchValue;\r\n            }\r\n            if (matchValue_1 != null) {\r\n                curr = matchValue_1;\r\n                return true;\r\n            }\r\n            else {\r\n                finish();\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, dispose);\r\n}\r\n\r\nexport function Enumerator_unfold(f, state) {\r\n    let curr = void 0;\r\n    let acc = state;\r\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\r\n        if (curr != null) {\r\n            const x = curr[0];\r\n            const st = curr[1];\r\n            return x;\r\n        }\r\n        else {\r\n            return Enumerator_notStarted();\r\n        }\r\n    }, () => {\r\n        curr = f(acc);\r\n        if (curr != null) {\r\n            const x_1 = curr[0];\r\n            const st_1 = curr[1];\r\n            acc = st_1;\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }, () => {\r\n    });\r\n}\r\n\r\nexport function indexNotFound() {\r\n    throw (new Error(SR_keyNotFoundAlt));\r\n}\r\n\r\nexport function checkNonNull(argName, arg) {\r\n    if (arg == null) {\r\n        Operators_NullArg(argName);\r\n    }\r\n}\r\n\r\nexport function mkSeq(f) {\r\n    return Enumerator_Seq_$ctor_673A07F2(f);\r\n}\r\n\r\nexport function ofSeq(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return getEnumerator(xs);\r\n}\r\n\r\nexport function delay(generator) {\r\n    return mkSeq(() => getEnumerator(generator()));\r\n}\r\n\r\nexport function concat(sources) {\r\n    return mkSeq(() => Enumerator_concat(sources));\r\n}\r\n\r\nexport function unfold(generator, state) {\r\n    return mkSeq(() => Enumerator_unfold(generator, state));\r\n}\r\n\r\nexport function empty() {\r\n    return delay(() => (new Array(0)));\r\n}\r\n\r\nexport function singleton(x) {\r\n    return delay(() => singleton_1(x));\r\n}\r\n\r\nexport function ofArray(arr) {\r\n    return arr;\r\n}\r\n\r\nexport function toArray(xs) {\r\n    if (xs instanceof FSharpList) {\r\n        return toArray_1(xs);\r\n    }\r\n    else {\r\n        return Array.from(xs);\r\n    }\r\n}\r\n\r\nexport function ofList(xs) {\r\n    return xs;\r\n}\r\n\r\nexport function toList(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return ofArray_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return xs;\r\n    }\r\n    else {\r\n        return ofSeq_1(xs);\r\n    }\r\n}\r\n\r\nexport function generate(create, compute, dispose) {\r\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\r\n}\r\n\r\nexport function generateIndexed(create, compute, dispose) {\r\n    return mkSeq(() => {\r\n        let i = -1;\r\n        return Enumerator_generateWhileSome(create, (x) => {\r\n            i = ((i + 1) | 0);\r\n            return compute(i, x);\r\n        }, dispose);\r\n    });\r\n}\r\n\r\nexport function append(xs, ys) {\r\n    return concat([xs, ys]);\r\n}\r\n\r\nexport function cast(xs) {\r\n    return mkSeq(() => {\r\n        checkNonNull(\"source\", xs);\r\n        return Enumerator_cast(getEnumerator(xs));\r\n    });\r\n}\r\n\r\nexport function choose(chooser, xs) {\r\n    return generate(() => ofSeq(xs), (e) => {\r\n        let curr = void 0;\r\n        while ((curr == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return curr;\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function compareWith(comparer, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let c = 0;\r\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n            while (((c === 0) && b1) && b2) {\r\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\r\n                if (c === 0) {\r\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\r\n                }\r\n            }\r\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function contains(value, xs, comparer) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function enumerateFromFunctions(create, moveNext, current) {\r\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : (void 0)), (x_1) => {\r\n        const matchValue = x_1;\r\n        if (isDisposable(matchValue)) {\r\n            disposeSafe(matchValue);\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateThenFinally(source, compensation) {\r\n    const compensation_1 = compensation;\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\r\n        }\r\n        catch (matchValue) {\r\n            compensation_1();\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateUsing(resource, source) {\r\n    const compensation = () => {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            let copyOfStruct = resource;\r\n            disposeSafe(copyOfStruct);\r\n        }\r\n    };\r\n    return mkSeq(() => {\r\n        try {\r\n            return Enumerator_enumerateThenFinally(compensation, (ofSeq)(source(resource)));\r\n        }\r\n        catch (matchValue_1) {\r\n            compensation();\r\n            throw matchValue_1;\r\n        }\r\n    });\r\n}\r\n\r\nexport function enumerateWhile(guard, xs) {\r\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : (void 0)), 0));\r\n}\r\n\r\nexport function filter(f, xs) {\r\n    return choose((x) => {\r\n        if (f(x)) {\r\n            return some(x);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, xs);\r\n}\r\n\r\nexport function exists(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let found = false;\r\n        while ((!found) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return found;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function exists2(predicate, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let found = false;\r\n            while (((!found) && e1[\"System.Collections.IEnumerator.MoveNext\"]()) && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return found;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function exactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                throw (new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n            else {\r\n                return v;\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function tryExactlyOne(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? (void 0) : some(v);\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function tryFind(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            if (predicate(c)) {\r\n                res = some(c);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function find(predicate, xs) {\r\n    const matchValue = tryFind(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindBack(predicate, xs) {\r\n    return tryFindBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findBack(predicate, xs) {\r\n    const matchValue = tryFindBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function tryFindIndex(predicate, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (i_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const i = i_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\r\n                        return i;\r\n                    }\r\n                    else {\r\n                        i_mut = (i + 1);\r\n                        continue loop;\r\n                    }\r\n                }\r\n                else {\r\n                    return void 0;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return loop(0);\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function findIndex(predicate, xs) {\r\n    const matchValue = tryFindIndex(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function tryFindIndexBack(predicate, xs) {\r\n    return tryFindIndexBack_1(predicate, toArray(xs));\r\n}\r\n\r\nexport function findIndexBack(predicate, xs) {\r\n    const matchValue = tryFindIndexBack(predicate, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound() | 0;\r\n    }\r\n    else {\r\n        return matchValue | 0;\r\n    }\r\n}\r\n\r\nexport function fold(folder, state, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let acc = state;\r\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return acc;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function foldBack(folder, xs, state) {\r\n    return foldBack_1(folder, toArray(xs), state);\r\n}\r\n\r\nexport function fold2(folder, state, xs, ys) {\r\n    const e1 = ofSeq(xs);\r\n    try {\r\n        const e2 = ofSeq(ys);\r\n        try {\r\n            let acc = state;\r\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            return acc;\r\n        }\r\n        finally {\r\n            disposeSafe(e2);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e1);\r\n    }\r\n}\r\n\r\nexport function foldBack2(folder, xs, ys, state) {\r\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\r\n}\r\n\r\nexport function forAll(predicate, xs) {\r\n    return !exists((x) => (!predicate(x)), xs);\r\n}\r\n\r\nexport function forAll2(predicate, xs, ys) {\r\n    return !exists2((x, y) => (!predicate(x, y)), xs, ys);\r\n}\r\n\r\nexport function tryHead(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryHead_1(xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryHead_2(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function head(xs) {\r\n    const matchValue = tryHead(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function initialize(count, f) {\r\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : (void 0)), 0);\r\n}\r\n\r\nexport function initializeInfinite(f) {\r\n    return initialize(2147483647, f);\r\n}\r\n\r\nexport function isEmpty(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length === 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return isEmpty_1(xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function tryItem(index, xs) {\r\n    if (isArrayLike(xs)) {\r\n        return tryItem_1(index, xs);\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return tryItem_2(index, xs);\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            const loop = (index_1_mut) => {\r\n                loop:\r\n                while (true) {\r\n                    const index_1 = index_1_mut;\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        return void 0;\r\n                    }\r\n                    else if (index_1 === 0) {\r\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    }\r\n                    else {\r\n                        index_1_mut = (index_1 - 1);\r\n                        continue loop;\r\n                    }\r\n                    break;\r\n                }\r\n            };\r\n            return loop(index);\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function item(index, xs) {\r\n    const matchValue = tryItem(index, xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function iterate(action, xs) {\r\n    fold((unitVar0, x) => {\r\n        action(x);\r\n    }, void 0, xs);\r\n}\r\n\r\nexport function iterate2(action, xs, ys) {\r\n    fold2((unitVar0, x, y) => {\r\n        action(x, y);\r\n    }, void 0, xs, ys);\r\n}\r\n\r\nexport function iterateIndexed(action, xs) {\r\n    fold((i, x) => {\r\n        action(i, x);\r\n        return (i + 1) | 0;\r\n    }, 0, xs);\r\n}\r\n\r\nexport function iterateIndexed2(action, xs, ys) {\r\n    fold2((i, x, y) => {\r\n        action(i, x, y);\r\n        return (i + 1) | 0;\r\n    }, 0, xs, ys);\r\n}\r\n\r\nexport function tryLast(xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    return acc;\r\n                }\r\n                else {\r\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n                    continue loop;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function last(xs) {\r\n    const matchValue = tryLast(xs);\r\n    if (matchValue == null) {\r\n        throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function length(xs) {\r\n    if (isArrayLike(xs)) {\r\n        return xs.length | 0;\r\n    }\r\n    else if (xs instanceof FSharpList) {\r\n        return length_1(xs) | 0;\r\n    }\r\n    else {\r\n        const e = ofSeq(xs);\r\n        try {\r\n            let count = 0;\r\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                count = ((count + 1) | 0);\r\n            }\r\n            return count | 0;\r\n        }\r\n        finally {\r\n            disposeSafe(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport function map(mapping, xs) {\r\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function mapIndexed(mapping, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function indexed(xs) {\r\n    return mapIndexed((i, x) => [i, x], xs);\r\n}\r\n\r\nexport function map2(mapping, xs, ys) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            disposeSafe(tupledArg_1[1]);\r\n        }\r\n    });\r\n}\r\n\r\nexport function mapIndexed2(mapping, xs, ys) {\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            disposeSafe(tupledArg_1[1]);\r\n        }\r\n    });\r\n}\r\n\r\nexport function map3(mapping, xs, ys, zs) {\r\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        const e3 = tupledArg[2];\r\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) && e3[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : (void 0);\r\n    }, (tupledArg_1) => {\r\n        try {\r\n            disposeSafe(tupledArg_1[0]);\r\n        }\r\n        finally {\r\n            try {\r\n                disposeSafe(tupledArg_1[1]);\r\n            }\r\n            finally {\r\n                disposeSafe(tupledArg_1[2]);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function readOnly(xs) {\r\n    checkNonNull(\"source\", xs);\r\n    return map((x) => x, xs);\r\n}\r\n\r\nexport class CachedSeq$1 {\r\n    constructor(cleanup, res) {\r\n        this.cleanup = cleanup;\r\n        this.res = res;\r\n    }\r\n    Dispose() {\r\n        const _ = this;\r\n        _.cleanup();\r\n    }\r\n    GetEnumerator() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const _ = this;\r\n        return getEnumerator(_.res);\r\n    }\r\n}\r\n\r\nexport function CachedSeq$1$reflection(gen0) {\r\n    return class_type(\"SeqModule.CachedSeq`1\", [gen0], CachedSeq$1);\r\n}\r\n\r\nexport function CachedSeq$1_$ctor_Z7A8347D4(cleanup, res) {\r\n    return new CachedSeq$1(cleanup, res);\r\n}\r\n\r\nexport function CachedSeq$1__Clear(_) {\r\n    _.cleanup();\r\n}\r\n\r\nexport function cache(source) {\r\n    checkNonNull(\"source\", source);\r\n    const prefix = [];\r\n    let enumeratorR = void 0;\r\n    return CachedSeq$1_$ctor_Z7A8347D4(() => {\r\n        Operators_Lock(prefix, () => {\r\n            clear(prefix);\r\n            let pattern_matching_result, e;\r\n            if (enumeratorR != null) {\r\n                if (value_1(enumeratorR) != null) {\r\n                    pattern_matching_result = 0;\r\n                    e = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    pattern_matching_result = 1;\r\n                }\r\n            }\r\n            else {\r\n                pattern_matching_result = 1;\r\n            }\r\n            switch (pattern_matching_result) {\r\n                case 0: {\r\n                    disposeSafe(e);\r\n                    break;\r\n                }\r\n            }\r\n            enumeratorR = (void 0);\r\n        });\r\n    }, unfold((i_1) => Operators_Lock(prefix, () => {\r\n        if (i_1 < prefix.length) {\r\n            return [prefix[i_1], i_1 + 1];\r\n        }\r\n        else {\r\n            if (i_1 >= prefix.length) {\r\n                let optEnumerator_2;\r\n                if (enumeratorR != null) {\r\n                    optEnumerator_2 = value_1(enumeratorR);\r\n                }\r\n                else {\r\n                    const optEnumerator = getEnumerator(source);\r\n                    enumeratorR = some(optEnumerator);\r\n                    optEnumerator_2 = optEnumerator;\r\n                }\r\n                if (optEnumerator_2 == null) {\r\n                }\r\n                else {\r\n                    const enumerator = optEnumerator_2;\r\n                    if (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        void (prefix.push(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\r\n                    }\r\n                    else {\r\n                        disposeSafe(enumerator);\r\n                        enumeratorR = some(void 0);\r\n                    }\r\n                }\r\n            }\r\n            return (i_1 < prefix.length) ? [prefix[i_1], i_1 + 1] : (void 0);\r\n        }\r\n    }), 0));\r\n}\r\n\r\nexport function allPairs(xs, ys) {\r\n    const ysCache = cache(ys);\r\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\r\n}\r\n\r\nexport function mapFold(mapping, state, xs) {\r\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function mapFoldBack(mapping, xs, state) {\r\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\r\n    return [readOnly(patternInput[0]), patternInput[1]];\r\n}\r\n\r\nexport function tryPick(chooser, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        let res = void 0;\r\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        return res;\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function pick(chooser, xs) {\r\n    const matchValue = tryPick(chooser, xs);\r\n    if (matchValue == null) {\r\n        return indexNotFound();\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function reduce(folder, xs) {\r\n    const e = ofSeq(xs);\r\n    try {\r\n        const loop = (acc_mut) => {\r\n            loop:\r\n            while (true) {\r\n                const acc = acc_mut;\r\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return acc;\r\n                }\r\n                break;\r\n            }\r\n        };\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else {\r\n            throw (new Error(SR_inputSequenceEmpty));\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(e);\r\n    }\r\n}\r\n\r\nexport function reduceBack(folder, xs) {\r\n    const arr = toArray(xs);\r\n    if (arr.length > 0) {\r\n        return arr.reduceRight(folder);\r\n    }\r\n    else {\r\n        throw (new Error(SR_inputSequenceEmpty));\r\n    }\r\n}\r\n\r\nexport function replicate(n, x) {\r\n    return initialize(n, (_arg1) => x);\r\n}\r\n\r\nexport function reverse(xs) {\r\n    return delay(() => ofArray(reverse_1(toArray(xs))));\r\n}\r\n\r\nexport function scan(folder, state, xs) {\r\n    return delay(() => {\r\n        let acc = state;\r\n        return concat([singleton(state), map((x) => {\r\n            acc = folder(acc, x);\r\n            return acc;\r\n        }, xs)]);\r\n    });\r\n}\r\n\r\nexport function scanBack(folder, xs, state) {\r\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\r\n}\r\n\r\nexport function skip(count, source) {\r\n    return mkSeq(() => {\r\n        const e = ofSeq(source);\r\n        try {\r\n            for (let _ = 1; _ <= count; _++) {\r\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                    throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n                }\r\n            }\r\n            return Enumerator_enumerateThenFinally(() => {\r\n            }, e);\r\n        }\r\n        catch (matchValue) {\r\n            disposeSafe(e);\r\n            throw matchValue;\r\n        }\r\n    });\r\n}\r\n\r\nexport function skipWhile(predicate, xs) {\r\n    return delay(() => {\r\n        let skipped = true;\r\n        return filter((x) => {\r\n            if (skipped) {\r\n                skipped = predicate(x);\r\n            }\r\n            return !skipped;\r\n        }, xs);\r\n    });\r\n}\r\n\r\nexport function tail(xs) {\r\n    return skip(1, xs);\r\n}\r\n\r\nexport function take(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < count) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\"));\r\n            }\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function takeWhile(predicate, xs) {\r\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() && predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function truncate(count, xs) {\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) && e[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0)), (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function zip(xs, ys) {\r\n    return map2((x, y) => [x, y], xs, ys);\r\n}\r\n\r\nexport function zip3(xs, ys, zs) {\r\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\r\n}\r\n\r\nexport function collect(mapping, xs) {\r\n    return delay(() => concat(map(mapping, xs)));\r\n}\r\n\r\nexport function where(predicate, xs) {\r\n    return filter(predicate, xs);\r\n}\r\n\r\nexport function pairwise(xs) {\r\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\r\n}\r\n\r\nexport function splitInto(chunks, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs)))));\r\n}\r\n\r\nexport function windowed(windowSize, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs)))));\r\n}\r\n\r\nexport function transpose(xss) {\r\n    return delay(() => ofArray(map_1(ofArray, transpose_1(map_1(toArray, toArray(xss))))));\r\n}\r\n\r\nexport function sortWith(comparer, xs) {\r\n    return delay(() => {\r\n        const arr = toArray(xs);\r\n        arr.sort(comparer);\r\n        return ofArray(arr);\r\n    });\r\n}\r\n\r\nexport function sort(xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\r\n}\r\n\r\nexport function sortBy(projection, xs, comparer) {\r\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\r\n}\r\n\r\nexport function sortDescending(xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\r\n}\r\n\r\nexport function sortByDescending(projection, xs, comparer) {\r\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\r\n}\r\n\r\nexport function sum(xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\r\n}\r\n\r\nexport function sumBy(f, xs, adder) {\r\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\r\n}\r\n\r\nexport function maxBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function max(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\r\n}\r\n\r\nexport function minBy(projection, xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function min(xs, comparer) {\r\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\r\n}\r\n\r\nexport function average(xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, x);\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function averageBy(f, xs, averager) {\r\n    let count = 0;\r\n    const total = fold((acc, x) => {\r\n        count = ((count + 1) | 0);\r\n        return averager.Add(acc, f(x));\r\n    }, averager.GetZero(), xs);\r\n    if (count === 0) {\r\n        throw (new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\"));\r\n    }\r\n    else {\r\n        return averager.DivideByInt(total, count);\r\n    }\r\n}\r\n\r\nexport function permute(f, xs) {\r\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\r\n}\r\n\r\nexport function chunkBySize(chunkSize, xs) {\r\n    return delay(() => ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs)))));\r\n}\r\n\r\nexport function insertAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if (i === index) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function insertManyAt(index, ys, xs) {\r\n    let status = -1;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\r\n        const e1 = tupledArg[0];\r\n        const e2 = tupledArg[1];\r\n        if (i === index) {\r\n            status = 0;\r\n        }\r\n        let inserted;\r\n        if (status === 0) {\r\n            if (e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                inserted = some(e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                status = 1;\r\n                inserted = (void 0);\r\n            }\r\n        }\r\n        else {\r\n            inserted = (void 0);\r\n        }\r\n        if (inserted == null) {\r\n            if (e1[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                if (status < 1) {\r\n                    throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n                }\r\n                return void 0;\r\n            }\r\n        }\r\n        else {\r\n            return some(value_1(inserted));\r\n        }\r\n    }, (tupledArg_1) => {\r\n        disposeSafe(tupledArg_1[0]);\r\n        disposeSafe(tupledArg_1[1]);\r\n    });\r\n}\r\n\r\nexport function removeAt(index, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function removeManyAt(index, count, xs) {\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if (i < index) {\r\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n            }\r\n            else {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n        }\r\n        else {\r\n            if (i === index) {\r\n                for (let _ = 1; _ <= count; _++) {\r\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n                        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"count\"));\r\n                    }\r\n                }\r\n            }\r\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : (void 0);\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\nexport function updateAt(index, y, xs) {\r\n    let isDone = false;\r\n    if (index < 0) {\r\n        throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n    }\r\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\r\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\r\n        }\r\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            isDone = true;\r\n            return some(y);\r\n        }\r\n        else {\r\n            if (!isDone) {\r\n                throw (new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\"));\r\n            }\r\n            return void 0;\r\n        }\r\n    }, (e_1) => {\r\n        disposeSafe(e_1);\r\n    });\r\n}\r\n\r\n","import { disposeSafe, structuralHash, equals } from \"./Util.js\";\r\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\r\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\r\n\r\nexport const LanguagePrimitives_GenericEqualityComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport const LanguagePrimitives_GenericEqualityERComparer = {\r\n    [\"System.Collections.IEqualityComparer.Equals541DA560\"](x, y) {\r\n        return equals(x, y);\r\n    },\r\n    [\"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"](x_1) {\r\n        return structuralHash(x_1);\r\n    },\r\n};\r\n\r\nexport function LanguagePrimitives_FastGenericComparer() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\r\n    return ComparisonIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\r\n    return HashIdentity_Structural();\r\n}\r\n\r\nexport function Operators_Failure(message) {\r\n    return new Error(message);\r\n}\r\n\r\nexport function Operators_FailurePattern(exn) {\r\n    return exn.message;\r\n}\r\n\r\nexport function Operators_NullArg(x) {\r\n    throw (new Error(x));\r\n}\r\n\r\nexport function Operators_Using(resource, action) {\r\n    try {\r\n        return action(resource);\r\n    }\r\n    finally {\r\n        if (equals(resource, null)) {\r\n        }\r\n        else {\r\n            disposeSafe(resource);\r\n        }\r\n    }\r\n}\r\n\r\nexport function Operators_Lock(_lockObj, action) {\r\n    return action();\r\n}\r\n\r\nexport function ExtraTopLevelOperators_LazyPattern(input) {\r\n    return input.Value;\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\r\n    return format.cont((s) => {\r\n        StringBuilder__Append_Z721C83C5(builder, s);\r\n        return continuation();\r\n    });\r\n}\r\n\r\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\r\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\r\n    }, builder, format);\r\n}\r\n\r\n","import { compare } from \"./Util.js\";\r\nimport { unfold, delay } from \"./Seq.js\";\r\nimport { op_Addition, fromZero } from \"./BigInt.js\";\r\nimport { op_Addition as op_Addition_1, fromParts } from \"./Decimal.js\";\r\nimport { op_Addition as op_Addition_2, fromBits } from \"./Long.js\";\r\n\r\nexport function makeRangeStepFunction(step, stop, zero, add) {\r\n    const stepComparedWithZero = compare(step, zero) | 0;\r\n    if (stepComparedWithZero === 0) {\r\n        throw (new Error(\"The step of a range cannot be zero\"));\r\n    }\r\n    const stepGreaterThanZero = stepComparedWithZero > 0;\r\n    return (x) => {\r\n        const comparedWithLast = compare(x, stop) | 0;\r\n        return ((stepGreaterThanZero && (comparedWithLast <= 0)) ? true : ((!stepGreaterThanZero) && (comparedWithLast >= 0))) ? [x, add(x, step)] : (void 0);\r\n    };\r\n}\r\n\r\nexport function integralRangeStep(start, step, stop, zero, add) {\r\n    const stepFn = makeRangeStepFunction(step, stop, zero, add);\r\n    return delay(() => unfold(stepFn, start));\r\n}\r\n\r\nexport function rangeBigInt(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromZero(), op_Addition);\r\n}\r\n\r\nexport function rangeDecimal(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromParts(0, 0, 0, false, 0), op_Addition_1);\r\n}\r\n\r\nexport function rangeDouble(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, 0, (x, y) => (x + y));\r\n}\r\n\r\nexport function rangeInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, false), op_Addition_2);\r\n}\r\n\r\nexport function rangeUInt64(start, step, stop) {\r\n    return integralRangeStep(start, step, stop, fromBits(0, 0, true), op_Addition_2);\r\n}\r\n\r\nexport function rangeChar(start, stop) {\r\n    const intStop = stop.charCodeAt(0) | 0;\r\n    return delay(() => unfold((c) => {\r\n        if (c <= intStop) {\r\n            return [String.fromCharCode(c), c + 1];\r\n        }\r\n        else {\r\n            return void 0;\r\n        }\r\n    }, start.charCodeAt(0)));\r\n}\r\n\r\n","namespace Elmish\nopen System\n\n[<Struct>]\ntype internal RingState<'item> =\n    | Writable of wx:'item array * ix:int\n    | ReadWritable of rw:'item array * wix:int * rix:int\n\ntype internal RingBuffer<'item>(size) =\n    let doubleSize ix (items: 'item array) =\n        seq { yield! items |> Seq.skip ix\n              yield! items |> Seq.take ix\n              for _ in 0..items.Length do\n                yield Unchecked.defaultof<'item> }\n        |> Array.ofSeq\n\n    let mutable state : 'item RingState =\n        Writable (Array.zeroCreate (max size 10), 0)\n\n    member __.Pop() =\n        match state with\n        | ReadWritable (items, wix, rix) ->\n            let rix' = (rix + 1) % items.Length\n            match rix' = wix with\n            | true -> \n                state <- Writable(items, wix)\n            | _ ->\n                state <- ReadWritable(items, wix, rix')\n            Some items.[rix]\n        | _ ->\n            None\n\n    member __.Push (item:'item) =\n        match state with\n        | Writable (items, ix) ->\n            items.[ix] <- item\n            let wix = (ix + 1) % items.Length\n            state <- ReadWritable(items, wix, ix)\n        | ReadWritable (items, wix, rix) ->\n            items.[wix] <- item\n            let wix' = (wix + 1) % items.Length\n            match wix' = rix with\n            | true -> \n                state <- ReadWritable(items |> doubleSize rix, items.Length, 0)\n            | _ -> \n                state <- ReadWritable(items, wix', rix)","namespace Elmish.React\n\nopen Fable.React\nopen Elmish\n\ntype LazyProps<'model> = {\n    model:'model\n    render:unit->ReactElement\n    equal:'model->'model->bool\n}\n\nmodule Components =\n    type LazyView<'model>(props) =\n        inherit Component<LazyProps<'model>,obj>(props)\n\n        override this.shouldComponentUpdate(nextProps, _nextState) =\n            not <| this.props.equal this.props.model nextProps.model\n\n        override this.render () =\n            this.props.render ()\n\n[<AutoOpen>]\nmodule Common =\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n\n\n","﻿module Client.Cinemole.Types\r\n\r\nopen System\r\n\r\ntype Index = int\r\n\r\ntype Radius = float\r\n\r\ntype DiffusionRate = float\r\n\r\nlet diffusionRate1: DiffusionRate = 0.0\r\nlet diffusionRate2: DiffusionRate = 0.11\r\nlet diffusionRate3: DiffusionRate = 0.34\r\nlet diffusionRate4: DiffusionRate = 0.66\r\nlet diffusionRate5: DiffusionRate = 01.0\r\n\r\ntype Gradient = Color * Color * Color * Color * Color\r\n\r\nand Color = { R: int; G: int; B: int }\r\n    with\r\n    member x.Diffuse (factor : float) : Color =\r\n        { R = int ((float x.R) * factor)\r\n          G = int ((float x.G) * factor)\r\n          B = int ((float x.B) * factor) }\r\n\r\n    member x.Gradient : Gradient =\r\n        ( x.Diffuse (1.0 - diffusionRate1),\r\n          x.Diffuse (1.0 - diffusionRate2),\r\n          x.Diffuse (1.0 - diffusionRate3),\r\n          x.Diffuse (1.0 - diffusionRate4),\r\n          x.Diffuse (1.0 - diffusionRate5) )\r\n\r\nlet dodgerBlue: Color = { R = 1; G = 122; B = 255 }\r\nlet mutedRed: Color = { R = 215; G = 80; B = 77 }\r\nlet grey: Color = { R = 104; G = 104; B = 104 }\r\nlet lightGrey: Color = { R = 238 ; G = 238 ; B = 238 }\r\nlet neon: Color = { R = 108; G = 71; B = 255 }\r\nlet turquoise: Color = { R = 57; G = 192; B = 200 }\r\nlet safetyOrange: Color = { R = 249; G = 99; B = 0 }\r\nlet wildMelon: Color = { R = 243; G = 37; B = 113 }\r\nlet coral: Color = { R = 255; G = 147; B = 130 }\r\nlet amber: Color = { R = 245; G = 201; B = 0 }\r\nlet tan: Color = { R = 205; G = 173; B = 122 }\r\nlet celery: Color = { R = 170; G = 187; B = 93 }\r\n\r\ntype Axis = | X | Y | Z\r\n    with\r\n    member x.RotationMatrix : Point * float -> Point =\r\n        match x with\r\n        | X ->\r\n            (fun (p: Point, rad: float) ->\r\n                { X = p.X\r\n                  Y = p.Y * Math.Cos(rad) - p.Z * Math.Sin(rad)\r\n                  Z = p.Y * Math.Sin(rad) + p.Z * Math.Cos(rad) })\r\n        | Y ->\r\n            (fun (p: Point, rad: float) ->\r\n                { X = p.X * Math.Cos(rad) + p.Z * Math.Sin(rad)\r\n                  Y = p.Y\r\n                  Z = p.Z * Math.Cos(rad) - p.X * Math.Sin(rad) })\r\n        | Z ->\r\n            (fun (p: Point, rad: float) ->\r\n                { X = p.X * Math.Cos(rad) - p.Y * Math.Sin(rad)\r\n                  Y = p.X * Math.Sin(rad) + p.Y * Math.Cos(rad)\r\n                  Z = p.Z })\r\n\r\nand Point = { X: float; Y: float; Z: float }\r\n    with\r\n    static member (-) (p1: Point, c2: Point) : Point = { X = p1.X - c2.X; Y = p1.Y - c2.Y; Z = p1.Z - c2.Z }\r\n\r\n    static member Pow (p: Point) (d: float) : Point = { X = p.X ** d; Y = p.Y ** d; Z = p.Z ** d }\r\n\r\n    static member Sum (p: Point) : float = p.X + p.Y + p.Z\r\n\r\n    member p1.Distance (p2: Point) : float = Math.Sqrt(Point.Sum(Point.Pow (p1 - p2) 2.0))\r\n\r\n    member p1.Centroid (p2: Point) : Point =\r\n        { X = (p1.X + p2.X) / 2.0\r\n          Y = (p1.Y + p2.X) / 2.0\r\n          Z = (p1.Z + p2.Z) / 2.0 }\r\n\r\n    member p.Rotate (axis: Axis) (rad: float) : Point = axis.RotationMatrix(p, rad)\r\n\r\n    member p1.FindVector (p2: Point) : Vector = { X = p2.X - p1.X; Y = p2.Y - p1.Y; Z = p2.Z - p1.Z }\r\n\r\nand Vector = { X: float; Y: float; Z: float }\r\n    with\r\n    member u.SumOfSquares : float = u.X ** 2.0 + u.Y ** 2.0 + u.Z ** 2.0\r\n\r\n    member u.Magnitude : float = Math.Sqrt(u.SumOfSquares)\r\n\r\n    member u.Dot (v: Vector) : float = u.X * v.X + u.Y * v.Y + u.Z * v.Z\r\n\r\n    member u.Cross (v: Vector) : Vector =\r\n        { X = u.Y * v.Z - u.Z * v.Y\r\n          Y = u.Z * v.X - u.X * v.Z\r\n          Z = u.X * v.Y - u.Y * v.X }\r\n\r\n    member x.ProjectVector (v: Vector) : float = (v.Dot x) / v.Magnitude\r\n\r\ntype SphereSphereIntersection =\r\n    | Eclipsed\r\n    | NoIntersection\r\n    | IntersectionPoint of Point\r\n    | IntersectionCircle of Point * Radius * Vector\r\n\r\ntype Atom = | C | N | O | S | H\r\n    with\r\n    member x.Radius : float =\r\n        match x with\r\n        | S -> 1.2\r\n        | H -> 0.6\r\n        | _ -> 1.0\r\n\r\n    member x.Color : Color =\r\n        match x with\r\n        | C -> grey\r\n        | N -> dodgerBlue\r\n        | O -> mutedRed\r\n        | S -> amber\r\n        | H -> lightGrey\r\n\r\ntype AtomInfo =\r\n    { Index: Index\r\n      Type: Atom\r\n      OriginalCenter: Point\r\n      ProjectedCenter: Point\r\n      OriginalRadius: Radius\r\n      ProjectedRadius: Radius }\r\n    with\r\n    member x.Rotate (axis: Axis) (rad: float) : AtomInfo = { x with OriginalCenter = x.OriginalCenter.Rotate axis rad }\r\n\r\n    member this.Intersect (other: AtomInfo) : SphereSphereIntersection =\r\n        let dist = this.ProjectedCenter.Distance other.ProjectedCenter\r\n\r\n        match dist with\r\n        | d when d > (this.ProjectedRadius + other.ProjectedRadius) ||\r\n                 (d = 0.0 && this.ProjectedRadius = other.ProjectedRadius)\r\n                  -> NoIntersection\r\n        | d when (d + this.ProjectedRadius) < other.ProjectedRadius -> Eclipsed\r\n        | _ ->\r\n            // Intersection plane\r\n            let A = 2.0 * (other.ProjectedCenter.X - this.ProjectedCenter.X)\r\n            let B = 2.0 * (other.ProjectedCenter.Y - this.ProjectedCenter.Y)\r\n            let C = 2.0 * (other.ProjectedCenter.Z - this.ProjectedCenter.Z)\r\n            let D = this.ProjectedCenter.X ** 2.0 - other.ProjectedCenter.X ** 2.0 +\r\n                    this.ProjectedCenter.Y ** 2.0 - other.ProjectedCenter.Y ** 2.0 +\r\n                    this.ProjectedCenter.Z ** 2.0 - other.ProjectedCenter.Z ** 2.0 -\r\n                    this.ProjectedRadius ** 2.0 + other. ProjectedRadius ** 2.0\r\n\r\n            // Intersection center\r\n            let t = (this.ProjectedCenter.X * A + this.ProjectedCenter.Y * B + this.ProjectedCenter.Z * C + D) /\r\n                    (A * (this.ProjectedCenter.X - other.ProjectedCenter.X) +\r\n                     B * (this.ProjectedCenter.Y - other.ProjectedCenter.Y) +\r\n                     C * (this.ProjectedCenter.Z - other.ProjectedCenter.Z))\r\n            let x = this.ProjectedCenter.X + t * (other.ProjectedCenter.X - this.ProjectedCenter.X)\r\n            let y = this.ProjectedCenter.Y + t * (other.ProjectedCenter.Y - this.ProjectedCenter.Y)\r\n            let z = this.ProjectedCenter.Z + t * (other.ProjectedCenter.Z - this.ProjectedCenter.Z)\r\n            let intersectionCenter: Point = { X = x; Y = y; Z = z }\r\n\r\n            // Intersection\r\n            let x = (this.ProjectedRadius ** 2.0 + dist ** 2.0 - other.ProjectedRadius ** 2.0) / (2.0 * this.ProjectedRadius * dist)\r\n            // TODO: Quick fix to make sure to prevent NaNs -- real solution would be making sure program does not\r\n            // TODO: try to clip objects that move in front of each other\r\n            if x < 1.0 then\r\n                let alpha = Math.Acos(x)\r\n                let R = this.ProjectedRadius * Math.Sin alpha\r\n\r\n                match R with\r\n                | 0.0 -> IntersectionPoint intersectionCenter\r\n                | _ ->\r\n                    let v = this.ProjectedCenter.FindVector other.ProjectedCenter\r\n                    IntersectionCircle (intersectionCenter, R, v)\r\n            else\r\n                NoIntersection\r\n\r\ntype ViewBox = float * float * float * float\r\n\r\ntype Depiction =\r\n    | Filled\r\n    | BallAndStick\r\n\r\nlet origin: Point = { X = 0.0; Y = 0.0; Z = 0.0 }\r\n\r\nlet filterAtoms (atomType: Atom) (atoms: AtomInfo array) : AtomInfo array =\r\n    Array.filter(fun (atom: AtomInfo) -> atom.Type <> atomType) atoms\r\n\r\nlet physicalProjection cameraPerpendicular cameraHorizon cameraForward (pov: Point) (p: Point)  : Point =\r\n    let pointVector = pov.FindVector(p)\r\n    { X = pointVector.ProjectVector cameraPerpendicular\r\n      Y = pointVector.ProjectVector cameraHorizon\r\n      Z = pointVector.ProjectVector cameraForward }\r\n\r\nlet perspectiveProjection (focalLength: float) (p: Point) : Point =\r\n    let scaleFactor = focalLength / p.Z\r\n    { X = p.X * scaleFactor\r\n      Y = p.Y * scaleFactor\r\n      Z = p.Z * scaleFactor }\r\n\r\nlet project cameraPerpendicular cameraHorizon cameraForward (pov: Point) focalLength (p: Point) : Point =\r\n    p |> physicalProjection cameraPerpendicular cameraHorizon cameraForward pov |> perspectiveProjection focalLength\r\n\r\nlet createAtom (index: int) (atomType: Atom) (center: Point) (radius: Radius) : AtomInfo =\r\n    { Index = index\r\n      Type = atomType\r\n      OriginalCenter = center\r\n      OriginalRadius = radius\r\n      ProjectedCenter = center\r\n      ProjectedRadius = radius }","import { FSharpRef } from \"./Types.js\";\nexport function tryParse(str, defValue) {\n    // TODO: test if value is valid and in range\n    if (str != null && /\\S/.test(str)) {\n        const v = +str.replace(\"_\", \"\");\n        if (!Number.isNaN(v)) {\n            defValue.contents = v;\n            return true;\n        }\n    }\n    return false;\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(0);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\n// JS Number.isFinite function evals false for NaN\nexport function isInfinity(x) {\n    return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;\n}\n","module Client.Cinemole.Parsing\n\nopen System\nopen System.Text.RegularExpressions\n\nopen Types\nopen ErrorHandling\n\n\nlet atomLine : string =\n    let s = @\"\\s{1,}\"\n    let d = @\"[-+]?[0-9]*\\.?[0-9]+\"\n    let d_cap = $\"({d})\"\n    let w_cap = $@\"(\\w+)\"\n    [ \"$\" ]\n    |> (@) [ for _ in [ 0 .. 11 ] do yield s + d ]\n    |> (@) [ s + w_cap]\n    |> (@) [ for _ in [ 0 .. 2 ] do yield s + d_cap ]\n    |> (@) [ \"^\" ]\n    |> String.concat \"\"\n\nlet (|AtomLine|_|) input =\n    let m = Regex.Match(input, atomLine)\n    if m.Success then Some(List.tail [ for g in m.Groups -> g.Value ]) else None\n\nlet identifyAtom (atom: string) : Atom =\n    match atom with\n    | \"C\" -> C | \"N\" -> N | \"O\" -> O | \"S\" -> S | \"H\" -> H\n    | _ -> raise <| ErrorHandling.InputError($\"unknown atom {atom}\")\n\nlet tryParseFloat (s: string) : float option =\n    try s |> float |> Some\n    with :? FormatException -> None\n\nlet castToFloat (s: string) : float =\n    match tryParseFloat s with | Some f -> f | None -> raise <| InputError(\"coordinate is not a float\")\n\nlet parseSdf (sdf: string) : AtomInfo array =\n    let lines = sdf.Split [|'\\n'|]\n    let moleculeCount = lines |> Array.map (fun l -> l.Contains(\"$$$$\") = true) |> Array.filter id |> Array.length\n    match moleculeCount with | x when x > 1 -> raise <| InputError(\"multiple molecules in input file\") | _ -> ()\n\n    let mutable atomCount = 0\n    [| for l in lines do\n        match l with\n        | AtomLine [ x; y; z; symbol] ->\n            atomCount <- atomCount + 1\n            let atomType = identifyAtom symbol\n            let center: Point = { X = castToFloat x; Y = castToFloat y; Z = castToFloat z }\n            let radius: Radius = atomType.Radius\n            createAtom atomCount atomType center radius\n        | _ -> () |]","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.test(input);\n}\nexport function match(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.exec(input);\n}\nexport function matches(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(input);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(input);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","module Client.Cinemole.Helpers\n\nopen Fable\n\n//#if FABLE_COMPILER\n//open Fable.GetEncoding\n//#else\n//open System.Text.UTF8Encoding.GetEncoding\n//#endif\n\nopen System\n\nlet floatToStr (f: float) : string = Operators.string f\nlet intToStr (d: int) : string = Operators.string d\n\nlet round (digits: int) (f: float) = Math.Round(f, digits)\n\nlet abs f = (f ** 2.0) ** 0.5\n\nlet toBase64String (toEncode : string) : string =\n    printf \"%A\" <| toEncode\n//    let bytes = System.Text.UTF8Encoding.GetEncoding(28591).GetBytes(toEncode)\n    let bytes = [|60uy; 115uy; 118uy; 103uy; 32uy; 120uy; 109uy; 108uy; 110uy; 115uy; 61uy; 34uy;\n  104uy; 116uy; 116uy; 112uy; 58uy; 47uy; 47uy; 119uy; 119uy; 119uy; 46uy; 119uy;\n  51uy; 46uy; 111uy; 114uy; 103uy; 47uy; 50uy; 48uy; 48uy; 48uy; 47uy; 115uy;\n  118uy; 103uy; 34uy; 32uy; 118uy; 105uy; 101uy; 119uy; 66uy; 111uy; 120uy; 61uy;\n  34uy; 48uy; 32uy; 48uy; 32uy; 50uy; 32uy; 50uy; 34uy; 62uy; 60uy; 99uy; 105uy;\n  114uy; 99uy; 108uy; 101uy; 32uy; 99uy; 120uy; 61uy; 34uy; 49uy; 34uy; 32uy;\n  99uy; 121uy; 61uy; 34uy; 49uy; 34uy; 32uy; 114uy; 61uy; 34uy; 49uy; 34uy; 47uy;\n  62uy; 60uy; 47uy; 115uy; 118uy; 103uy; 62uy|]\n    Convert.ToBase64String(bytes)","import { substring, format, isNullOrEmpty, join } from \"./String.js\";\r\nimport { class_type } from \"./Reflection.js\";\r\nimport { clear, int32ToString } from \"./Util.js\";\r\nimport { toString } from \"./Types.js\";\r\n\r\nexport class StringBuilder {\r\n    constructor(value, capacity) {\r\n        this.buf = [];\r\n        if (!isNullOrEmpty(value)) {\r\n            void (this.buf.push(value));\r\n        }\r\n    }\r\n    toString() {\r\n        const __ = this;\r\n        return join(\"\", __.buf);\r\n    }\r\n}\r\n\r\nexport function StringBuilder$reflection() {\r\n    return class_type(\"System.Text.StringBuilder\", void 0, StringBuilder);\r\n}\r\n\r\nexport function StringBuilder_$ctor_Z18115A39(value, capacity) {\r\n    return new StringBuilder(value, capacity);\r\n}\r\n\r\nexport function StringBuilder_$ctor_Z524259A4(capacity) {\r\n    return StringBuilder_$ctor_Z18115A39(\"\", capacity);\r\n}\r\n\r\nexport function StringBuilder_$ctor_Z721C83C5(value) {\r\n    return StringBuilder_$ctor_Z18115A39(value, 16);\r\n}\r\n\r\nexport function StringBuilder_$ctor() {\r\n    return StringBuilder_$ctor_Z18115A39(\"\", 16);\r\n}\r\n\r\nexport function StringBuilder__Append_Z721C83C5(x, s) {\r\n    void (x.buf.push(s));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_244C7CD6(x, c) {\r\n    void (x.buf.push(c));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_Z524259A4(x, o) {\r\n    void (x.buf.push(int32ToString(o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_5E38073B(x, o) {\r\n    void (x.buf.push(o.toString()));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_Z1FBCCD16(x, o) {\r\n    void (x.buf.push(toString(o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_4E60E31B(x, o) {\r\n    void (x.buf.push(toString(o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_695F1130(x, cs) {\r\n    void (x.buf.push(cs.join('')));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__Append_43A65C09(x, s) {\r\n    void (x.buf.push(toString(s)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__AppendFormat_433E080(x, fmt, o) {\r\n    void (x.buf.push(format(fmt, o)));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__AppendLine(x) {\r\n    void (x.buf.push(\"\\n\"));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__AppendLine_Z721C83C5(x, s) {\r\n    void (x.buf.push(s));\r\n    void (x.buf.push(\"\\n\"));\r\n    return x;\r\n}\r\n\r\nexport function StringBuilder__get_Length(x) {\r\n    let len = 0;\r\n    for (let i = x.buf.length - 1; i >= 0; i--) {\r\n        len = ((len + x.buf[i].length) | 0);\r\n    }\r\n    return len | 0;\r\n}\r\n\r\nexport function StringBuilder__ToString_Z37302880(x, firstIndex, length) {\r\n    return substring(toString(x), firstIndex, length);\r\n}\r\n\r\nexport function StringBuilder__Clear(x) {\r\n    clear(x.buf);\r\n    return x;\r\n}\r\n\r\n","module Client.Cinemole.Svg\n\nopen System\n\nopen Helpers\nopen Types\nopen Geometry\n\nlet header ((xMin, yMin, width, height): ViewBox) =\n    $\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\\n    \\n<svg\\\n    \\n\\tid=\\\"Layer_1\\\"\\\n    \\n\\txmlns=\\\"http://www.w3.org/2000/svg\\\"\\\n    \\n\\tviewBox=\\\"{xMin} {yMin} {width} {height}\\\"\\\n    \\n>\"\n\nlet writeAtomStyle atom =  $\"\\n.atom-{atom.Index}{{fill:url(#radial-gradient-{atom.Index});}}\"\n\nlet writeAtomDefs atom =\n    let d1, d2, d3, d4, d5 = atom.Type.Color.Gradient\n    $\"\\n<radialGradient\\\n    \\n\\tid=\\\"radial-gradient-{atom.Index}\\\"\\\n    \\n\\tcx=\\\"{floatToStr atom.ProjectedCenter.X}\\\"\\\n    \\n\\tcy=\\\"{floatToStr atom.ProjectedCenter.Y}\\\"\\\n    \\n\\tfx=\\\"{floatToStr atom.ProjectedCenter.X}\\\"\\\n    \\n\\tfy=\\\"{floatToStr atom.ProjectedCenter.Y}\\\"\\\n    \\n\\tr=\\\"{floatToStr (atom.ProjectedRadius + 0.4)}\\\"\\\n    \\n\\tgradientTransform=\\\"matrix(1, 0, 0, 1, 0, 0)\\\"\\\n    \\n\\tgradientUnits=\\\"userSpaceOnUse\\\"\\\n    \\n>\\\n    \\n<stop offset=\\\"{floatToStr diffusionRate1}\\\" \\\n    stop-color=\\\"rgb({intToStr d1.R},{intToStr d1.G},{intToStr d1.B})\\\"/>\\\n    \\n<stop offset=\\\"{floatToStr diffusionRate2}\\\" \\\n    stop-color=\\\"rgb({intToStr d2.R},{intToStr d2.G},{intToStr d2.B})\\\"/>\\\n    \\n<stop offset=\\\"{floatToStr diffusionRate3}\\\" \\\n    stop-color=\\\"rgb({intToStr d3.R},{intToStr d3.G},{intToStr d3.B})\\\"/>\\\n    \\n<stop offset=\\\"{floatToStr diffusionRate4}\\\" \\\n    stop-color=\\\"rgb({intToStr d4.R},{intToStr d4.G},{intToStr d4.B})\\\"/>\\\n    \\n<stop offset=\\\"{floatToStr diffusionRate5}\\\" \\\n    stop-color=\\\"rgb({intToStr d5.R},{intToStr d5.G},{intToStr d5.B})\\\"/>\\\n    \\n</radialGradient>\"\n\nlet alphaIsoscelesTriangle (p1: Point) (p2: Point) (r: Radius) : float =\n    Math.Acos((2.0 * r ** 2.0 - (p1.Distance p2)) / (2.0 * r ** 2.0))\n\n// Sort edges based on how close they are together end-to-end based on respective alpha isoscele angle\nlet sortEdges (r: Radius) (edges: (Point * Point)[]) : (Point * Point) list =\n    // Orient edges so that first point in every edge is closer to the previous edge\n    let rec orient (prev: (Point * Point) option) acc es : (Point * Point) list =\n        match es with\n        | (p1, p2)::tail ->\n            match prev with\n            | None -> orient (Some (p1, p2)) [(p1, p2)] tail\n            | Some (prev1, prev2) ->\n                let p2prev1, p1prev2, p2prev2 = p2.Distance prev1, p1.Distance prev2, p2.Distance prev2\n                if p2prev2 < p2prev1 && p2prev2 < p1prev2 then orient (Some (p2, p1)) (acc @ [(p2, p1)]) tail\n                else orient (Some (p1, p2)) (acc @ [(p1, p2)]) tail\n        | [] -> acc\n\n    // Sort order of edges based on vicinity first edge\n    match Array.toList edges with\n    | (p1, p2)::tail ->\n        if List.length tail = 0 then [(p1, p2)]\n        elif List.length tail = 1 then [(p1, p2)] @ tail\n        else\n            tail\n            |> List.map (fun (p3, p4) ->\n                let dist = (p1.Centroid p2).Distance (p3.Centroid p4)\n                p3, p4, dist)\n            |> List.sortBy (fun (_, _, d) -> d)\n            |> List.map (fun (p3, p4, _) -> (p3, p4))\n    | [] -> []\n    |> orient None []\n\nlet writeArc (final: Point) (radius: Radius) : string =\n    $\"A {floatToStr radius} {floatToStr radius} 0 1 0 {floatToStr final.X} {floatToStr final.Y}\"\n\nlet reconstructShape (index: Index) (radius: Radius) (edges: (Point * Point)[]) : string =\n    match Array.toList edges with\n    | (p1, p2)::tail ->\n        let arcs = [ for p3, p4 in tail do $\" L {floatToStr p3.X} {floatToStr p3.Y} {writeArc p4 radius} \" ] |> String.concat \"\"\n        $\"\\n<path\\\n        \\n\\tclass=\\\"atom-{index}\\\"\\\n        \\n\\td=\\\"M {floatToStr p1.X} {floatToStr p1.Y} {writeArc p2 radius} {arcs} L {floatToStr p1.X} {floatToStr p1.Y}\\\"\n        \\n/>\"\n    | [] -> \"\"\n\nlet writeAtom (atom: AtomInfo) (atoms: AtomInfo[]) =\n    // We only clip atom representation if it clips with atoms that are drawn earlier\n    let otherAtoms = [|\n        let mutable included = true\n        for a in atoms do\n            if a.Index = atom.Index then included <- false\n            if included then yield a |]\n\n    let clipping =\n        otherAtoms\n        |> Array.map (fun a -> atom.Intersect a)\n        |> Array.filter (fun c -> match c with | NoIntersection | IntersectionPoint _ -> false | _ -> true)\n\n    match clipping with\n    // No clipping\n    | xs when Array.length xs = 0 ->\n        $\"\\n<circle\\\n        \\n\\tclass=\\\"atom-{atom.Index}\\\"\\\n        \\n\\tcx=\\\"{floatToStr atom.ProjectedCenter.X}\\\"\\\n        \\n\\tcy=\\\"{floatToStr atom.ProjectedCenter.Y}\\\"\\\n        \\n\\tr=\\\"{floatToStr atom.ProjectedRadius}\\\"\\\n        \\n/>\"\n\n    // Clipping\n    | xs when Array.forall (fun x -> match x with | Eclipsed -> false | _ -> true) xs ->\n        [|\n            for x in xs do\n                match x with\n                | IntersectionCircle (c, r, _) ->\n                    match intersectionCircles atom.ProjectedCenter atom.ProjectedRadius c r with\n                    | None -> ()\n                    | Some (p1, p2) -> yield p1, p2\n                | _ -> ()\n        |]\n        |> reconstructShape atom.Index atom.ProjectedRadius\n\n    // Eclipsed atom will not be drawn\n    | _ -> \"\"\n\nlet writeAtomsStyle (atoms: AtomInfo[]) : string =  atoms |> Array.map writeAtomStyle |> String.concat \"\"\nlet writeAtomsDefs (atoms: AtomInfo[]) : string = atoms |> Array.map writeAtomDefs |> String.concat \"\"\nlet writeAtoms (atoms: AtomInfo[]) : string = atoms |> Array.map (fun atom -> writeAtom atom atoms) |> String.concat \"\"\n\nlet add (s: string) (sb: System.Text.StringBuilder) : System.Text.StringBuilder = sb.Append(s)\nlet stringify (sb: System.Text.StringBuilder) : string = sb.ToString()\n\nlet writeSVG viewBox depiction atoms : string =\n    System.Text.StringBuilder()\n    |> add (header viewBox)\n    |> add \"\\n<defs>\\n<style>\"\n    |> add (writeAtomsStyle atoms)\n    |> add \"\\n</style>\"\n    |> add (writeAtomsDefs atoms)\n    |> add \"\\n</defs>\"\n    |> add (writeAtoms atoms)\n    |> add \"\\n</svg>\"\n    |> stringify","module Client.Cinemole.Geometry\n\nopen System\n\nopen Types\n\nlet intersectionCircles (c_p1: Point) (r_p1: float) (c_p2: Point) (r_p2: float) : (Point * Point) option =\n    let d = Math.Sqrt((c_p2.X - c_p1.X) ** 2.0 + (c_p2.Y - c_p1.Y) ** 2.0)\n    if d > (r_p1 + r_p2) then None  // Non-intersecting\n    elif d < abs (r_p1 - r_p1) then None  // One circle within other circle\n    elif d = 0.0 && r_p1 = r_p2 then None  // Coincident circles\n    else\n        let d = d + 1E-05  // Make sure d is non-zero\n        let a = (r_p1 ** 2.0 - r_p2 ** 2.0 + d ** 2.0) / (2.0 * d)\n        let h = Math.Sqrt(r_p1 ** 2.0 - a ** 2.0)\n        let x2 = c_p1.X + a * (c_p2.X - c_p1.X) / d\n        let y2 = c_p1.Y + a * (c_p2.Y - c_p1.Y) / d\n        let x3 = x2 + h * (c_p2.Y - c_p1.Y) / d\n        let y3 = y2 - h * (c_p2.X - c_p1.X) / d\n        let x4 = x2 - h * (c_p2.Y - c_p1.Y) / d\n        let y4 = y2 + h * (c_p2.X - c_p1.X) / d\n        Some ({ X = x3; Y = y3; Z = 0.0 }, { X = x4; Y = y4; Z = 0.0 })","module Client.Cinemole.Drawing\n\nopen System\n\nopen Helpers\nopen Types\nopen Parsing\nopen Svg\n\nlet draw\n    (viewBox: ViewBox option)   // Needs to be set if None based on distances points in point cloud\n    (depiction: Depiction)      // Filled or ball-and-stick\n    (showHydrogenAtoms: bool)   // Filter out hydrogen atoms or not\n    (rotX: float)               // Rotation around x-axis\n    (rotY: float)               // Rotation around y-axis\n    (rotZ: float)               // Rotation around z-axis\n    (sdf: string)               // Input SDF (V2000) mol file in string format\n    : string * ViewBox =        // Returns SVG string and (set) view box\n\n    // Parse atoms and apply rotation to point cloud\n    let atoms =\n        parseSdf sdf\n        |> (fun atoms -> if showHydrogenAtoms = false then filterAtoms H atoms else atoms)\n        |> Array.map (fun atom -> atom.Rotate Y ((rotX / 100.0) * 2.0 * Math.PI))\n        |> Array.map (fun atom -> atom.Rotate Z ((rotY / 100.0) * 2.0 * Math.PI))\n        |> Array.map (fun atom -> atom.Rotate X ((rotZ / 100.0) * 2.0 * Math.PI))\n\n    let offsetViewBox =\n        let minimumOffset = 2.0\n        match atoms |> Array.map (fun a -> a.OriginalCenter.Distance origin) |> Array.max |> (*) 2.0 |> round 0 with\n        | x when x < minimumOffset -> minimumOffset | x -> x\n\n    let viewBox =\n        match viewBox with\n        | None -> -offsetViewBox, -offsetViewBox, offsetViewBox * 2.0, offsetViewBox * 2.0\n        | Some x -> x\n\n    let focalLength: float = offsetViewBox\n    let pov: Point = { X = 1E-5; Y = 1E-5; Z = focalLength }\n    let distPovOrigin: float = pov.Distance origin\n\n    // Sort drawing order point cloud based on distance point to pov\n    let atoms = atoms |> Array.sortBy (fun atom -> atom.OriginalCenter.Distance pov |> (*) -1.0)\n\n    // Recalculate radius points based on distance point to pov\n    let atoms = atoms |> Array.map (fun atom ->\n        let projectedRadius = (distPovOrigin / (pov.Distance atom.OriginalCenter)) * atom.OriginalRadius\n        { atom with ProjectedRadius = projectedRadius })\n\n    let cameraForward: Vector = { X = -pov.X; Y = -pov.Y; Z = -pov.Z }\n    let cameraPerpendicular: Vector = { X = cameraForward.Y; Y = -cameraForward.X; Z = 0.0 }\n    let cameraHorizon: Vector = cameraForward.Cross cameraPerpendicular\n    let setPerspective (atom: AtomInfo) : AtomInfo =\n        let projectedCenter = project cameraPerpendicular cameraHorizon cameraForward (pov: Point) focalLength atom.OriginalCenter\n        { atom with ProjectedCenter = projectedCenter }\n\n    // Apply perspective projection on 3D point cloud on 2D view box\n    let atoms = atoms |> Array.map (fun atom -> setPerspective atom)\n\n    writeSVG viewBox depiction atoms, viewBox","module Client.Cinemole.Render\n\nopen Helpers\nopen Drawing\n\ntype Depiction =\n    | Filled\n    | BallAndStick\n\ntype ViewBox = float * float * float * float\n\ntype Settings =\n    { ViewBox: ViewBox option\n      Depiction: Depiction\n      ShowHydrogenAtoms: bool\n      XRotation: float\n      YRotation: float\n      ZRotation: float }\n\ntype Assignment = { Settings: Settings; Sdf: string }\n\nlet render = fun assignment -> async {\n    let depiction: Types.Depiction =\n        match assignment.Settings.Depiction with\n        | Filled -> Types.Filled\n        | BallAndStick -> Types.BallAndStick\n\n    let svg, viewBox : string * ViewBox =\n        assignment.Sdf\n        |> draw assignment.Settings.ViewBox\n                depiction\n                assignment.Settings.ShowHydrogenAtoms\n                assignment.Settings.XRotation\n                assignment.Settings.YRotation\n                assignment.Settings.ZRotation\n\n    let encodedSvg : string = svg |> toBase64String\n\n    return (svg, encodedSvg, viewBox) }","import { Record, Union } from \"./Types.js\";\nimport { combineHashCodes, equalArraysWith, stringHash } from \"./Util.js\";\nimport Decimal from \"./Decimal.js\";\nimport { fromInt as int64FromInt } from \"./Long.js\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class MethodInfo {\n    constructor(name, parameters, returnType) {\n        this.name = name;\n        this.parameters = parameters;\n        this.returnType = returnType;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, construct, parent, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.construct = construct;\n        this.parent = parent;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    GetHashCode() {\n        return getHashCode(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n}\nexport class GenericParameter extends TypeInfo {\n    constructor(name) {\n        super(name);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function getHashCode(t) {\n    const fullnameHash = stringHash(t.fullname);\n    const genHashes = getGenerics(t).map(getHashCode);\n    return combineHashCodes([fullnameHash, ...genHashes]);\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\nexport function class_type(fullname, generics, construct, parent) {\n    return new TypeInfo(fullname, generics, construct, parent);\n}\nexport function record_type(fullname, generics, construct, fields) {\n    return new TypeInfo(fullname, generics, construct, undefined, fields);\n}\nexport function anonRecord_type(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, undefined, () => fields);\n}\nexport function union_type(fullname, generics, construct, cases) {\n    const t = new TypeInfo(fullname, generics, construct, undefined, undefined, () => {\n        const caseNames = construct.prototype.cases();\n        return cases().map((fields, i) => new CaseInfo(t, i, caseNames[i], fields));\n    });\n    return t;\n}\nexport function tuple_type(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate_type(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda_type(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list_type(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array_type(generic) {\n    return new TypeInfo(\"[]\", [generic]);\n}\nexport function enum_type(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, undefined, enumCases);\n}\nexport function measure_type(fullname) {\n    return new TypeInfo(fullname);\n}\nexport function generic_type(name) {\n    return new GenericParameter(name);\n}\nexport const obj_type = new TypeInfo(\"System.Object\");\nexport const unit_type = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char_type = new TypeInfo(\"System.Char\");\nexport const string_type = new TypeInfo(\"System.String\");\nexport const bool_type = new TypeInfo(\"System.Boolean\");\nexport const int8_type = new TypeInfo(\"System.SByte\");\nexport const uint8_type = new TypeInfo(\"System.Byte\");\nexport const int16_type = new TypeInfo(\"System.Int16\");\nexport const uint16_type = new TypeInfo(\"System.UInt16\");\nexport const int32_type = new TypeInfo(\"System.Int32\");\nexport const uint32_type = new TypeInfo(\"System.UInt32\");\nexport const float32_type = new TypeInfo(\"System.Single\");\nexport const float64_type = new TypeInfo(\"System.Double\");\nexport const decimal_type = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof TypeInfo) {\n        const elemType = getElementType(info);\n        if (elemType != null) {\n            return name(elemType) + \"[]\";\n        }\n        else {\n            const i = info.fullname.lastIndexOf(\".\");\n            return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n        }\n    }\n    else {\n        return info.name;\n    }\n}\nexport function fullName(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return fullName(elemType) + \"[]\";\n    }\n    else if (t.generics == null || t.generics.length === 0) {\n        return t.fullname;\n    }\n    else {\n        return t.fullname + \"[\" + t.generics.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n}\nexport function namespace(t) {\n    const elemType = getElementType(t);\n    if (elemType != null) {\n        return namespace(elemType);\n    }\n    else {\n        const i = t.fullname.lastIndexOf(\".\");\n        return i === -1 ? \"\" : t.fullname.substr(0, i);\n    }\n}\nexport function isArray(t) {\n    return getElementType(t) != null;\n}\nexport function getElementType(t) {\n    var _a;\n    return t.fullname === \"[]\" && ((_a = t.generics) === null || _a === void 0 ? void 0 : _a.length) === 1 ? t.generics[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isGenericParameter(t) {\n    return t instanceof GenericParameter;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\nexport function isSubclassOf(t1, t2) {\n    return (t2.fullname === obj_type.fullname) || (t1.parent != null && (t1.parent.Equals(t2) || isSubclassOf(t1.parent, t2)));\n}\nfunction isErasedToNumber(t) {\n    return isEnum(t) || [\n        int8_type.fullname,\n        uint8_type.fullname,\n        int16_type.fullname,\n        uint16_type.fullname,\n        int32_type.fullname,\n        uint32_type.fullname,\n        float32_type.fullname,\n        float64_type.fullname,\n    ].includes(t.fullname);\n}\nexport function isInstanceOfType(t, o) {\n    if (t.fullname === obj_type.fullname)\n        return true;\n    switch (typeof o) {\n        case \"boolean\":\n            return t.fullname === bool_type.fullname;\n        case \"string\":\n            return t.fullname === string_type.fullname;\n        case \"function\":\n            return isFunction(t);\n        case \"number\":\n            return isErasedToNumber(t);\n        default:\n            return t.construct != null && o instanceof t.construct;\n    }\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj_type));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str, defValue) {\n    try {\n        defValue.contents = parseEnum(t, str);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields;\n}\n// This is used as replacement of `FSharpValue.GetRecordFields`\n// For `FSharpTypes.GetRecordFields` see `getRecordElements`\n// Object.keys returns keys in the order they were added to the object\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.construct != null\n        ? new uci.declaringType.construct(uci.tag, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.construct != null\n        ? new t.construct(...values)\n        : fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {});\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\nexport function makeGenericType(t, generics) {\n    return new TypeInfo(t.fullname, generics, t.construct, t.parent, t.fields, t.cases);\n}\nexport function createInstance(t, consArgs) {\n    // TODO: Check if consArgs length is same as t.construct?\n    // (Arg types can still be different)\n    if (typeof t.construct === \"function\") {\n        return new t.construct(...(consArgs !== null && consArgs !== void 0 ? consArgs : []));\n    }\n    else if (isErasedToNumber(t)) {\n        return 0;\n    }\n    else {\n        switch (t.fullname) {\n            case obj_type.fullname:\n                return {};\n            case bool_type.fullname:\n                return false;\n            case \"System.Int64\":\n            case \"System.UInt64\":\n                // typeof<int64> and typeof<uint64> get transformed to class_type(\"System.Int64\")\n                // and class_type(\"System.UInt64\") respectively. Test for the name of the primitive type.\n                return int64FromInt(0);\n            case decimal_type.fullname:\n                return new Decimal(0);\n            case char_type.fullname:\n                // Even though char is a value type, it's erased to string, and Unchecked.defaultof<char> is null\n                return null;\n            default:\n                throw new Error(`Cannot access constructor of ${t.fullname}`);\n        }\n    }\n}\nexport function getValue(propertyInfo, v) {\n    return v[propertyInfo[0]];\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.cases()[x.tag];\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","namespace Fulma\r\n\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\nmodule Reflection =\r\n\r\n    open Microsoft.FSharp.Reflection\r\n    open System\r\n\r\n    let getCaseName (case : 'T) =\r\n#if FABLE_COMPILER\r\n        Fable.Core.Reflection.getCaseName case\r\n#else\r\n        // Get UnionCaseInfo value from the F# reflection tools\r\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\r\n        caseInfo.GetCustomAttributes()\r\n        |> Seq.tryPick (function\r\n                        | :? CompiledNameAttribute as att -> Some att.CompiledName\r\n                        | _ -> None)\r\n        |> Option.defaultWith (fun () -> caseInfo.Name)\r\n#endif\r\n\r\n    let getCaseTag (case : 'T) =\r\n#if FABLE_COMPILER\r\n        Fable.Core.Reflection.getCaseTag case\r\n#else\r\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\r\n        caseInfo.Tag\r\n#endif\r\n\r\n[<RequireQualifiedAccess>]\r\ntype Screen =\r\n    | All\r\n    | [<CompiledName(\"desktop\")>] Desktop\r\n    | [<CompiledName(\"tablet\")>] Tablet\r\n    | [<CompiledName(\"mobile\")>] Mobile\r\n    | [<CompiledName(\"widescreen\")>] WideScreen\r\n    | [<CompiledName(\"touch\")>] Touch\r\n    | [<CompiledName(\"fullhd\")>] FullHD\r\n\r\n    static member ToString (screen : Screen) =\r\n        match screen with\r\n        | All -> \"\"\r\n        | Desktop\r\n        | Tablet\r\n        | Mobile\r\n        | WideScreen\r\n        | Touch\r\n        | FullHD -> \"-\" + Reflection.getCaseName screen\r\n\r\n[<AutoOpen>]\r\nmodule Color =\r\n\r\n    type IColor =\r\n        | [<CompiledName(\"is-black\")>] IsBlack\r\n        | [<CompiledName(\"is-dark\")>] IsDark\r\n        | [<CompiledName(\"is-light\")>] IsLight\r\n        | [<CompiledName(\"is-white\")>] IsWhite\r\n        | [<CompiledName(\"is-primary\")>] IsPrimary\r\n        | [<CompiledName(\"is-info\")>] IsInfo\r\n        | [<CompiledName(\"is-success\")>] IsSuccess\r\n        | [<CompiledName(\"is-warning\")>] IsWarning\r\n        | [<CompiledName(\"is-danger\")>] IsDanger\r\n        | [<CompiledName(\"is-link\")>] IsLink\r\n        | [<CompiledName(\"is-black-bis\")>] IsBlackBis\r\n        | [<CompiledName(\"is-black-ter\")>] IsBlackTer\r\n        | [<CompiledName(\"is-grey-darker\")>] IsGreyDarker\r\n        | [<CompiledName(\"is-grey-dark\")>] IsGreyDark\r\n        | [<CompiledName(\"is-grey\")>] IsGrey\r\n        | [<CompiledName(\"is-grey-light\")>] IsGreyLight\r\n        | [<CompiledName(\"is-grey-lighter\")>] IsGreyLighter\r\n        | [<CompiledName(\"is-white-ter\")>] IsWhiteTer\r\n        | [<CompiledName(\"is-white-bis\")>] IsWhiteBis\r\n        /// Allow you to specify a custom color. The color will be prefixed by \"is-\"\r\n        | IsCustomColor of string\r\n        /// Allow you to specify a NoColor case.\r\n        | NoColor\r\n\r\n    let ofColor level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"is-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> Reflection.getCaseName level\r\n\r\n[<AutoOpen>]\r\nmodule Size =\r\n\r\n    type ISize =\r\n        | [<CompiledName(\"is-small\")>] IsSmall\r\n        | [<CompiledName(\"is-medium\")>] IsMedium\r\n        | [<CompiledName(\"is-large\")>] IsLarge\r\n\r\n    let inline ofSize size =\r\n        Reflection.getCaseName size\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextSize =\r\n    type Option =\r\n        | Is1\r\n        | Is2\r\n        | Is3\r\n        | Is4\r\n        | Is5\r\n        | Is6\r\n        | Is7\r\n\r\n        static member ToString (x: Option) =\r\n            Reflection.getCaseTag x + 1 |> string\r\n\r\n    let inline generic screen size =\r\n        \"is-size-\" + Option.ToString size + Screen.ToString screen\r\n\r\n    let inline only screen size =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-size-\" + Option.ToString size + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-size-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextAlignment =\r\n\r\n    type Option =\r\n        /// Add `has-text-centered`\r\n        | [<CompiledName(\"has-text-centered\")>] Centered\r\n        /// Add `has-text-justified`\r\n        | [<CompiledName(\"has-text-justified\")>] Justified\r\n        /// Add `has-text-left`\r\n        | [<CompiledName(\"has-text-left\")>] Left\r\n        /// Add `has-text-right`\r\n        | [<CompiledName(\"has-text-right\")>] Right\r\n\r\n        static member inline ToString opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let inline generic screen alignment =\r\n        Option.ToString alignment + Screen.ToString screen\r\n\r\n    let inline only screen alignment =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            Option.ToString alignment + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-size-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexDirection =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-direction-row</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-row\")>] Row\r\n        /// <summary>Add <c>is-flex-direction-row-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-row-reverse\")>] RowReverse\r\n        /// <summary>Add <c>is-flex-direction-column</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-column\")>] Column\r\n        /// <summary>Add <c>is-flex-direction-column-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-direction-column-reverse\")>] ColumnReverse\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexWrap =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-wrap-nowrap</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-nowrap\")>] NoWrap\r\n        /// <summary>Add <c>is-flex-wrap-wrap</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-wrap\")>] Wrap\r\n        /// <summary>Add <c>is-flex-wrap-wrap-reverse</c></summary>\r\n        | [<CompiledName(\"is-flex-wrap-wrap-reverse\")>] WrapReverse\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexJustifyContent =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-justify-content-flex-start</c></summary>\r\n        | [<CompiledName(\"is-justify-content-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-justify-content-flex-end</c></summary>\r\n        | [<CompiledName(\"is-justify-content-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-justify-content-center</c></summary>\r\n        | [<CompiledName(\"is-justify-content-center\")>] Center\r\n        /// <summary>Add <c>is-justify-content-space-between</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-between\")>] SpaceBetween\r\n        /// <summary>Add <c>is-justify-content-space-around</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-around\")>] SpaceAround\r\n        /// <summary>Add <c>is-justify-content-space-evenly</c></summary>\r\n        | [<CompiledName(\"is-justify-content-space-evenly\")>] SpaceEvenly\r\n        /// <summary>Add <c>is-justify-content-start</c></summary>\r\n        | [<CompiledName(\"is-justify-content-start\")>] Start\r\n        /// <summary>Add <c>is-justify-content-end</c></summary>\r\n        | [<CompiledName(\"is-justify-content-end\")>] End\r\n        /// <summary>Add <c>is-justify-content-left</c></summary>\r\n        | [<CompiledName(\"is-justify-content-left\")>] Left\r\n        /// <summary>Add <c>is-justify-content-right</c></summary>\r\n        | [<CompiledName(\"is-justify-content-right\")>] Right\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignContent =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-content-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-content-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-content-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-content-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-content-center</c></summary>\r\n        | [<CompiledName(\"is-align-content-center\")>] Center\r\n        /// <summary>Add <c>is-align-content-space-between</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-between\")>] SpaceBetween\r\n        /// <summary>Add <c>is-align-content-space-around</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-around\")>] SpaceAround\r\n        /// <summary>Add <c>is-align-content-space-evenly</c></summary>\r\n        | [<CompiledName(\"is-align-content-space-evenly\")>] SpaceEvenly\r\n        /// <summary>Add <c>is-align-content-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-content-stretch\")>] Stretch\r\n        /// <summary>Add <c>is-align-content-start</c></summary>\r\n        | [<CompiledName(\"is-align-content-start\")>] Start\r\n        /// <summary>Add <c>is-align-content-end</c></summary>\r\n        | [<CompiledName(\"is-align-content-end\")>] End\r\n        /// <summary>Add <c>is-align-content-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-content-baseline\")>] Baseline\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignItems =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-items-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-items-stretch\")>] Stretch\r\n        /// <summary>Add <c>is-align-items-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-items-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-items-center</c></summary>\r\n        | [<CompiledName(\"is-align-items-center\")>] Center\r\n        /// <summary>Add <c>is-align-items-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-items-baseline\")>] Baseline\r\n        /// <summary>Add <c>is-align-items-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-start\")>] Start\r\n        /// <summary>Add <c>is-align-items-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-end\")>] End\r\n        /// <summary>Add <c>is-align-items-self-start</c></summary>\r\n        | [<CompiledName(\"is-align-items-self-start\")>] SelfStart\r\n        /// <summary>Add <c>is-align-items-self-end</c></summary>\r\n        | [<CompiledName(\"is-align-items-self-end\")>] SelfEnd\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexAlignSelf =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-align-self-auto</c></summary>\r\n        | [<CompiledName(\"is-align-self-auto\")>] Auto\r\n        /// <summary>Add <c>is-align-self-flex-start</c></summary>\r\n        | [<CompiledName(\"is-align-self-flex-start\")>] FlexStart\r\n        /// <summary>Add <c>is-align-self-flex-end</c></summary>\r\n        | [<CompiledName(\"is-align-self-flex-end\")>] FlexEnd\r\n        /// <summary>Add <c>is-align-self-center</c></summary>\r\n        | [<CompiledName(\"is-align-self-center\")>] Center\r\n        /// <summary>Add <c>is-align-self-baseline</c></summary>\r\n        | [<CompiledName(\"is-align-self-baseline\")>] Baseline\r\n        /// <summary>Add <c>is-align-self-stretch</c></summary>\r\n        | [<CompiledName(\"is-align-self-stretch\")>] Stretch\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexGrow =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-grow-0</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-0\")>] Is0\r\n        /// <summary>Add <c>is-flex-grow-1</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-1\")>] Is1\r\n        /// <summary>Add <c>is-flex-grow-2</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-2\")>] Is2\r\n        /// <summary>Add <c>is-flex-grow-3</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-3\")>] Is3\r\n        /// <summary>Add <c>is-flex-grow-4</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-4\")>] Is4\r\n        /// <summary>Add <c>is-flex-grow-5</c></summary>\r\n        | [<CompiledName(\"is-flex-grow-5\")>] Is5\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule FlexShrink =\r\n\r\n    type Option =\r\n        /// <summary>Add <c>is-flex-shrink-0</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-0\")>] Is0\r\n        /// <summary>Add <c>is-flex-shrink-1</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-1\")>] Is1\r\n        /// <summary>Add <c>is-flex-shrink-2</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-2\")>] Is2\r\n        /// <summary>Add <c>is-flex-shrink-3</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-3\")>] Is3\r\n        /// <summary>Add <c>is-flex-shrink-4</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-4\")>] Is4\r\n        /// <summary>Add <c>is-flex-shrink-5</c></summary>\r\n        | [<CompiledName(\"is-flex-shrink-5\")>] Is5\r\n\r\n        static member inline toClass (opt : Option) =\r\n            Reflection.getCaseName opt\r\n\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextWeight =\r\n\r\n    type Option =\r\n        /// Add `has-text-weight-light`\r\n        | [<CompiledName(\"has-text-weight-light\")>] Light\r\n        /// Add `has-text-weight-normal`\r\n        | [<CompiledName(\"has-text-weight-normal\")>] Normal\r\n        /// Add `has-text-weight-semibold`\r\n        | [<CompiledName(\"has-text-weight-semibold\")>] SemiBold\r\n        /// Add `has-text-weight-bold`\r\n        | [<CompiledName(\"has-text-weight-bold\")>] Bold\r\n        /// Add `has-text-weight-medium`\r\n        | [<CompiledName(\"has-text-weight-medium\")>] Medium\r\n\r\n    let inline internal ofOption opt =\r\n        Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule TextTransform =\r\n\r\n    type Option =\r\n        /// Add `is-capitalized`\r\n        | [<CompiledName(\"is-capitalized\")>] Capitalized\r\n        /// Add `is-lowercase`\r\n        | [<CompiledName(\"is-lowercase\")>] LowerCase\r\n        /// Add `is-uppercase`\r\n        | [<CompiledName(\"is-uppercase\")>] UpperCase\r\n        /// Add `is-italic`\r\n        | [<CompiledName(\"is-italic\")>] Italic\r\n        /// Add `is-underlined`\r\n        | [<CompiledName(\"is-underlined\")>] Underlined\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Display =\r\n\r\n    type Option =\r\n        | [<CompiledName(\"block\")>] Block\r\n        | [<CompiledName(\"flex\")>] Flex\r\n        | [<CompiledName(\"inline\")>] Inline\r\n        | [<CompiledName(\"inline-block\")>] InlineBlock\r\n        | [<CompiledName(\"inline-flex\")>] InlineFlex\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let internal toDisplayClass screen display =\r\n        let display = Option.toClass display\r\n        let screen = Screen.ToString screen\r\n\r\n        \"is-\" + display + screen\r\n\r\n    let internal toDisplayOnlyClass screen display =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            let display = Option.toClass display\r\n            let screen = Screen.ToString screen\r\n            \"is-\" + display + screen + \"-only\"\r\n\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support display only.\" (string x))\r\n            \"\"\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Spacing =\r\n    type TypeAndDirection =\r\n        | [<CompiledName(\"m\")>] Margin\r\n        | [<CompiledName(\"mt\")>] MarginTop\r\n        | [<CompiledName(\"mr\")>] MarginRight\r\n        | [<CompiledName(\"mb\")>] MarginBottom\r\n        | [<CompiledName(\"ml\")>] MarginLeft\r\n        | [<CompiledName(\"my\")>] MarginTopAndBottom\r\n        | [<CompiledName(\"mx\")>] MarginLeftAndRight\r\n        | [<CompiledName(\"p\")>] Padding\r\n        | [<CompiledName(\"pt\")>] PaddingTop\r\n        | [<CompiledName(\"pr\")>] PaddingRight\r\n        | [<CompiledName(\"pb\")>] PaddingBottom\r\n        | [<CompiledName(\"pl\")>] PaddingLeft\r\n        | [<CompiledName(\"py\")>] PaddingTopAndBottom\r\n        | [<CompiledName(\"px\")>] PaddingLeftAndRight\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    type Amount =\r\n        | [<CompiledName(\"auto\")>] IsAuto\r\n        | [<CompiledName(\"0\")>] Is0\r\n        | [<CompiledName(\"1\")>] Is1\r\n        | [<CompiledName(\"2\")>] Is2\r\n        | [<CompiledName(\"3\")>] Is3\r\n        | [<CompiledName(\"4\")>] Is4\r\n        | [<CompiledName(\"5\")>] Is5\r\n        | [<CompiledName(\"6\")>] Is6\r\n\r\n        static member inline toClass opt =\r\n            Reflection.getCaseName opt\r\n\r\n    let internal toSpacingClass typ amount =\r\n        let typ = TypeAndDirection.toClass typ\r\n        let amount = Amount.toClass amount\r\n\r\n        typ + \"-\" + amount\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Modifier =\r\n    let internal ofBackground level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"has-background-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> \"has-background-\" + (Reflection.getCaseName level).[3..]\r\n\r\n    let internal ofText level =\r\n        match level with\r\n        | NoColor -> \"\"\r\n        | IsCustomColor color -> \"has-text-\" + color\r\n        | IsBlack\r\n        | IsDark\r\n        | IsLight\r\n        | IsWhite\r\n        | IsPrimary\r\n        | IsInfo\r\n        | IsSuccess\r\n        | IsWarning\r\n        | IsDanger\r\n        | IsLink\r\n        | IsBlackBis\r\n        | IsBlackTer\r\n        | IsGreyDarker\r\n        | IsGreyDark\r\n        | IsGrey\r\n        | IsGreyLight\r\n        | IsGreyLighter\r\n        | IsWhiteTer\r\n        | IsWhiteBis -> \"has-text-\" + (Reflection.getCaseName level).[3..]\r\n\r\n    let internal ofInvisible screen =\r\n        \"is-invisible\" + Screen.ToString screen\r\n\r\n    let internal ofHidden screen =\r\n        \"is-hidden\" + Screen.ToString screen\r\n\r\n    let internal ofInvisibleOnly screen =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-invisible\" + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-invisible-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n    let internal ofHiddenOnly screen =\r\n        match screen with\r\n        | Screen.Tablet\r\n        | Screen.Desktop\r\n        | Screen.WideScreen ->\r\n            \"is-hidden\" + Screen.ToString screen + \"-only\"\r\n        | x ->\r\n            Fable.Core.JS.console.warn(sprintf \"Screen `%s` does not support `is-hidden-xxx-only`.\" (string x))\r\n            \"\"\r\n\r\n    type IModifier =\r\n        | BackgroundColor of IColor\r\n        | TextColor of IColor\r\n        | TextWeight of TextWeight.Option\r\n        | TextSize of Screen * TextSize.Option\r\n        | TextSizeOnly of Screen * TextSize.Option\r\n        | TextAlignment of Screen * TextAlignment.Option\r\n        | TextAlignmentOnly of Screen * TextAlignment.Option\r\n        | TextTransform of TextTransform.Option\r\n        | Display of Screen * Display.Option\r\n        | DisplayOnly of Screen * Display.Option\r\n        | [<CompiledName(\"is-clearfix\")>] IsClearfix\r\n        | [<CompiledName(\"is-pulled-left\")>] IsPulledLeft\r\n        | [<CompiledName(\"is-pulled-right\")>] IsPulledRight\r\n        | [<CompiledName(\"is-marginless\")>] IsMarginless\r\n        | [<CompiledName(\"is-paddingless\")>] IsPaddingless\r\n        | [<CompiledName(\"is-overlay\")>] IsOverlay\r\n        | [<CompiledName(\"is-clipped\")>] IsClipped\r\n        | [<CompiledName(\"is-radiusless\")>] IsRadiusless\r\n        | [<CompiledName(\"is-shadowless\")>] IsShadowless\r\n        | [<CompiledName(\"is-unselectable\")>] IsUnselectable\r\n        | [<CompiledName(\"is-clickable\")>] IsClickable\r\n        | [<CompiledName(\"is-relative\")>] IsRelative\r\n        | [<CompiledName(\"is-flex\")>] IsFlex\r\n        | IsInvisible of Screen * bool\r\n        | IsHidden of Screen * bool\r\n        | IsInvisibleOnly of Screen * bool\r\n        | IsHiddenOnly of Screen * bool\r\n        | IsSrOnly\r\n        | IsScreenReaderOnly\r\n        | Spacing of Spacing.TypeAndDirection * Spacing.Amount\r\n        // Flexbox helpers\r\n        | FlexDirection of FlexDirection.Option\r\n        | FlexWrap of FlexWrap.Option\r\n        | FlexJustifyContent of FlexJustifyContent.Option\r\n        | FlexAlignContent of FlexAlignContent.Option\r\n        | FlexAlignItems of FlexAlignItems.Option\r\n        | FlexAlignSelf of FlexAlignSelf.Option\r\n        | FlexGrow of FlexGrow.Option\r\n        | FlexShrink of FlexShrink.Option\r\n\r\n\r\n\r\n                //     | IsGap (screen, size) ->\r\n                // if not (List.contains \"is-variable\" result.Classes) then\r\n                //     result.AddClass(\"is-variable\").AddClass(gapSizeGeneric screen size)\r\n                // else\r\n                //     result.AddClass(gapSizeGeneric screen size)\r\n\r\n\r\n\r\n    let parseModifiers options =\r\n        let parseOptions result option =\r\n            match option with\r\n            | BackgroundColor color             -> (ofBackground color)::result\r\n            | TextColor color                   -> (ofText color)::result\r\n            | TextWeight textWeight             -> (TextWeight.ofOption textWeight)::result\r\n            | TextSize (screen, size)           -> (TextSize.generic screen size)::result\r\n            | TextSizeOnly (screen, size)       -> (TextSize.only screen size)::result\r\n            | TextAlignment (screen, size)      -> (TextAlignment.generic screen size)::result\r\n            | TextAlignmentOnly (screen, size)  -> (TextAlignment.only screen size)::result\r\n            | TextTransform transform           -> (TextTransform.Option.toClass transform)::result\r\n            | Display (screen, display)         -> (Display.toDisplayClass screen display)::result\r\n            | DisplayOnly (screen, display)     -> (Display.toDisplayOnlyClass screen display)::result\r\n            | IsInvisible (screen, b)           -> if b then (ofInvisible screen)::result else result\r\n            | IsInvisibleOnly (screen, b)       -> if b then (ofInvisibleOnly screen)::result else result\r\n            | IsHidden (screen, b)              -> if b then (ofHidden screen)::result else result\r\n            | IsHiddenOnly (screen, b)          -> if b then (ofHiddenOnly screen)::result else result\r\n            | IsSrOnly\r\n            | IsScreenReaderOnly -> \"is-sr-only\"::result\r\n            | IsClearfix\r\n            | IsPulledLeft\r\n            | IsPulledRight\r\n            | IsMarginless\r\n            | IsPaddingless\r\n            | IsOverlay\r\n            | IsClipped\r\n            | IsRadiusless\r\n            | IsShadowless\r\n            | IsClickable\r\n            | IsUnselectable\r\n            | IsFlex\r\n            | IsRelative -> (Reflection.getCaseName option)::result\r\n            | Spacing (typ, amount) -> (Spacing.toSpacingClass typ amount)::result\r\n            | FlexDirection direction ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexDirection.Option.toClass direction)::result\r\n                else\r\n                    (FlexDirection.Option.toClass direction)::result\r\n            | FlexWrap option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexWrap.Option.toClass option)::result\r\n                else\r\n                    (FlexWrap.Option.toClass option)::result\r\n            | FlexJustifyContent option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexJustifyContent.Option.toClass option)::result\r\n                else\r\n                    (FlexJustifyContent.Option.toClass option)::result\r\n            | FlexAlignContent option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexAlignContent.Option.toClass option)::result\r\n                else\r\n                    (FlexAlignContent.Option.toClass option)::result\r\n            | FlexAlignItems option ->\r\n                if not (List.contains \"is-flex\" result) then\r\n                    \"is-flex\"::(FlexAlignItems.Option.toClass option)::result\r\n                else\r\n                    (FlexAlignItems.Option.toClass option)::result\r\n\r\n            | FlexAlignSelf option ->\r\n                (FlexAlignSelf.Option.toClass option)::result\r\n\r\n            | FlexGrow size ->\r\n                (FlexGrow.Option.toClass size)::result\r\n\r\n            | FlexShrink size ->\r\n                (FlexShrink.Option.toClass size)::result\r\n\r\n        options |> List.fold parseOptions []\r\n\r\n[<AutoOpen>]\r\nmodule Common =\r\n    type GenericOption =\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    type GenericOptions =\r\n        { Props : IHTMLProp list\r\n          Classes : string list\r\n          RemovedClasses : string list }\r\n\r\n        static member Empty =\r\n            { Props = []; Classes = []; RemovedClasses = [] }\r\n\r\n        static member Parse(options, parser, ?baseClass, ?baseProps) =\r\n            let result = options |> List.fold parser GenericOptions.Empty\r\n\r\n            let result =\r\n                match baseClass with\r\n                | Some baseClass -> result.AddClass(baseClass)\r\n                | None -> result\r\n\r\n            match baseProps with\r\n            | Some baseProps -> result.AddProps(baseProps)\r\n            | None -> result\r\n\r\n        member this.AddProp(prop : IHTMLProp) =\r\n            { this with Props = prop::this.Props }\r\n\r\n        member this.AddProps(props : IHTMLProp list) =\r\n            { this with Props = props@this.Props }\r\n\r\n        member this.AddClass(cl: string) =\r\n            { this with Classes = cl::this.Classes }\r\n\r\n        member this.RemoveClass(cl: string) =\r\n            { this with RemovedClasses = cl::this.RemovedClasses }\r\n\r\n        member this.AddCaseName(case: 'T) =\r\n            Reflection.getCaseName case |> this.AddClass\r\n\r\n        member this.AddModifiers(modifiers) =\r\n            { this with Classes = (modifiers |> Modifier.parseModifiers) @ this.Classes }\r\n\r\n        member this.ToAttributes() =\r\n            match this.Classes |> List.filter (fun cls -> not (System.String.IsNullOrEmpty cls) && not (List.contains cls this.RemovedClasses)) with\r\n            | [] -> this.Props\r\n            | classes -> (classes |> String.concat \" \" |> ClassName :> _) :: this.Props\r\n\r\n        /// Convert to standard element\r\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement list -> ReactElement, ?children): ReactElement =\r\n            let children = defaultArg children []\r\n            el (this.ToAttributes ()) children\r\n\r\n        /// Convert to self closing element\r\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement): ReactElement =\r\n            el (this.ToAttributes ())\r\n\r\n    let parseOptions (result : GenericOptions) option =\r\n        match option with\r\n        | Props props -> result.AddProps props\r\n        | CustomClass customClass -> result.AddClass customClass\r\n        | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n    module Helpers =\r\n\r\n        [<System.Obsolete(\"Use GenericOptions.Parse. This build an abstraction layer usable by all the components and helps reduce the bundle size\")>]\r\n        let classes std (options : string option list) (booleans: (string * bool) list) =\r\n            let std = (std, options) ||> List.fold (fun complete option ->\r\n                match option with\r\n                | Some name -> complete + \" \" + name\r\n                | None -> complete )\r\n            (std, booleans) ||> List.fold (fun complete (name, flag) ->\r\n                if flag then complete + \" \" + name else complete)\r\n            |> ClassName :> IHTMLProp\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Text =\r\n    open Fable.React\r\n\r\n    let p (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(p, children)\r\n\r\n    let div (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(div, children)\r\n\r\n    let span (options: GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions).ToReactElement(span, children)\r\n","import { equals } from \"./Util.js\";\nimport { Union } from \"./Types.js\";\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function keyValueList(fields, caseRule = CaseRules.None) {\n    const obj = {};\n    const definedCaseRule = caseRule;\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    function assign(key, caseRule, value) {\n        key = changeCase(key, caseRule);\n        obj[key] = value;\n    }\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (kvPair instanceof Union) {\n            const name = kvPair.cases()[kvPair.tag];\n            kvPair = kvPair.fields.length === 0 ? name : [name].concat(kvPair.fields);\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    assign(kvPair[0], caseRule, true);\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    assign(kvPair[0], caseRule, value);\n                    break;\n                default:\n                    assign(kvPair[0], caseRule, kvPair.slice(1));\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            assign(kvPair, caseRule, true);\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return obj;\n}\n// TODO: Move these methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    if (map.has(key)) {\n        defaultValue.contents = map.get(key);\n        return true;\n    }\n    return false;\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n","namespace Fulma\r\n\r\nopen Fulma\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule File =\r\n\r\n    type Option =\r\n        | CustomClass of string\r\n        | Props of IHTMLProp list\r\n        | Size of ISize\r\n        /// Add `is-focused` class if true\r\n        | [<CompiledName(\"is-focused\")>]IsFocused of bool\r\n        /// Add `is-active` class if true\r\n        | [<CompiledName(\"is-active\")>]IsActive of bool\r\n        /// Add `is-hovered` class if true\r\n        | [<CompiledName(\"is-hovered\")>]IsHovered of bool\r\n        /// Add `is-fullwidth` class\r\n        | [<CompiledName(\"is-fullwidth\")>]IsFullWidth\r\n        /// Add `is-centered` class\r\n        | [<CompiledName(\"is-centered\")>]IsCentered\r\n        /// Add `is-right` class\r\n        | [<CompiledName(\"is-right\")>]IsRight\r\n        /// Add `is-boxed` class\r\n        | [<CompiledName(\"is-boxed\")>]IsBoxed\r\n        /// Add `has-name` class\r\n        | [<CompiledName(\"has-name\")>]HasName\r\n        /// Add `is-empty` class if true\r\n        | [<CompiledName(\"is-empty\")>]IsEmpty of bool\r\n        | Color of IColor\r\n        | Modifiers of Modifier.IModifier list\r\n\r\n    /// Generate <div class=\"file\"></div>\r\n    let file (options : Option list) children =\r\n        let parseOptions (result : GenericOptions) option =\r\n            match option with\r\n            | Size size -> ofSize size |> result.AddClass\r\n            | IsFullWidth\r\n            | IsCentered\r\n            | IsRight\r\n            | IsBoxed\r\n            | HasName -> result.AddCaseName option\r\n            | Color color -> ofColor color |> result.AddClass\r\n            | IsFocused state\r\n            | IsActive state\r\n            | IsHovered state\r\n            | IsEmpty state -> if state then result.AddCaseName option else result\r\n            | Props props -> result.AddProps props\r\n            | CustomClass customClass -> result.AddClass customClass\r\n            | Modifiers modifiers -> result.AddModifiers modifiers\r\n\r\n        GenericOptions.Parse(options, parseOptions, \"file\").ToReactElement(div, children)\r\n\r\n    /// Generate <input type=\"file\" class=\"file-input\"/>\r\n    let input (options : GenericOption list) =\r\n        GenericOptions.Parse(options, parseOptions, \"file-input\", [Type \"file\" :> IHTMLProp]).ToReactElement(input)\r\n\r\n    /// Generate <span class=\"file-cta\"></span>\r\n    let cta (options : GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions, \"file-cta\").ToReactElement(span, children)\r\n\r\n    /// Generate <span class=\"file-name\"></span>\r\n    let name (options : GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions, \"file-name\").ToReactElement(span, children)\r\n\r\n    /// Generate <span class=\"file-icon\"></span>\r\n    let icon (options : GenericOption list) children =\r\n        GenericOptions.Parse(options, parseOptions, \"file-icon\").ToReactElement(span, children)\r\n\r\n    module Label =\r\n\r\n        /// Generate <span class=\"file-label\"></span>\r\n        let span (options : GenericOption list) children =\r\n            GenericOptions.Parse(options, parseOptions, \"file-label\").ToReactElement(span, children)\r\n\r\n        /// Generate <label class=\"file-label\"></label>\r\n        let label (options : GenericOption list) children =\r\n            GenericOptions.Parse(options, parseOptions, \"file-label\").ToReactElement(label, children)\r\n","module Feliz.Bulma.ElementBuilders\r\n\r\nopen Feliz\r\nopen Feliz.Bulma\r\n\r\nmodule Helpers =\r\n    let [<Literal>] private ClassName = \"className\"\r\n\r\n    let inline internal getClasses (xs:IReactProperty list) =\r\n        xs\r\n        |> List.choose (unbox<string * obj> >> function\r\n            | (k, v) when k = ClassName -> Some (string v)\r\n            | _ -> None)\r\n\r\n    let extractClasses (xs:IReactProperty list) =\r\n        xs\r\n        |> List.rev\r\n        |> List.fold (fun (classes, props) x ->\r\n            match unbox<string * obj> x with\r\n            | (k, v) when k = ClassName -> string v :: classes, props\r\n            | _ -> classes, x :: props) ([], [])\r\n\r\n    let combineClasses cn (xs:IReactProperty list) =\r\n        xs\r\n        |> extractClasses\r\n        |> fun (classes, props) -> (cn :: classes |> prop.classes) :: props\r\n\r\nmodule Div =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.div (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.div [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.div [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.div [ prop.className cn; prop.text value ]\r\n\r\nmodule Nav =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.nav (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.nav [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Article =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.article (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.article [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Section =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.section (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.section [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Footer =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.footer (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.footer [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Label =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.label (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.label [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.label [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.label [ prop.className cn; prop.text value ]\r\n\r\nmodule Input =\r\n    let inline propsWithType (cn:string) (typ: IReactProperty) (xs:IReactProperty list) =\r\n        Html.input (typ :: Helpers.combineClasses cn xs)\r\n\r\nmodule Textarea =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.textarea (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.textarea [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Button =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.button (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.button [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.button [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.button [ prop.className cn; prop.text value ]\r\n\r\nmodule Span =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.span (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.span [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.span [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.span [ prop.className cn; prop.text value ]\r\n\r\nmodule Figure =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.figure (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.figure [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Progress =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.progress (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.progress [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.progress [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.progress [ prop.className cn; prop.text value ]\r\n\r\nmodule Table =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.table (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.table [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule H1 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h1 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h1 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h1 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h1 [ prop.className cn; prop.text value ]\r\n\r\nmodule H2 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h2 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h2 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h2 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h2 [ prop.className cn; prop.text value ]\r\n\r\nmodule H3 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h3 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h3 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h3 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h3 [ prop.className cn; prop.text value ]\r\n\r\nmodule H4 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h4 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h4 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h4 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h4 [ prop.className cn; prop.text value ]\r\n\r\nmodule H5 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h5 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h5 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h5 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h5 [ prop.className cn; prop.text value ]\r\n\r\nmodule H6 =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.h6 (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.h6 [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.h6 [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.h6 [ prop.className cn; prop.text value ]\r\n\r\nmodule Hr =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.hr (Helpers.combineClasses cn xs)\r\n\r\nmodule Aside =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.aside (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.aside [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule P =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.p (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.p [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.p [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.p [ prop.className cn; prop.text value ]\r\n\r\nmodule Ul =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.ul (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.ul [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Li =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.li (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.li [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule Header =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.header (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.header [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n\r\nmodule A =\r\n    let inline props (cn:string) (xs:IReactProperty list) = Html.a (Helpers.combineClasses cn xs)\r\n    let inline children (cn:string) (children:seq<ReactElement>) = Html.a [ prop.className cn; prop.children children ]\r\n    let inline valueElm (cn:string) (value:ReactElement) = value |> List.singleton |> children cn\r\n    let inline valueStr (cn:string) (value:string) = Html.a [ prop.className cn; prop.text value ]\r\n    let inline valueInt (cn:string) (value:int) = Html.a [ prop.className cn; prop.text value ]\r\n","module Client.Widgets.General\n\nopen Browser.Types\nopen Fable.React.Props\nopen Feliz\nopen Feliz.Bulma\nopen Browser\nopen Fulma\n\ntype ResetState =\n    | Default\n    | Confirm\n\ntype Model =\n    { ResetState : ResetState }\n\ntype Msg =\n    | AskReset\n    | ConfirmReset\n    | CancelReset\n    | UploadSdf of name : string * src : string\n    | DownloadScript\n\n[<RequireQualifiedAccess>]\ntype ExternalMessage =\n    | NoOp\n    | Reset\n    | UploadSdf of name : string * src : string\n    | DownloadSvg\n\ntype ActionButtonType =\n    | Default of Msg\n    | RequestFileInput\n\nlet init () = { ResetState = ResetState.Default }\n\nlet update (msg : Msg) (model : Model) : Model * ExternalMessage =\n    match msg with\n    | AskReset -> { model with ResetState = Confirm }, ExternalMessage.NoOp\n    | ConfirmReset -> { model with ResetState = ResetState.Default }, ExternalMessage.Reset\n    | CancelReset -> { model with ResetState = ResetState.Default }, ExternalMessage.NoOp\n    | UploadSdf (name, src) -> model, ExternalMessage.UploadSdf (name, src)\n    | DownloadScript -> model, ExternalMessage.DownloadSvg\n\nlet private fileInputEvent dispatch =\n    Fulma.File.input [\n        Props [\n            Style [\n                Cursor \"pointer\"\n                Display DisplayOptions.Inherit\n            ]\n            OnInput (fun ev ->\n                let file = (ev.target :?> HTMLInputElement).files.[0]\n                let name = file.name\n                let reader = FileReader.Create()\n                reader.onload <- fun _ ->\n                    let content = reader.result :?> string\n                    (name, content) |> UploadSdf |> dispatch\n                reader.readAsText file)\n        ]\n    ]\n\nlet viewCollapsed (model : Model) dispatch =\n    let uploadIcon = [ Html.i [ prop.className \"fas fa-star\" ] ]\n    let downloadIcon = [ Html.i [ prop.className \"fas fa-star\" ] ]\n    let refreshIcon = [ Html.i [ prop.className \"fas fa-star\" ] ]\n\n    let actionButton (wrapped : ActionButtonType) (faIcon : ReactElement list) =\n        match wrapped with\n        | Default msg ->\n            Html.div [\n                prop.className \"action-button\"\n                prop.children [\n                    Bulma.button.a [\n                        button.isOutlined\n                        prop.onClick (fun _ -> dispatch msg)\n                        prop.children [\n                            Bulma.icon [\n                                icon.isLarge\n                                prop.children faIcon\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        | RequestFileInput ->\n            Html.div [\n                prop.className \"action-button\"\n                prop.children [\n                    Bulma.button.a [\n                        prop.style [\n                            Feliz.style.width 35\n                        ]\n                        button.isOutlined\n                        prop.children [\n                            Bulma.icon [\n                                prop.style [\n                                    Feliz.style.marginRight -8\n                                ]\n                                icon.isLarge\n                                prop.children faIcon\n                            ]\n                            fileInputEvent dispatch\n                        ]\n                    ]\n                ]\n            ]\n\n    Html.div [\n        prop.className \"actions-area\"\n        prop.children [\n            actionButton (Default AskReset) refreshIcon\n            actionButton RequestFileInput uploadIcon\n            actionButton (Default DownloadScript) downloadIcon\n        ]\n    ]\n\nlet viewExpanded (model : Model) dispatch =\n    let renderItem (wrapped : ActionButtonType) (text : string) =\n\n        match wrapped with\n        | Default msg ->\n            Bulma.field.div [\n                field.hasAddons\n                prop.children [\n//                    Bulma.control.div [\n//                        Bulma.button.a [\n//                            prop.onClick (fun _ -> dispatch msg)\n//                        ]\n//                    ]\n                    Bulma.control.div [\n                        control.isExpanded\n                        prop.children [\n                            Bulma.button.a [\n                                prop.onClick (fun _ -> dispatch msg)\n                                button.isText\n                                button.isFullWidth\n                                prop.children [\n                                    Html.span text\n                                ]\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n\n        | RequestFileInput ->\n            Bulma.field.div [\n                field.hasAddons\n                prop.children [\n//                    Bulma.control.div [\n//                        Bulma.button.a [\n//                            prop.children [\n//                                fileInputEvent dispatch\n//                            ]\n//                        ]\n//                    ]\n                    Bulma.control.div [\n                        control.isExpanded\n                        prop.children [\n                            Bulma.button.a [\n                                button.isText\n                                button.isFullWidth\n                                prop.children [\n                                    Html.span text\n                                    fileInputEvent dispatch\n                                ]\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n\n    let content =\n        match model.ResetState with\n        | ResetState.Default ->\n            Html.div [\n                renderItem (Default AskReset) \" Refresh renderer\"\n                renderItem RequestFileInput \"Upload SDF (V2000)\"\n                renderItem (Default DownloadScript) \"Download SVG\"\n            ]\n\n\n        | Confirm ->\n            Bulma.field.div [\n                Bulma.help [\n                    color.isBlack\n                    prop.text \"Please, confirm to reset\"\n                ]\n\n                Bulma.field.div [\n                    field.hasAddons\n                    prop.children [\n                        Bulma.control.div [\n                            Bulma.button.a [\n                                prop.onClick (fun _ -> dispatch ConfirmReset)\n                                color.isSuccess\n                                prop.children [\n                                    Bulma.icon [\n                                        Html.i [ prop.className \"fas fa-check\" ]\n                                    ]\n                                    Html.span \"Confirm\"\n                                ]\n                            ]\n                        ]\n\n                        Bulma.control.div [\n                            Bulma.button.a [\n                                prop.onClick (fun _ -> dispatch CancelReset)\n                                color.isDanger\n                                prop.children [\n                                    Bulma.icon [\n                                        Html.i [ prop.className \"fas fa-times\" ]\n                                    ]\n                                    Html.span \"Cancel\"\n                                ]\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n\n    Bulma.content content\n\nlet viewModalResetConfirmation (model: Model) dispatch =\n    Bulma.modal [\n        if (model.ResetState = Confirm) then\n            modal.isActive\n        prop.style [\n            // Make sure to be on top of everything.\n            style.zIndex 20000\n        ]\n        prop.children [\n            Bulma.modalBackground [\n                prop.onClick (fun _ -> dispatch CancelReset)\n            ]\n\n            Bulma.modalContent [\n                Html.div [\n                    prop.className \"reset-confirmation-modal\"\n                    prop.children [\n                        Html.div [\n                            prop.className \"reset-confirmation-modal-content\"\n                            prop.children [\n                                Html.span [\n                                    prop.className \"reset-confirmation-modal-content-text\"\n                                    prop.text \"Please, confirm to reset\"\n                                ]\n\n                                Html.div [\n                                    prop.className \"reset-confirmation-modal-content-foot\"\n                                    prop.children [\n                                        Bulma.field.div [\n                                            prop.children [\n                                                Bulma.field.div [\n                                                    field.hasAddons\n                                                    prop.children [\n                                                        Bulma.control.div [\n                                                            Bulma.button.a [\n                                                                prop.onClick (fun _ -> dispatch ConfirmReset)\n                                                                color.isSuccess\n                                                                prop.children [\n                                                                    Bulma.icon [\n                                                                        (Html.i [ prop.className \"fas fa-star\" ])\n                                                                    ]\n\n                                                                    Html.span \"Confirm\"\n                                                                ]\n                                                            ]\n                                                        ]\n\n                                                        Bulma.control.div [\n                                                            Bulma.button.a [\n                                                                prop.onClick (fun _ -> dispatch CancelReset)\n                                                                color.isDanger\n                                                                prop.children [\n                                                                    Bulma.icon [\n                                                                        (Html.i [ prop.className \"fas fa-star\" ])\n                                                                    ]\n\n                                                                    Html.span \"Cancel\"\n                                                                ]\n                                                            ]\n                                                        ]\n                                                    ]\n                                                ]\n                                            ]\n                                        ]\n                                    ]\n                                ]\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        ]\n    ]","[<AutoOpen>]\r\nmodule Fable.React.Extensions\r\n\r\ntype Browser.Types.Event with\r\n    /// Access the value from target\r\n    /// Equivalent to `(this.target :?> HTMLInputElement).value`\r\n    member this.Value =\r\n        (this.target :?> Browser.Types.HTMLInputElement).value\r\n\r\n    /// Access the checked property from target\r\n    /// Equivalent to `(this.target :?> HTMLInputElement).checked`\r\n    member this.Checked =\r\n        (this.target :?> Browser.Types.HTMLInputElement).``checked``\r\n","module Client.Widgets.Settings\n\nopen Feliz\nopen Feliz.Bulma\nopen Elmish\nopen Fable.React\n\n\ntype Model = float option\n\ntype Msg =\n    | SetShowHydrogenAtoms\n    | SetDepiction\n    | SetXRotation of float\n    | SetYRotation of float\n    | SetZRotation of float\n    | Oops of exn\n\ntype ExternalMessage =\n    | NoOp\n    | GotShowHydrogenAtoms\n    | GotDepiction\n    | GotXRotation of float\n    | GotYRotation of float\n    | GotZRotation of float\n\nlet init () =\n    let model = None\n    model, Cmd.none\n\nlet update (msg : Msg) (model : Model) : Model * ExternalMessage =\n    match msg with\n    | SetShowHydrogenAtoms ->\n        model, ExternalMessage.GotShowHydrogenAtoms\n    | SetDepiction ->\n        model, ExternalMessage.GotDepiction\n    | SetXRotation rotation ->\n        model, (ExternalMessage.GotXRotation rotation)\n    | SetYRotation rotation ->\n        model, (ExternalMessage.GotYRotation rotation)\n    | SetZRotation rotation ->\n        model, (ExternalMessage.GotZRotation rotation)\n    | Msg.Oops _ -> model, ExternalMessage.NoOp  // ignored for now\n\nlet view (model : Model) (dispatch : Msg -> unit) =\n    Bulma.content [\n        Html.div [\n            Switch.checkbox [\n                prop.id \"hydrogen-switch\"\n                prop.onChange (fun (_ : Browser.Types.Event) -> SetShowHydrogenAtoms |> dispatch)\n                color.isSuccess\n            ]\n            Html.label [\n                prop.htmlFor \"hydrogen-switch\"\n                prop.text \"Show hydrogen atoms\"\n            ]\n        ]\n        Html.div [\n            Switch.checkbox [\n                prop.id \"depiction-switch\"\n                prop.onChange (fun (_ : Browser.Types.Event) -> SetDepiction |> dispatch)\n                color.isSuccess\n            ]\n            Html.label [\n                prop.htmlFor \"depiction-switch\"\n                prop.text \"Change depiction\"\n            ]\n        ]\n        Html.div [\n            Slider.slider [\n                slider.isFullWidth\n                slider.isCircle\n                slider.isLarge\n                color.isBlack\n                prop.onChange (fun (ev: Browser.Types.Event) -> (SetXRotation (float ev.Value) |> dispatch))\n            ]\n        ]\n        Html.div [\n            Slider.slider [\n                slider.isFullWidth\n                slider.isCircle\n                slider.isLarge\n                color.isBlack\n                prop.onChange (fun (ev: Browser.Types.Event) -> (SetYRotation (float ev.Value) |> dispatch))\n            ]\n        ]\n        Html.div [\n            Slider.slider [\n                slider.isFullWidth\n                slider.isCircle\n                slider.isLarge\n                color.isBlack\n                prop.onChange (fun (ev: Browser.Types.Event) -> (SetZRotation (float ev.Value) |> dispatch))\n            ]\n        ]\n    ]","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\r\nimport { some, value as value_1 } from \"./Option.js\";\r\nimport { toString, Record } from \"./Types.js\";\r\nimport { FSharpList, fold as fold_2, cons, singleton as singleton_1, empty as empty_1, ofArrayWithTail, tail, head, isEmpty as isEmpty_1 } from \"./List.js\";\r\nimport { fold as fold_1, fill } from \"./Array.js\";\r\nimport { structuralHash, toIterator, disposeSafe, getEnumerator, isArrayLike } from \"./Util.js\";\r\nimport { join } from \"./String.js\";\r\nimport { exists as exists_1, cache, forAll as forAll_1, fold as fold_3, reduce, iterate as iterate_1, map as map_1 } from \"./Seq.js\";\r\nimport { HashSet__get_Comparer, HashSet_$ctor_Z6150332D, HashSet } from \"./MutableSet.js\";\r\n\r\nexport class SetTreeLeaf$1 {\r\n    constructor(k) {\r\n        this.k = k;\r\n    }\r\n}\r\n\r\nexport function SetTreeLeaf$1$reflection(gen0) {\r\n    return class_type(\"Set.SetTreeLeaf`1\", [gen0], SetTreeLeaf$1);\r\n}\r\n\r\nexport function SetTreeLeaf$1_$ctor_2B595(k) {\r\n    return new SetTreeLeaf$1(k);\r\n}\r\n\r\nexport function SetTreeLeaf$1__get_Key(_) {\r\n    return _.k;\r\n}\r\n\r\nexport class SetTreeNode$1 extends SetTreeLeaf$1 {\r\n    constructor(v, left, right, h) {\r\n        super(v);\r\n        this.left = left;\r\n        this.right = right;\r\n        this.h = (h | 0);\r\n    }\r\n}\r\n\r\nexport function SetTreeNode$1$reflection(gen0) {\r\n    return class_type(\"Set.SetTreeNode`1\", [gen0], SetTreeNode$1, SetTreeLeaf$1$reflection(gen0));\r\n}\r\n\r\nexport function SetTreeNode$1_$ctor_Z6E7BE5F7(v, left, right, h) {\r\n    return new SetTreeNode$1(v, left, right, h);\r\n}\r\n\r\nexport function SetTreeNode$1__get_Left(_) {\r\n    return _.left;\r\n}\r\n\r\nexport function SetTreeNode$1__get_Right(_) {\r\n    return _.right;\r\n}\r\n\r\nexport function SetTreeNode$1__get_Height(_) {\r\n    return _.h;\r\n}\r\n\r\nexport function SetTreeModule_empty() {\r\n    return void 0;\r\n}\r\n\r\nexport function SetTreeModule_countAux(t_mut, acc_mut) {\r\n    SetTreeModule_countAux:\r\n    while (true) {\r\n        const t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(t2), acc + 1);\r\n                continue SetTreeModule_countAux;\r\n            }\r\n            else {\r\n                return (acc + 1) | 0;\r\n            }\r\n        }\r\n        else {\r\n            return acc | 0;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_count(s) {\r\n    return SetTreeModule_countAux(s, 0);\r\n}\r\n\r\nexport function SetTreeModule_mk(l, k, r) {\r\n    let hl;\r\n    const t = l;\r\n    if (t != null) {\r\n        const t2 = t;\r\n        hl = ((t2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2) : 1);\r\n    }\r\n    else {\r\n        hl = 0;\r\n    }\r\n    let hr;\r\n    const t_1 = r;\r\n    if (t_1 != null) {\r\n        const t2_1 = t_1;\r\n        hr = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\r\n    }\r\n    else {\r\n        hr = 0;\r\n    }\r\n    const m = ((hl < hr) ? hr : hl) | 0;\r\n    if (m === 0) {\r\n        return SetTreeLeaf$1_$ctor_2B595(k);\r\n    }\r\n    else {\r\n        return SetTreeNode$1_$ctor_Z6E7BE5F7(k, l, r, m + 1);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_rebalance(t1, v, t2) {\r\n    let t_2, t2_3, t_3, t2_4;\r\n    let t1h;\r\n    const t = t1;\r\n    if (t != null) {\r\n        const t2_1 = t;\r\n        t1h = ((t2_1 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_1) : 1);\r\n    }\r\n    else {\r\n        t1h = 0;\r\n    }\r\n    let t2h;\r\n    const t_1 = t2;\r\n    if (t_1 != null) {\r\n        const t2_2 = t_1;\r\n        t2h = ((t2_2 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_2) : 1);\r\n    }\r\n    else {\r\n        t2h = 0;\r\n    }\r\n    if (t2h > (t1h + 2)) {\r\n        const matchValue = value_1(t2);\r\n        if (matchValue instanceof SetTreeNode$1) {\r\n            if (((t_2 = SetTreeNode$1__get_Left(matchValue), (t_2 != null) ? ((t2_3 = t_2, (t2_3 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_3) : 1)) : 0)) > (t1h + 1)) {\r\n                const matchValue_1 = value_1(SetTreeNode$1__get_Left(matchValue));\r\n                if (matchValue_1 instanceof SetTreeNode$1) {\r\n                    return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue_1)), SetTreeLeaf$1__get_Key(matchValue_1), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_1), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue)));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Set.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(matchValue)), SetTreeLeaf$1__get_Key(matchValue), SetTreeNode$1__get_Right(matchValue));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Set.rebalance\"));\r\n        }\r\n    }\r\n    else if (t1h > (t2h + 2)) {\r\n        const matchValue_2 = value_1(t1);\r\n        if (matchValue_2 instanceof SetTreeNode$1) {\r\n            if (((t_3 = SetTreeNode$1__get_Right(matchValue_2), (t_3 != null) ? ((t2_4 = t_3, (t2_4 instanceof SetTreeNode$1) ? SetTreeNode$1__get_Height(t2_4) : 1)) : 0)) > (t2h + 1)) {\r\n                const matchValue_3 = value_1(SetTreeNode$1__get_Right(matchValue_2));\r\n                if (matchValue_3 instanceof SetTreeNode$1) {\r\n                    return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeNode$1__get_Left(matchValue_3)), SetTreeLeaf$1__get_Key(matchValue_3), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_3), v, t2));\r\n                }\r\n                else {\r\n                    throw (new Error(\"internal error: Set.rebalance\"));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_mk(SetTreeNode$1__get_Left(matchValue_2), SetTreeLeaf$1__get_Key(matchValue_2), SetTreeModule_mk(SetTreeNode$1__get_Right(matchValue_2), v, t2));\r\n            }\r\n        }\r\n        else {\r\n            throw (new Error(\"internal error: Set.rebalance\"));\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_mk(t1, v, t2);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_add(comparer, k, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (c < 0) {\r\n                return SetTreeModule_rebalance(SetTreeModule_add(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\r\n            }\r\n            else if (c === 0) {\r\n                return t;\r\n            }\r\n            else {\r\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_add(comparer, k, SetTreeNode$1__get_Right(t2)));\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (c_1 < 0) {\r\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, SetTreeModule_empty(), t, 2);\r\n            }\r\n            else if (c_1 === 0) {\r\n                return t;\r\n            }\r\n            else {\r\n                return SetTreeNode$1_$ctor_Z6E7BE5F7(k, t, SetTreeModule_empty(), 2);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeLeaf$1_$ctor_2B595(k);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_balance(comparer, t1, k, t2) {\r\n    if (t1 != null) {\r\n        const t1$0027 = t1;\r\n        if (t2 != null) {\r\n            const t2$0027 = t2;\r\n            if (t1$0027 instanceof SetTreeNode$1) {\r\n                if (t2$0027 instanceof SetTreeNode$1) {\r\n                    if ((SetTreeNode$1__get_Height(t1$0027) + 2) < SetTreeNode$1__get_Height(t2$0027)) {\r\n                        return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));\r\n                    }\r\n                    else if ((SetTreeNode$1__get_Height(t2$0027) + 2) < SetTreeNode$1__get_Height(t1$0027)) {\r\n                        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1$0027), k, t2));\r\n                    }\r\n                    else {\r\n                        return SetTreeModule_mk(t1, k, t2);\r\n                    }\r\n                }\r\n                else {\r\n                    return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));\r\n            }\r\n        }\r\n        else {\r\n            return SetTreeModule_add(comparer, k, t1);\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_add(comparer, k, t2);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_split(comparer, pivot, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            const c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (c < 0) {\r\n                const patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(t2));\r\n                return [patternInput[0], patternInput[1], SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\r\n            }\r\n            else if (c === 0) {\r\n                return [SetTreeNode$1__get_Left(t2), true, SetTreeNode$1__get_Right(t2)];\r\n            }\r\n            else {\r\n                const patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(t2));\r\n                return [SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), patternInput_1[0]), patternInput_1[1], patternInput_1[2]];\r\n            }\r\n        }\r\n        else {\r\n            const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;\r\n            if (c_1 < 0) {\r\n                return [t, false, SetTreeModule_empty()];\r\n            }\r\n            else if (c_1 === 0) {\r\n                return [SetTreeModule_empty(), true, SetTreeModule_empty()];\r\n            }\r\n            else {\r\n                return [SetTreeModule_empty(), false, t];\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return [SetTreeModule_empty(), false, SetTreeModule_empty()];\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_spliceOutSuccessor(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (SetTreeNode$1__get_Left(t2) == null) {\r\n                return [SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2)];\r\n            }\r\n            else {\r\n                const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(t2));\r\n                return [patternInput[0], SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2))];\r\n            }\r\n        }\r\n        else {\r\n            return [SetTreeLeaf$1__get_Key(t2), SetTreeModule_empty()];\r\n        }\r\n    }\r\n    else {\r\n        throw (new Error(\"internal error: Set.spliceOutSuccessor\"));\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_remove(comparer, k, t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            if (c < 0) {\r\n                return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2), SetTreeNode$1__get_Right(t2));\r\n            }\r\n            else if (c === 0) {\r\n                if (SetTreeNode$1__get_Left(t2) == null) {\r\n                    return SetTreeNode$1__get_Right(t2);\r\n                }\r\n                else if (SetTreeNode$1__get_Right(t2) == null) {\r\n                    return SetTreeNode$1__get_Left(t2);\r\n                }\r\n                else {\r\n                    const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(t2));\r\n                    return SetTreeModule_mk(SetTreeNode$1__get_Left(t2), patternInput[0], patternInput[1]);\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2), SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Right(t2)));\r\n            }\r\n        }\r\n        else if (c === 0) {\r\n            return SetTreeModule_empty();\r\n        }\r\n        else {\r\n            return t;\r\n        }\r\n    }\r\n    else {\r\n        return t;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {\r\n    SetTreeModule_mem:\r\n    while (true) {\r\n        const comparer = comparer_mut, k = k_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (c < 0) {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    t_mut = SetTreeNode$1__get_Left(t2);\r\n                    continue SetTreeModule_mem;\r\n                }\r\n                else if (c === 0) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    k_mut = k;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_mem;\r\n                }\r\n            }\r\n            else {\r\n                return c === 0;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_iter(f_mut, t_mut) {\r\n    SetTreeModule_iter:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                SetTreeModule_iter(f, SetTreeNode$1__get_Left(t2));\r\n                f(SetTreeLeaf$1__get_Key(t2));\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                continue SetTreeModule_iter;\r\n            }\r\n            else {\r\n                f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {\r\n    SetTreeModule_foldBackOpt:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut, x = x_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                x_mut = f(SetTreeLeaf$1__get_Key(t2), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(t2), x));\r\n                continue SetTreeModule_foldBackOpt;\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2), x);\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_foldBack(f, m, x) {\r\n    return SetTreeModule_foldBackOpt(f, m, x);\r\n}\r\n\r\nexport function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {\r\n    SetTreeModule_foldOpt:\r\n    while (true) {\r\n        const f = f_mut, x = x_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                f_mut = f;\r\n                x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(t2)), SetTreeLeaf$1__get_Key(t2));\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                continue SetTreeModule_foldOpt;\r\n            }\r\n            else {\r\n                return f(x, SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_fold(f, x, m) {\r\n    return SetTreeModule_foldOpt(f, x, m);\r\n}\r\n\r\nexport function SetTreeModule_forall(f_mut, t_mut) {\r\n    SetTreeModule_forall:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (f(SetTreeLeaf$1__get_Key(t2)) && SetTreeModule_forall(f, SetTreeNode$1__get_Left(t2))) {\r\n                    f_mut = f;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_forall;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_exists(f_mut, t_mut) {\r\n    SetTreeModule_exists:\r\n    while (true) {\r\n        const f = f_mut, t = t_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                if (f(SetTreeLeaf$1__get_Key(t2)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(t2))) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    f_mut = f;\r\n                    t_mut = SetTreeNode$1__get_Right(t2);\r\n                    continue SetTreeModule_exists;\r\n                }\r\n            }\r\n            else {\r\n                return f(SetTreeLeaf$1__get_Key(t2));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_subset(comparer, a, b) {\r\n    return SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a);\r\n}\r\n\r\nexport function SetTreeModule_properSubset(comparer, a, b) {\r\n    if (SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a)) {\r\n        return SetTreeModule_exists((x_1) => (!SetTreeModule_mem(comparer, x_1, a)), b);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {\r\n    SetTreeModule_filterAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_1 = f(SetTreeLeaf$1__get_Key(t2)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc) : acc;\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(t2), acc_1);\r\n                continue SetTreeModule_filterAux;\r\n            }\r\n            else if (f(SetTreeLeaf$1__get_Key(t2))) {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_filter(comparer, f, s) {\r\n    return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {\r\n    SetTreeModule_diffAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, t = t_mut, acc = acc_mut;\r\n        if (acc == null) {\r\n            return acc;\r\n        }\r\n        else if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                comparer_mut = comparer;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(t2), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc));\r\n                continue SetTreeModule_diffAux;\r\n            }\r\n            else {\r\n                return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_diff(comparer, a, b) {\r\n    return SetTreeModule_diffAux(comparer, b, a);\r\n}\r\n\r\nexport function SetTreeModule_union(comparer, t1, t2) {\r\n    if (t1 != null) {\r\n        const t1$0027 = t1;\r\n        if (t2 != null) {\r\n            const t2$0027 = t2;\r\n            if (t1$0027 instanceof SetTreeNode$1) {\r\n                if (t2$0027 instanceof SetTreeNode$1) {\r\n                    if (SetTreeNode$1__get_Height(t1$0027) > SetTreeNode$1__get_Height(t2$0027)) {\r\n                        const patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\r\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1$0027), patternInput[0]), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1$0027), patternInput[2]));\r\n                    }\r\n                    else {\r\n                        const patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\r\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2$0027), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2$0027), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2$0027), patternInput_1[2]));\r\n                    }\r\n                }\r\n                else {\r\n                    return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\r\n                }\r\n            }\r\n            else {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\r\n            }\r\n        }\r\n        else {\r\n            return t1;\r\n        }\r\n    }\r\n    else {\r\n        return t2;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {\r\n    SetTreeModule_intersectionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, b = b_mut, t = t_mut, acc = acc_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(t2), acc);\r\n                const acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc_1) : acc_1;\r\n                comparer_mut = comparer;\r\n                b_mut = b;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_mut = acc_2;\r\n                continue SetTreeModule_intersectionAux;\r\n            }\r\n            else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) {\r\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_intersection(comparer, a, b) {\r\n    return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_partition1(comparer, f, k, acc1, acc2) {\r\n    if (f(k)) {\r\n        return [SetTreeModule_add(comparer, k, acc1), acc2];\r\n    }\r\n    else {\r\n        return [acc1, SetTreeModule_add(comparer, k, acc2)];\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc_0_mut, acc_1_mut) {\r\n    SetTreeModule_partitionAux:\r\n    while (true) {\r\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc_0 = acc_0_mut, acc_1 = acc_1_mut;\r\n        const acc = [acc_0, acc_1];\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                const acc_2 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(t2), acc[0], acc[1]);\r\n                const acc_3 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc_2[0], acc_2[1]);\r\n                comparer_mut = comparer;\r\n                f_mut = f;\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                acc_0_mut = acc_3[0];\r\n                acc_1_mut = acc_3[1];\r\n                continue SetTreeModule_partitionAux;\r\n            }\r\n            else {\r\n                return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);\r\n            }\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_partition(comparer, f, s) {\r\n    return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());\r\n}\r\n\r\nexport function SetTreeModule_minimumElementAux(t_mut, n_mut) {\r\n    SetTreeModule_minimumElementAux:\r\n    while (true) {\r\n        const t = t_mut, n = n_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Left(t2);\r\n                n_mut = SetTreeLeaf$1__get_Key(t2);\r\n                continue SetTreeModule_minimumElementAux;\r\n            }\r\n            else {\r\n                return SetTreeLeaf$1__get_Key(t2);\r\n            }\r\n        }\r\n        else {\r\n            return n;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_minimumElementOpt(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            return some(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(t2), SetTreeLeaf$1__get_Key(t2)));\r\n        }\r\n        else {\r\n            return some(SetTreeLeaf$1__get_Key(t2));\r\n        }\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElementAux(t_mut, n_mut) {\r\n    SetTreeModule_maximumElementAux:\r\n    while (true) {\r\n        const t = t_mut, n = n_mut;\r\n        if (t != null) {\r\n            const t2 = t;\r\n            if (t2 instanceof SetTreeNode$1) {\r\n                t_mut = SetTreeNode$1__get_Right(t2);\r\n                n_mut = SetTreeLeaf$1__get_Key(t2);\r\n                continue SetTreeModule_maximumElementAux;\r\n            }\r\n            else {\r\n                return SetTreeLeaf$1__get_Key(t2);\r\n            }\r\n        }\r\n        else {\r\n            return n;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElementOpt(t) {\r\n    if (t != null) {\r\n        const t2 = t;\r\n        if (t2 instanceof SetTreeNode$1) {\r\n            return some(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(t2), SetTreeLeaf$1__get_Key(t2)));\r\n        }\r\n        else {\r\n            return some(SetTreeLeaf$1__get_Key(t2));\r\n        }\r\n    }\r\n    else {\r\n        return void 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_minimumElement(s) {\r\n    const matchValue = SetTreeModule_minimumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw (new Error(\"Set contains no elements\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_maximumElement(s) {\r\n    const matchValue = SetTreeModule_maximumElementOpt(s);\r\n    if (matchValue == null) {\r\n        throw (new Error(\"Set contains no elements\"));\r\n    }\r\n    else {\r\n        return value_1(matchValue);\r\n    }\r\n}\r\n\r\nexport class SetTreeModule_SetIterator$1 extends Record {\r\n    constructor(stack, started) {\r\n        super();\r\n        this.stack = stack;\r\n        this.started = started;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_SetIterator$1$reflection(gen0) {\r\n    return record_type(\"Set.SetTreeModule.SetIterator`1\", [gen0], SetTreeModule_SetIterator$1, () => [[\"stack\", list_type(option_type(SetTreeLeaf$1$reflection(gen0)))], [\"started\", bool_type]]);\r\n}\r\n\r\nexport function SetTreeModule_collapseLHS(stack_mut) {\r\n    SetTreeModule_collapseLHS:\r\n    while (true) {\r\n        const stack = stack_mut;\r\n        if (!isEmpty_1(stack)) {\r\n            const x = head(stack);\r\n            const rest = tail(stack);\r\n            if (x != null) {\r\n                const x2 = x;\r\n                if (x2 instanceof SetTreeNode$1) {\r\n                    stack_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2)), SetTreeNode$1__get_Right(x2)], rest);\r\n                    continue SetTreeModule_collapseLHS;\r\n                }\r\n                else {\r\n                    return stack;\r\n                }\r\n            }\r\n            else {\r\n                stack_mut = rest;\r\n                continue SetTreeModule_collapseLHS;\r\n            }\r\n        }\r\n        else {\r\n            return empty_1();\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mkIterator(s) {\r\n    return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(singleton_1(s)), false);\r\n}\r\n\r\nexport function SetTreeModule_notStarted() {\r\n    throw (new Error(\"Enumeration not started\"));\r\n}\r\n\r\nexport function SetTreeModule_alreadyFinished() {\r\n    throw (new Error(\"Enumeration already started\"));\r\n}\r\n\r\nexport function SetTreeModule_current(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (isEmpty_1(matchValue)) {\r\n            return SetTreeModule_alreadyFinished();\r\n        }\r\n        else if (head(matchValue) != null) {\r\n            const t = head(matchValue);\r\n            return SetTreeLeaf$1__get_Key(t);\r\n        }\r\n        else {\r\n            throw (new Error(\"Please report error: Set iterator, unexpected stack for current\"));\r\n        }\r\n    }\r\n    else {\r\n        return SetTreeModule_notStarted();\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_moveNext(i) {\r\n    if (i.started) {\r\n        const matchValue = i.stack;\r\n        if (!isEmpty_1(matchValue)) {\r\n            if (head(matchValue) != null) {\r\n                const t = head(matchValue);\r\n                if (t instanceof SetTreeNode$1) {\r\n                    throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\r\n                }\r\n                else {\r\n                    i.stack = SetTreeModule_collapseLHS(tail(matchValue));\r\n                    return !isEmpty_1(i.stack);\r\n                }\r\n            }\r\n            else {\r\n                throw (new Error(\"Please report error: Set iterator, unexpected stack for moveNext\"));\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        i.started = true;\r\n        return !isEmpty_1(i.stack);\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_mkIEnumerator(s) {\r\n    let i = SetTreeModule_mkIterator(s);\r\n    return {\r\n        [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\r\n            return SetTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.get_Current\"]() {\r\n            return SetTreeModule_current(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.MoveNext\"]() {\r\n            return SetTreeModule_moveNext(i);\r\n        },\r\n        [\"System.Collections.IEnumerator.Reset\"]() {\r\n            i = SetTreeModule_mkIterator(s);\r\n        },\r\n        Dispose() {\r\n        },\r\n    };\r\n}\r\n\r\nexport function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {\r\n    SetTreeModule_compareStacks:\r\n    while (true) {\r\n        const comparer = comparer_mut, l1 = l1_mut, l2 = l2_mut;\r\n        const matchValue = [l1, l2];\r\n        if (!isEmpty_1(matchValue[0])) {\r\n            if (!isEmpty_1(matchValue[1])) {\r\n                if (head(matchValue[1]) != null) {\r\n                    if (head(matchValue[0]) != null) {\r\n                        const x1_3 = head(matchValue[0]);\r\n                        const x2_3 = head(matchValue[1]);\r\n                        if (x1_3 instanceof SetTreeNode$1) {\r\n                            if (SetTreeNode$1__get_Left(x1_3) == null) {\r\n                                if (x2_3 instanceof SetTreeNode$1) {\r\n                                    if (SetTreeNode$1__get_Left(x2_3) == null) {\r\n                                        const c = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                        if (c !== 0) {\r\n                                            return c | 0;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\r\n                                            l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        const matchValue_3 = [l1, l2];\r\n                                        let pattern_matching_result, t1_6, x1_4, t2_6, x2_4;\r\n                                        if (!isEmpty_1(matchValue_3[0])) {\r\n                                            if (head(matchValue_3[0]) != null) {\r\n                                                pattern_matching_result = 0;\r\n                                                t1_6 = tail(matchValue_3[0]);\r\n                                                x1_4 = head(matchValue_3[0]);\r\n                                            }\r\n                                            else if (!isEmpty_1(matchValue_3[1])) {\r\n                                                if (head(matchValue_3[1]) != null) {\r\n                                                    pattern_matching_result = 1;\r\n                                                    t2_6 = tail(matchValue_3[1]);\r\n                                                    x2_4 = head(matchValue_3[1]);\r\n                                                }\r\n                                                else {\r\n                                                    pattern_matching_result = 2;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result = 2;\r\n                                            }\r\n                                        }\r\n                                        else if (!isEmpty_1(matchValue_3[1])) {\r\n                                            if (head(matchValue_3[1]) != null) {\r\n                                                pattern_matching_result = 1;\r\n                                                t2_6 = tail(matchValue_3[1]);\r\n                                                x2_4 = head(matchValue_3[1]);\r\n                                            }\r\n                                            else {\r\n                                                pattern_matching_result = 2;\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result = 2;\r\n                                        }\r\n                                        switch (pattern_matching_result) {\r\n                                            case 0: {\r\n                                                if (x1_4 instanceof SetTreeNode$1) {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_4), 0)], t1_6);\r\n                                                    l2_mut = l2;\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                                else {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4))], t1_6);\r\n                                                    l2_mut = l2;\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                            }\r\n                                            case 1: {\r\n                                                if (x2_4 instanceof SetTreeNode$1) {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = l1;\r\n                                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_4), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_4), 0)], t2_6);\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                                else {\r\n                                                    comparer_mut = comparer;\r\n                                                    l1_mut = l1;\r\n                                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4))], t2_6);\r\n                                                    continue SetTreeModule_compareStacks;\r\n                                                }\r\n                                            }\r\n                                            case 2: {\r\n                                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                    if (c_1 !== 0) {\r\n                                        return c_1 | 0;\r\n                                    }\r\n                                    else {\r\n                                        comparer_mut = comparer;\r\n                                        l1_mut = cons(SetTreeNode$1__get_Right(x1_3), tail(matchValue[0]));\r\n                                        l2_mut = cons(SetTreeModule_empty(), tail(matchValue[1]));\r\n                                        continue SetTreeModule_compareStacks;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                const matchValue_4 = [l1, l2];\r\n                                let pattern_matching_result_1, t1_7, x1_5, t2_7, x2_5;\r\n                                if (!isEmpty_1(matchValue_4[0])) {\r\n                                    if (head(matchValue_4[0]) != null) {\r\n                                        pattern_matching_result_1 = 0;\r\n                                        t1_7 = tail(matchValue_4[0]);\r\n                                        x1_5 = head(matchValue_4[0]);\r\n                                    }\r\n                                    else if (!isEmpty_1(matchValue_4[1])) {\r\n                                        if (head(matchValue_4[1]) != null) {\r\n                                            pattern_matching_result_1 = 1;\r\n                                            t2_7 = tail(matchValue_4[1]);\r\n                                            x2_5 = head(matchValue_4[1]);\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_1 = 2;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_1 = 2;\r\n                                    }\r\n                                }\r\n                                else if (!isEmpty_1(matchValue_4[1])) {\r\n                                    if (head(matchValue_4[1]) != null) {\r\n                                        pattern_matching_result_1 = 1;\r\n                                        t2_7 = tail(matchValue_4[1]);\r\n                                        x2_5 = head(matchValue_4[1]);\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_1 = 2;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_1 = 2;\r\n                                }\r\n                                switch (pattern_matching_result_1) {\r\n                                    case 0: {\r\n                                        if (x1_5 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_5), 0)], t1_7);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5))], t1_7);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 1: {\r\n                                        if (x2_5 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_5), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_5), 0)], t2_7);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5))], t2_7);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 2: {\r\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (x2_3 instanceof SetTreeNode$1) {\r\n                            if (SetTreeNode$1__get_Left(x2_3) == null) {\r\n                                const c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                                if (c_2 !== 0) {\r\n                                    return c_2 | 0;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = cons(SetTreeModule_empty(), tail(matchValue[0]));\r\n                                    l2_mut = cons(SetTreeNode$1__get_Right(x2_3), tail(matchValue[1]));\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            else {\r\n                                const matchValue_5 = [l1, l2];\r\n                                let pattern_matching_result_2, t1_8, x1_6, t2_8, x2_6;\r\n                                if (!isEmpty_1(matchValue_5[0])) {\r\n                                    if (head(matchValue_5[0]) != null) {\r\n                                        pattern_matching_result_2 = 0;\r\n                                        t1_8 = tail(matchValue_5[0]);\r\n                                        x1_6 = head(matchValue_5[0]);\r\n                                    }\r\n                                    else if (!isEmpty_1(matchValue_5[1])) {\r\n                                        if (head(matchValue_5[1]) != null) {\r\n                                            pattern_matching_result_2 = 1;\r\n                                            t2_8 = tail(matchValue_5[1]);\r\n                                            x2_6 = head(matchValue_5[1]);\r\n                                        }\r\n                                        else {\r\n                                            pattern_matching_result_2 = 2;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_2 = 2;\r\n                                    }\r\n                                }\r\n                                else if (!isEmpty_1(matchValue_5[1])) {\r\n                                    if (head(matchValue_5[1]) != null) {\r\n                                        pattern_matching_result_2 = 1;\r\n                                        t2_8 = tail(matchValue_5[1]);\r\n                                        x2_6 = head(matchValue_5[1]);\r\n                                    }\r\n                                    else {\r\n                                        pattern_matching_result_2 = 2;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_2 = 2;\r\n                                }\r\n                                switch (pattern_matching_result_2) {\r\n                                    case 0: {\r\n                                        if (x1_6 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_6), 0)], t1_8);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6))], t1_8);\r\n                                            l2_mut = l2;\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 1: {\r\n                                        if (x2_6 instanceof SetTreeNode$1) {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_6), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_6), 0)], t2_8);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                        else {\r\n                                            comparer_mut = comparer;\r\n                                            l1_mut = l1;\r\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6))], t2_8);\r\n                                            continue SetTreeModule_compareStacks;\r\n                                        }\r\n                                    }\r\n                                    case 2: {\r\n                                        throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            const c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\r\n                            if (c_3 !== 0) {\r\n                                return c_3 | 0;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = tail(matchValue[0]);\r\n                                l2_mut = tail(matchValue[1]);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        const x2 = head(matchValue[1]);\r\n                        const matchValue_1 = [l1, l2];\r\n                        let pattern_matching_result_3, t1_2, x1, t2_2, x2_1;\r\n                        if (!isEmpty_1(matchValue_1[0])) {\r\n                            if (head(matchValue_1[0]) != null) {\r\n                                pattern_matching_result_3 = 0;\r\n                                t1_2 = tail(matchValue_1[0]);\r\n                                x1 = head(matchValue_1[0]);\r\n                            }\r\n                            else if (!isEmpty_1(matchValue_1[1])) {\r\n                                if (head(matchValue_1[1]) != null) {\r\n                                    pattern_matching_result_3 = 1;\r\n                                    t2_2 = tail(matchValue_1[1]);\r\n                                    x2_1 = head(matchValue_1[1]);\r\n                                }\r\n                                else {\r\n                                    pattern_matching_result_3 = 2;\r\n                                }\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_3 = 2;\r\n                            }\r\n                        }\r\n                        else if (!isEmpty_1(matchValue_1[1])) {\r\n                            if (head(matchValue_1[1]) != null) {\r\n                                pattern_matching_result_3 = 1;\r\n                                t2_2 = tail(matchValue_1[1]);\r\n                                x2_1 = head(matchValue_1[1]);\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_3 = 2;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_3 = 2;\r\n                        }\r\n                        switch (pattern_matching_result_3) {\r\n                            case 0: {\r\n                                if (x1 instanceof SetTreeNode$1) {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1), 0)], t1_2);\r\n                                    l2_mut = l2;\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1))], t1_2);\r\n                                    l2_mut = l2;\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            case 1: {\r\n                                if (x2_1 instanceof SetTreeNode$1) {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = l1;\r\n                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_1), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_1), 0)], t2_2);\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                                else {\r\n                                    comparer_mut = comparer;\r\n                                    l1_mut = l1;\r\n                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1))], t2_2);\r\n                                    continue SetTreeModule_compareStacks;\r\n                                }\r\n                            }\r\n                            case 2: {\r\n                                throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else if (head(matchValue[0]) != null) {\r\n                    const x1_1 = head(matchValue[0]);\r\n                    const matchValue_2 = [l1, l2];\r\n                    let pattern_matching_result_4, t1_4, x1_2, t2_4, x2_2;\r\n                    if (!isEmpty_1(matchValue_2[0])) {\r\n                        if (head(matchValue_2[0]) != null) {\r\n                            pattern_matching_result_4 = 0;\r\n                            t1_4 = tail(matchValue_2[0]);\r\n                            x1_2 = head(matchValue_2[0]);\r\n                        }\r\n                        else if (!isEmpty_1(matchValue_2[1])) {\r\n                            if (head(matchValue_2[1]) != null) {\r\n                                pattern_matching_result_4 = 1;\r\n                                t2_4 = tail(matchValue_2[1]);\r\n                                x2_2 = head(matchValue_2[1]);\r\n                            }\r\n                            else {\r\n                                pattern_matching_result_4 = 2;\r\n                            }\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_4 = 2;\r\n                        }\r\n                    }\r\n                    else if (!isEmpty_1(matchValue_2[1])) {\r\n                        if (head(matchValue_2[1]) != null) {\r\n                            pattern_matching_result_4 = 1;\r\n                            t2_4 = tail(matchValue_2[1]);\r\n                            x2_2 = head(matchValue_2[1]);\r\n                        }\r\n                        else {\r\n                            pattern_matching_result_4 = 2;\r\n                        }\r\n                    }\r\n                    else {\r\n                        pattern_matching_result_4 = 2;\r\n                    }\r\n                    switch (pattern_matching_result_4) {\r\n                        case 0: {\r\n                            if (x1_2 instanceof SetTreeNode$1) {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x1_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1_2), 0)], t1_4);\r\n                                l2_mut = l2;\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2))], t1_4);\r\n                                l2_mut = l2;\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                        case 1: {\r\n                            if (x2_2 instanceof SetTreeNode$1) {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = l1;\r\n                                l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2_2), SetTreeNode$1_$ctor_Z6E7BE5F7(SetTreeLeaf$1__get_Key(x2_2), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2_2), 0)], t2_4);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                            else {\r\n                                comparer_mut = comparer;\r\n                                l1_mut = l1;\r\n                                l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2))], t2_4);\r\n                                continue SetTreeModule_compareStacks;\r\n                            }\r\n                        }\r\n                        case 2: {\r\n                            throw (new Error(\"unexpected state in SetTree.compareStacks\"));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    comparer_mut = comparer;\r\n                    l1_mut = tail(matchValue[0]);\r\n                    l2_mut = tail(matchValue[1]);\r\n                    continue SetTreeModule_compareStacks;\r\n                }\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        }\r\n        else if (isEmpty_1(matchValue[1])) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_compare(comparer, t1, t2) {\r\n    if (t1 == null) {\r\n        if (t2 == null) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    else if (t2 == null) {\r\n        return 1;\r\n    }\r\n    else {\r\n        return SetTreeModule_compareStacks(comparer, singleton_1(t1), singleton_1(t2)) | 0;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_choose(s) {\r\n    return SetTreeModule_minimumElement(s);\r\n}\r\n\r\nexport function SetTreeModule_toList(t) {\r\n    const loop = (t$0027_mut, acc_mut) => {\r\n        loop:\r\n        while (true) {\r\n            const t$0027 = t$0027_mut, acc = acc_mut;\r\n            if (t$0027 != null) {\r\n                const t2 = t$0027;\r\n                if (t2 instanceof SetTreeNode$1) {\r\n                    t$0027_mut = SetTreeNode$1__get_Left(t2);\r\n                    acc_mut = cons(SetTreeLeaf$1__get_Key(t2), loop(SetTreeNode$1__get_Right(t2), acc));\r\n                    continue loop;\r\n                }\r\n                else {\r\n                    return cons(SetTreeLeaf$1__get_Key(t2), acc);\r\n                }\r\n            }\r\n            else {\r\n                return acc;\r\n            }\r\n            break;\r\n        }\r\n    };\r\n    return loop(t, empty_1());\r\n}\r\n\r\nexport function SetTreeModule_copyToArray(s, arr, i) {\r\n    let j = i;\r\n    SetTreeModule_iter((x) => {\r\n        arr[j] = x;\r\n        j = ((j + 1) | 0);\r\n    }, s);\r\n}\r\n\r\nexport function SetTreeModule_toArray(s) {\r\n    const n = SetTreeModule_count(s) | 0;\r\n    const res = fill(new Array(n), 0, n, null);\r\n    SetTreeModule_copyToArray(s, res, 0);\r\n    return res;\r\n}\r\n\r\nexport function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\r\n    SetTreeModule_mkFromEnumerator:\r\n    while (true) {\r\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\r\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            comparer_mut = comparer;\r\n            acc_mut = SetTreeModule_add(comparer, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), acc);\r\n            e_mut = e;\r\n            continue SetTreeModule_mkFromEnumerator;\r\n        }\r\n        else {\r\n            return acc;\r\n        }\r\n        break;\r\n    }\r\n}\r\n\r\nexport function SetTreeModule_ofArray(comparer, l) {\r\n    return fold_1((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\r\n}\r\n\r\nexport function SetTreeModule_ofList(comparer, l) {\r\n    return fold_2((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\r\n}\r\n\r\nexport function SetTreeModule_ofSeq(comparer, c) {\r\n    if (isArrayLike(c)) {\r\n        return SetTreeModule_ofArray(comparer, c);\r\n    }\r\n    else if (c instanceof FSharpList) {\r\n        return SetTreeModule_ofList(comparer, c);\r\n    }\r\n    else {\r\n        const ie = getEnumerator(c);\r\n        try {\r\n            return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);\r\n        }\r\n        finally {\r\n            disposeSafe(ie);\r\n        }\r\n    }\r\n}\r\n\r\nexport class FSharpSet {\r\n    constructor(comparer, tree) {\r\n        this.comparer = comparer;\r\n        this.tree = tree;\r\n    }\r\n    GetHashCode() {\r\n        const this$ = this;\r\n        return FSharpSet__ComputeHashCode(this$) | 0;\r\n    }\r\n    Equals(that) {\r\n        const this$ = this;\r\n        return (that instanceof FSharpSet) && (SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that)) === 0);\r\n    }\r\n    toString() {\r\n        const this$ = this;\r\n        return (\"set [\" + join(\"; \", map_1((x) => {\r\n            let copyOfStruct = x;\r\n            return toString(copyOfStruct);\r\n        }, this$))) + \"]\";\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return \"FSharpSet\";\r\n    }\r\n    toJSON(_key) {\r\n        const this$ = this;\r\n        return Array.from(this$);\r\n    }\r\n    CompareTo(that) {\r\n        const s = this;\r\n        return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Add2B595\"](x) {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Clear\"]() {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Remove2B595\"](x) {\r\n        throw (new Error(\"ReadOnlyCollection\"));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.Contains2B595\"](x) {\r\n        const s = this;\r\n        return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.CopyToZ2E171D71\"](arr, i) {\r\n        const s = this;\r\n        SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_IsReadOnly\"]() {\r\n        return true;\r\n    }\r\n    [\"System.Collections.Generic.ICollection`1.get_Count\"]() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    [\"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"]() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    GetEnumerator() {\r\n        const s = this;\r\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\r\n    }\r\n    [Symbol.iterator]() {\r\n        return toIterator(this.GetEnumerator());\r\n    }\r\n    [\"System.Collections.IEnumerable.GetEnumerator\"]() {\r\n        const s = this;\r\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\r\n    }\r\n    get size() {\r\n        const s = this;\r\n        return FSharpSet__get_Count(s) | 0;\r\n    }\r\n    add(k) {\r\n        const s = this;\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n        return s;\r\n    }\r\n    clear() {\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n    }\r\n    delete(k) {\r\n        throw (new Error(\"Set cannot be mutated\"));\r\n        return false;\r\n    }\r\n    has(k) {\r\n        const s = this;\r\n        return FSharpSet__Contains(s, k);\r\n    }\r\n    keys() {\r\n        const s = this;\r\n        return map_1((x) => x, s);\r\n    }\r\n    values() {\r\n        const s = this;\r\n        return map_1((x) => x, s);\r\n    }\r\n    entries() {\r\n        const s = this;\r\n        return map_1((v) => [v, v], s);\r\n    }\r\n    forEach(f, thisArg) {\r\n        const s = this;\r\n        iterate_1((x) => {\r\n            f(x, x, s);\r\n        }, s);\r\n    }\r\n}\r\n\r\nexport function FSharpSet$reflection(gen0) {\r\n    return class_type(\"Set.FSharpSet\", [gen0], FSharpSet);\r\n}\r\n\r\nexport function FSharpSet_$ctor(comparer, tree) {\r\n    return new FSharpSet(comparer, tree);\r\n}\r\n\r\nexport function FSharpSet__get_Comparer(set$) {\r\n    return set$.comparer;\r\n}\r\n\r\nexport function FSharpSet__get_Tree(set$) {\r\n    return set$.tree;\r\n}\r\n\r\nexport function FSharpSet_Empty(comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_empty());\r\n}\r\n\r\nexport function FSharpSet__Add(s, value) {\r\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__Remove(s, value) {\r\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__get_Count(s) {\r\n    return SetTreeModule_count(FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Contains(s, value) {\r\n    return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Iterate(s, x) {\r\n    SetTreeModule_iter(x, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__Fold(s, f, z) {\r\n    const f_1 = f;\r\n    return SetTreeModule_fold((x, z_1) => f_1(z_1, x), z, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__get_IsEmpty(s) {\r\n    return FSharpSet__get_Tree(s) == null;\r\n}\r\n\r\nexport function FSharpSet__Partition(s, f) {\r\n    if (FSharpSet__get_Tree(s) == null) {\r\n        return [s, s];\r\n    }\r\n    else {\r\n        const patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));\r\n        return [FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]), FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])];\r\n    }\r\n}\r\n\r\nexport function FSharpSet__Filter(s, f) {\r\n    if (FSharpSet__get_Tree(s) == null) {\r\n        return s;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet__Map(s, f, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_fold((acc, k) => SetTreeModule_add(comparer, f(k), acc), SetTreeModule_empty(), FSharpSet__get_Tree(s)));\r\n}\r\n\r\nexport function FSharpSet__Exists(s, f) {\r\n    return SetTreeModule_exists(f, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet__ForAll(s, f) {\r\n    return SetTreeModule_forall(f, FSharpSet__get_Tree(s));\r\n}\r\n\r\nexport function FSharpSet_op_Subtraction(set1, set2) {\r\n    if (FSharpSet__get_Tree(set1) == null) {\r\n        return set1;\r\n    }\r\n    else if (FSharpSet__get_Tree(set2) == null) {\r\n        return set1;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_op_Addition(set1, set2) {\r\n    if (FSharpSet__get_Tree(set2) == null) {\r\n        return set1;\r\n    }\r\n    else if (FSharpSet__get_Tree(set1) == null) {\r\n        return set2;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_Intersection(a, b) {\r\n    if (FSharpSet__get_Tree(b) == null) {\r\n        return b;\r\n    }\r\n    else if (FSharpSet__get_Tree(a) == null) {\r\n        return a;\r\n    }\r\n    else {\r\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));\r\n    }\r\n}\r\n\r\nexport function FSharpSet_IntersectionMany(sets) {\r\n    return reduce(FSharpSet_Intersection, sets);\r\n}\r\n\r\nexport function FSharpSet_Equality(a, b) {\r\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;\r\n}\r\n\r\nexport function FSharpSet_Compare(a, b) {\r\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));\r\n}\r\n\r\nexport function FSharpSet__get_Choose(x) {\r\n    return SetTreeModule_choose(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__get_MinimumElement(x) {\r\n    return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__get_MaximumElement(x) {\r\n    return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__IsSubsetOf(x, otherSet) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\r\n}\r\n\r\nexport function FSharpSet__IsSupersetOf(x, otherSet) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__IsProperSubsetOf(x, otherSet) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\r\n}\r\n\r\nexport function FSharpSet__IsProperSupersetOf(x, otherSet) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ToList(x) {\r\n    return SetTreeModule_toList(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ToArray(x) {\r\n    return SetTreeModule_toArray(FSharpSet__get_Tree(x));\r\n}\r\n\r\nexport function FSharpSet__ComputeHashCode(this$) {\r\n    let y;\r\n    let res = 0;\r\n    const enumerator = getEnumerator(this$);\r\n    try {\r\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\r\n            const x_1 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\r\n            res = (((y = (structuralHash(x_1) | 0), ((res << 1) + y) + 631)) | 0);\r\n        }\r\n    }\r\n    finally {\r\n        disposeSafe(enumerator);\r\n    }\r\n    return Math.abs(res) | 0;\r\n}\r\n\r\nexport function isEmpty(set$) {\r\n    return FSharpSet__get_IsEmpty(set$);\r\n}\r\n\r\nexport function contains(element, set$) {\r\n    return FSharpSet__Contains(set$, element);\r\n}\r\n\r\nexport function add(value, set$) {\r\n    return FSharpSet__Add(set$, value);\r\n}\r\n\r\nexport function singleton(value, comparer) {\r\n    return FSharpSet__Add(FSharpSet_Empty(comparer), value);\r\n}\r\n\r\nexport function remove(value, set$) {\r\n    return FSharpSet__Remove(set$, value);\r\n}\r\n\r\nexport function union(set1, set2) {\r\n    return FSharpSet_op_Addition(set1, set2);\r\n}\r\n\r\nexport function unionMany(sets, comparer) {\r\n    return fold_3(FSharpSet_op_Addition, FSharpSet_Empty(comparer), sets);\r\n}\r\n\r\nexport function intersect(set1, set2) {\r\n    return FSharpSet_Intersection(set1, set2);\r\n}\r\n\r\nexport function intersectMany(sets) {\r\n    return FSharpSet_IntersectionMany(sets);\r\n}\r\n\r\nexport function iterate(action, set$) {\r\n    FSharpSet__Iterate(set$, action);\r\n}\r\n\r\nexport function empty(comparer) {\r\n    return FSharpSet_Empty(comparer);\r\n}\r\n\r\nexport function forAll(predicate, set$) {\r\n    return FSharpSet__ForAll(set$, predicate);\r\n}\r\n\r\nexport function exists(predicate, set$) {\r\n    return FSharpSet__Exists(set$, predicate);\r\n}\r\n\r\nexport function filter(predicate, set$) {\r\n    return FSharpSet__Filter(set$, predicate);\r\n}\r\n\r\nexport function partition(predicate, set$) {\r\n    return FSharpSet__Partition(set$, predicate);\r\n}\r\n\r\nexport function fold(folder, state, set$) {\r\n    return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));\r\n}\r\n\r\nexport function foldBack(folder, set$, state) {\r\n    return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);\r\n}\r\n\r\nexport function map(mapping, set$, comparer) {\r\n    return FSharpSet__Map(set$, mapping, comparer);\r\n}\r\n\r\nexport function count(set$) {\r\n    return FSharpSet__get_Count(set$);\r\n}\r\n\r\nexport function ofList(elements, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\r\n}\r\n\r\nexport function ofArray(array, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofArray(comparer, array));\r\n}\r\n\r\nexport function toList(set$) {\r\n    return FSharpSet__ToList(set$);\r\n}\r\n\r\nexport function toArray(set$) {\r\n    return FSharpSet__ToArray(set$);\r\n}\r\n\r\nexport function toSeq(set$) {\r\n    return map_1((x) => x, set$);\r\n}\r\n\r\nexport function ofSeq(elements, comparer) {\r\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\r\n}\r\n\r\nexport function difference(set1, set2) {\r\n    return FSharpSet_op_Subtraction(set1, set2);\r\n}\r\n\r\nexport function isSubset(set1, set2) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\r\n}\r\n\r\nexport function isSuperset(set1, set2) {\r\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\r\n}\r\n\r\nexport function isProperSubset(set1, set2) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\r\n}\r\n\r\nexport function isProperSuperset(set1, set2) {\r\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\r\n}\r\n\r\nexport function minElement(set$) {\r\n    return FSharpSet__get_MinimumElement(set$);\r\n}\r\n\r\nexport function maxElement(set$) {\r\n    return FSharpSet__get_MaximumElement(set$);\r\n}\r\n\r\nexport function unionWith(s1, s2) {\r\n    return fold_3((acc, x) => acc.add(x), s1, s2);\r\n}\r\n\r\nexport function newMutableSetWith(s1, s2) {\r\n    if (s1 instanceof HashSet) {\r\n        return HashSet_$ctor_Z6150332D(s2, HashSet__get_Comparer(s1));\r\n    }\r\n    else {\r\n        return new Set(s2);\r\n    }\r\n}\r\n\r\nexport function intersectWith(s1, s2) {\r\n    const s2_1 = newMutableSetWith(s1, s2);\r\n    iterate_1((x) => {\r\n        if (!s2_1.has(x)) {\r\n            s1.delete(x);\r\n        }\r\n    }, s1.values());\r\n}\r\n\r\nexport function exceptWith(s1, s2) {\r\n    iterate_1((x) => {\r\n        s1.delete(x);\r\n    }, s2);\r\n}\r\n\r\nexport function isSubsetOf(s1, s2) {\r\n    const s2_1 = newMutableSetWith(s1, s2);\r\n    return forAll_1((arg00) => s2_1.has(arg00), s1.values());\r\n}\r\n\r\nexport function isSupersetOf(s1, s2) {\r\n    return forAll_1((arg00) => s1.has(arg00), s2);\r\n}\r\n\r\nexport function isProperSubsetOf(s1, s2) {\r\n    const s2_1 = newMutableSetWith(s1, s2);\r\n    if (s2_1.size > s1.size) {\r\n        return forAll_1((arg00) => s2_1.has(arg00), s1.values());\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function isProperSupersetOf(s1, s2) {\r\n    const s2_1 = cache(s2);\r\n    if (exists_1((arg) => (!s1.has(arg)), s2_1)) {\r\n        return forAll_1((arg00_1) => s1.has(arg00_1), s2_1);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n\r\n","module Client.Sidebar\n\nopen Client.Widgets.General\nopen Elmish\nopen Feliz\nopen Feliz.Bulma\nopen Fable.React\n\n\ntype Html with\n    static member inline ofOption (element : ReactElement option) : ReactElement =\n        match element with\n        | Some element -> element\n        | None -> Html.none\n\ntype Model =\n    { IsExpanded : bool\n      WidgetState : Set<string>\n      Settings : Widgets.Settings.Model\n      General : Widgets.General.Model }\n\ntype Msg =\n    | GeneralMsg of Widgets.General.Msg\n    | SettingsMsg of Widgets.Settings.Msg\n    | ToggleWidget of string\n    | ToggleState\n\ntype ExternalMsg =\n    | Reset\n    | UploadSdf of name : string * src : string\n    | DownloadSvg\n    | GotShowHydrogenAtoms\n    | GotDepiction\n    | GotXRotation of float\n    | GotYRotation of float\n    | GotZRotation of float\n    | NoOp\n\nlet init () =\n    let settingsModel, settingsCmd = Widgets.Settings.init()\n    let cmd = Cmd.map SettingsMsg settingsCmd\n    let model =\n        { IsExpanded = true\n          WidgetState = Set.empty.Add(\"General\").Add(\"Settings\")\n          General = Widgets.General.init()\n          Settings = settingsModel }\n    model, cmd\n\nlet update (msg : Msg) (model : Model) : Model * Cmd<Msg> * ExternalMsg =\n    match msg with\n    | GeneralMsg msg ->\n        let generalModel, externalMsg = update msg model.General\n        let externalMsg =\n            match externalMsg with\n            | ExternalMessage.NoOp -> NoOp\n            | ExternalMessage.Reset -> Reset\n            | ExternalMessage.UploadSdf (name, src) -> UploadSdf (name, src)\n            | ExternalMessage.DownloadSvg -> DownloadSvg\n        { model with General = generalModel }, Cmd.none, externalMsg\n    | SettingsMsg msg ->\n        let settingsModel, externalMsg = Widgets.Settings.update msg model.Settings\n        let externalMsg =\n            match externalMsg with\n            | Widgets.Settings.NoOp -> ExternalMsg.NoOp\n            | Widgets.Settings.GotShowHydrogenAtoms -> ExternalMsg.GotShowHydrogenAtoms\n            | Widgets.Settings.GotDepiction -> ExternalMsg.GotDepiction\n            | Widgets.Settings.GotXRotation rotation -> ExternalMsg.GotXRotation rotation\n            | Widgets.Settings.GotYRotation rotation -> ExternalMsg.GotYRotation rotation\n            | Widgets.Settings.GotZRotation rotation -> ExternalMsg.GotZRotation rotation\n        { model with Settings = settingsModel }, Cmd.map SettingsMsg Cmd.none, externalMsg\n    | ToggleWidget id ->\n        let newWidgetState =\n            if model.WidgetState.Contains id then model.WidgetState.Remove id\n            else model.WidgetState.Add id\n        { model with WidgetState = newWidgetState }, Cmd.none, NoOp\n    | ToggleState -> { model with IsExpanded = not model.IsExpanded }, Cmd.none, NoOp\n\nlet private renderExpandedWidgets (states : Set<string>) dispatch (title, icon, widget : ReactElement, maxHeight : int option) =\n    let baseView headerIcon content =\n        Bulma.card [\n            Bulma.cardHeader [\n                prop.onClick (fun _ -> ToggleWidget title |> dispatch )\n                prop.children [\n                    Bulma.cardHeaderTitle.div [\n                        Bulma.icon [\n                            prop.style [\n                                Feliz.style.marginRight (length.em 0.5)\n                            ]\n                            prop.children [\n                                icon\n                            ]\n                        ]\n                        Html.text title\n                    ]\n                    Bulma.cardHeaderIcon.span [\n                        Bulma.icon [\n                            icon\n                        ]\n                    ]\n                ]\n            ]\n            Html.ofOption content\n        ]\n    if states.Contains title then\n            baseView (Html.i [ prop.className \"fas fa-angle-down\" ]) None\n        else\n            let props : IReactProperty list =\n                match maxHeight with\n                | Some maxHeight ->\n                    [\n                        prop.style [\n                            Feliz.style.maxHeight (length.px maxHeight)\n                            Feliz.style.overflowY.auto\n                        ]\n                    ]\n                | None -> []\n            baseView (Html.i [ prop.className \"fas fa-angle-up\" ]) (Some (Bulma.cardContent [yield! props; prop.children widget]))\n\nlet renderCollapsedWidgets dispatch (title, faIcon, widget: ReactElement, maxHeight: int option) =\n    let props =\n        match maxHeight with\n        | Some maxHeight ->\n            [\n                prop.style [\n                    Feliz.style.maxHeight maxHeight\n                    Feliz.style.overflowY.auto\n                ]\n            ]\n        | None -> []\n\n    Html.div [\n        prop.className \"item\"\n        prop.children [\n            Bulma.icon [\n                prop.className \"is-large\"\n                prop.children [\n                    faIcon\n                ]\n            ]\n            Bulma.card [\n                prop.className \"item-content\"\n                prop.children [\n                    Bulma.cardHeader [\n                        prop.onClick (fun _ -> ToggleWidget title |> dispatch )\n                        prop.children [\n                            Bulma.cardHeaderTitle.div title\n                        ]\n                    ]\n                    Bulma.cardContent [\n                        yield! props\n                        prop.children widget\n                    ]\n                ]\n            ]\n        ]\n    ]\n\n\nlet private renderWidgets model dispatch (title, icon, widget, maxHeight) =\n    match model.IsExpanded with\n    | true ->\n        renderExpandedWidgets model.WidgetState dispatch (title, icon, widget, maxHeight)\n    | false ->\n        renderCollapsedWidgets dispatch (title, icon, widget, maxHeight)\n\nlet private collapseButton dispatch =\n    Bulma.card [\n        prop.onClick (fun _ -> dispatch ToggleState)\n        prop.children [\n            Bulma.cardHeader [\n                Bulma.cardHeaderTitle.div \"Collapse\"\n                Bulma.cardHeaderIcon.span [\n                    Bulma.icon [\n                        (Html.i [ prop.className \"fas fa-angle-double-left\" ])\n                    ]\n                ]\n            ]\n        ]\n    ]\n\n\nlet private expandButton dispatch =\n    Bulma.card [\n        prop.onClick (fun _ -> dispatch ToggleState)\n        prop.children [\n            Bulma.cardHeader [\n                Bulma.cardHeaderIcon.span [\n                    Bulma.icon [\n                        (Html.i [ prop.className \"fas fa-angle-double-right\" ])\n                    ]\n                ]\n            ]\n        ]\n    ]\n\nlet private sidebarContainer dispatch (sections : ReactElement list) =\n    Html.div [\n        prop.className \"sidebar is-expanded\"\n        prop.children [\n            Html.div [\n                prop.className \"brand\"\n                prop.children [\n                    Bulma.title.h4 \"\"\n                ]\n            ]\n            Html.div [\n                prop.className \"widgets-list\"\n                prop.children sections\n            ]\n//            collapseButton dispatch\n        ]\n    ]\n\nlet view (model : Model) (dispatch : Msg -> unit) : ReactElement =\n    let widgets =\n        [\n            if model.IsExpanded then\n                \"General\", (Html.i [ prop.className \"fas fa-book\" ]), Widgets.General.viewExpanded model.General (GeneralMsg >> dispatch), None\n            \"Settings\", (Html.i [ prop.className \"fas fa-cog\" ]), Widgets.Settings.view model.Settings (SettingsMsg >> dispatch), Some 300\n        ]\n        |> List.map (renderWidgets model dispatch)\n\n    if model.IsExpanded then\n        sidebarContainer dispatch widgets\n    else\n        let generalCollapsedView =\n            viewCollapsed model.General (GeneralMsg >> dispatch)\n\n        Html.div [\n            prop.className \"sidebar is-collapsed\"\n            prop.children [\n                viewModalResetConfirmation model.General (GeneralMsg >> dispatch)\n\n                Html.div [\n                    prop.className \"brand\"\n                ]\n                Html.div [\n                    prop.className \"widgets-list\"\n                    prop.children (generalCollapsedView::widgets)\n                ]\n                expandButton dispatch\n            ]\n        ]\n","module Client.Index\n\nopen Browser\nopen Browser.Types\nopen Elmish\nopen Fable\nopen Fable.Core\nopen Fable.React\nopen Fable.React.Props\nopen Fable.Remoting.Client\nopen Feliz\nopen Feliz.Bulma\nopen Fulma\nopen Shared\nopen System\n\nopen Client.Cinemole.Render\n\n//type Position = { X: float; Y: float }\n\n//type DragTarget =\n//    | Dragging\n//    | NoTarget\n\n//[<RequireQualifiedAccess>]\n//module Cmd =\n//    let ups messageCtor =\n//        let handler dispatch = window.addEventListener(\"mouseup\", fun _ -> dispatch messageCtor)\n//        [ handler ]\n//\n//    let move messageCtor =\n//        let handler dispatch =\n//            window.addEventListener(\"mousemove\", fun ev ->\n//                let ev = ev :?> MouseEvent\n//                { X = ev.pageX; Y = ev.pageY } |> messageCtor |> dispatch)\n//        [ handler ]\n\ntype Model =\n    { Assignment: Assignment\n      Svg: string\n      Encoded: string\n      Sidebar: Sidebar.Model }\n//      DragTarget: DragTarget }\n\ntype Msg =\n    | UploadSdf of name: string * content: string\n    | Render\n    | GotEncoding of svg: string * encodedSvg: string * viewBox: ViewBox\n    | SidebarMsg of Sidebar.Msg\n    | SetXRotation of float\n    | SetYRotation of float\n    | SetZRotation of float\n//    | MouseUp\n//    | MouseMove of Position\n//    | MouseDrag of Position\n//    | MouseDragStarted of Guid * Position\n//    | MouseDragEnded\n\n//let cinemoleApi =\n//    Remoting.createApi ()\n//    |> Remoting.withRouteBuilder Route.builder\n//    |> Remoting.buildProxy<ICinemoleApi>\n\nlet init () : Model * Cmd<Msg> =\n    let sidebarModel, sidebarCmd = Sidebar.init()\n    let cmd = Cmd.batch [\n        Cmd.map SidebarMsg sidebarCmd\n//        Cmd.ups MouseUp\n//        Cmd.move MouseMove\n    ]\n    let model =\n        { Assignment = { Sdf = \"\"; Settings = { ViewBox = None\n                                                Depiction = Filled\n                                                ShowHydrogenAtoms = false\n                                                XRotation = 0.5\n                                                YRotation = 0.5\n                                                ZRotation = 0.5 } }\n          Svg = \"\"\n          Encoded = \"\"\n          Sidebar = sidebarModel }\n//          DragTarget = NoTarget }\n    model, cmd\n\nlet downloadSvg (svg : string) =\n    let anchor = Dom.document.createElement \"a\"\n    let contentReplace (oldValue: string) (newValue: string) (msg: string) = msg.Replace(oldValue, newValue)\n    let encodedContent =\n        svg\n        |> sprintf \"data:text/plain;charset=utf-8,%s\"\n        |> JS.encodeURI\n        |> contentReplace \"#\" \"%23\"\n    anchor.setAttribute(\"href\", encodedContent)\n    anchor.setAttribute(\"download\", \"model.svg\")\n    anchor.click()\n\nlet update (msg: Msg) (model: Model) : Model * Cmd<Msg> =\n    match msg with\n    | UploadSdf (_, content) ->\n        { model with Assignment = { model.Assignment with Sdf = content } },\n        Cmd.ofMsg Render\n    | Render ->\n        model,\n        Cmd.OfAsync.perform render model.Assignment GotEncoding\n    | GotEncoding (svg, encodedSvg, viewBox) ->\n        let assignment = { model.Assignment with Settings = { model.Assignment.Settings with ViewBox = Some viewBox } }\n        { model with Encoded = encodedSvg; Svg = svg; Assignment = assignment },\n        Cmd.none\n    | SetXRotation f ->\n        { model with Assignment = { model.Assignment with Settings = { model.Assignment.Settings with XRotation = f } } },\n        Cmd.OfAsync.perform render model.Assignment GotEncoding\n    | SetYRotation f ->\n        { model with Assignment = { model.Assignment with Settings = { model.Assignment.Settings with YRotation = f } } },\n        Cmd.OfAsync.perform render model.Assignment GotEncoding\n    | SetZRotation f ->\n        { model with Assignment = { model.Assignment with Settings = { model.Assignment.Settings with ZRotation = f } } },\n        Cmd.OfAsync.perform render model.Assignment GotEncoding\n//    | MouseUp ->\n//          model, Cmd.ofMsg MouseDragEnded\n//    | MouseMove (position: Position) ->\n//          model, Cmd.ofMsg (MouseDrag position)\n//    | MouseDragStarted (guid, position) ->\n//        { model with DragTarget = Dragging }, Cmd.none\n//    | MouseDragEnded ->\n//        { model with DragTarget = NoTarget }, Cmd.none\n//    | MouseDrag (position: Position) ->\n//        match model.DragTarget with\n//        | Dragging -> model, Cmd.ofMsg (SetRotation position.X)\n//        | _ -> model, Cmd.none\n    | SidebarMsg msg ->\n        let subModel, cmd, externalMsg = Sidebar.update msg model.Sidebar\n        let newModel, extraCmd =\n            match externalMsg with\n            | Sidebar.NoOp ->\n                model, Cmd.none\n            | Sidebar.Reset ->\n                let assignment = { model.Assignment with Sdf = \"\"; Settings = { model.Assignment.Settings with ViewBox = None } }\n                { model with Encoded = \"\"; Svg = \"\"; Assignment = assignment },\n                Cmd.OfAsync.perform render assignment GotEncoding\n            | Sidebar.UploadSdf (_, src) ->\n                let assignment = { model.Assignment with Sdf = src }\n                { model with Assignment = assignment }, Cmd.ofMsg Render\n            | Sidebar.DownloadSvg ->\n                printf $\"svg: {model.Svg}\"\n                downloadSvg model.Svg\n                model, Cmd.none\n            | Sidebar.GotShowHydrogenAtoms ->\n                let switch = not model.Assignment.Settings.ShowHydrogenAtoms\n                let assignment = { model.Assignment with Settings = { model.Assignment.Settings with ShowHydrogenAtoms = switch } }\n                { model with Assignment = assignment },\n                Cmd.OfAsync.perform render assignment GotEncoding\n            | Sidebar.GotDepiction ->\n                let switch = if model.Assignment.Settings.Depiction = BallAndStick then Filled else BallAndStick\n                let assignment = { model.Assignment with Settings = { model.Assignment.Settings with Depiction = switch } }\n                { model with Assignment = assignment },\n                Cmd.OfAsync.perform render assignment GotEncoding\n            | Sidebar.GotXRotation rotation ->\n                model, Cmd.ofMsg (SetXRotation rotation)\n            | Sidebar.GotYRotation rotation ->\n                model, Cmd.ofMsg (SetYRotation rotation)\n            | Sidebar.GotZRotation rotation ->\n                model, Cmd.ofMsg (SetZRotation rotation)\n        { newModel with Sidebar = subModel }, Cmd.batch [ Cmd.map SidebarMsg cmd; extraCmd ]\n\n\nlet private uploadFileEvent dispatch =\n    Fulma.File.input [\n        Props [\n            OnInput (\n                fun ev ->\n                    let file = (ev.target :?> HTMLInputElement).files.[0]\n                    let name = file.name\n                    let reader = FileReader.Create()\n                    reader.onload <- fun _ ->\n                        let content = reader.result :?> string\n                        (name, content) |> UploadSdf |> dispatch\n                    reader.readAsText file )\n        ]\n    ]\n\nlet private uploadFileButton dispatch =\n    Html.div [\n        prop.children [\n            Bulma.button.a [\n                button.isOutlined\n                button.isFullWidth\n                color.isBlack\n                prop.children [\n                    Html.span \"select SDF (Mol V2000) file\"\n                    uploadFileEvent dispatch\n                ]\n            ]\n        ]\n    ]\n\nlet private svgViewer model =\n    let svg =\n        match model.Encoded with\n        | e when e.Length = 0 -> \"\"\n        | _ -> $\"data:image/svg+xml;base64,{model.Encoded}\"\n\n    Html.div [\n        prop.className \"viewer\"\n        prop.children [\n            img [\n                Class \"svg\"\n                Src svg\n            ]\n        ]\n    ]\n\nlet view (model: Model) (dispatch: Msg -> unit) =\n    Html.div [\n        prop.className \"cinemole\"\n        prop.children [\n            Sidebar.view model.Sidebar (SidebarMsg >> dispatch)\n            svgViewer model\n        ]\n    ]","namespace Elmish.React\n\n[<AutoOpen>]\nmodule Helpers =\n    open Fable.React.Props\n    open Fable.Core.JsInterop\n\n    /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n    /// Can be used instead of `DefaultValue` and `Value` props to override input box value.\n    let inline valueOrDefault value =\n        Ref <| (fun e -> if e |> isNull |> not && !!e?value <> !!value then e?value <- !!value)\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n\n        open Fable.React\n        open Browser\n        open Elmish\n\n        let withReactBatchedUsing lazyView2With placeholderId (program:Program<_,_,_,_>) =\n            let mutable lastRequest = None\n            let setState model dispatch =\n                match lastRequest with\n                | Some r -> window.cancelAnimationFrame r\n                | _ -> ()\n\n                lastRequest <- Some (window.requestAnimationFrame (fun _ ->\n                    ReactDom.render(\n                        lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                        document.getElementById placeholderId\n                    )))\n\n            program\n            |> Program.withSetState setState\n\n        let withReactSynchronousUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n        let withReactHydrateUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.hydrate(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n    /// NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n    let withReactBatched placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// New renders are triggered immediately after an update.\n    let withReactSynchronous placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let withReactUnoptimized placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n    let withReactHydrate placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactHydrateUsing lazyView2With placeholderId program\n","(**\nProgram\n---------\nCore abstractions for creating and running the dispatch loop.\n\n*)\n\nnamespace Elmish\n\n\n/// Program type captures various aspects of program behavior\ntype Program<'arg, 'model, 'msg, 'view> = private {\n    init : 'arg -> 'model * Cmd<'msg>\n    update : 'msg -> 'model -> 'model * Cmd<'msg>\n    subscribe : 'model -> Cmd<'msg>\n    view : 'model -> Dispatch<'msg> -> 'view\n    setState : 'model -> Dispatch<'msg> -> unit\n    onError : (string*exn) -> unit\n    syncDispatch: Dispatch<'msg> -> Dispatch<'msg>\n}\n\n/// Program module - functions to manipulate program instances\n[<RequireQualifiedAccess>]\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule Program =\n    /// Typical program, new commands are produced by `init` and `update` along with the new state.\n    let mkProgram \n        (init : 'arg -> 'model * Cmd<'msg>) \n        (update : 'msg -> 'model -> 'model * Cmd<'msg>)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init\n          update = update\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Simple program that produces only new state with `init` and `update`.\n    let mkSimple \n        (init : 'arg -> 'model) \n        (update : 'msg -> 'model -> 'model)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init >> fun state -> state,Cmd.none\n          update = fun msg -> update msg >> fun state -> state,Cmd.none\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Subscribe to external source of events.\n    /// The subscription is called once - with the initial model, but can dispatch new messages at any time.\n    let withSubscription (subscribe : 'model -> Cmd<'msg>) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let sub model =\n            Cmd.batch [ program.subscribe model\n                        subscribe model ]\n        { program with subscribe = sub }\n\n    /// Trace all the updates to the console\n    let withConsoleTrace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let traceInit (arg:'arg) =\n            let initModel,cmd = program.init arg\n            Log.toConsole (\"Initial state:\", initModel)\n            initModel,cmd\n\n        let traceUpdate msg model =\n            Log.toConsole (\"New message:\", msg)\n            let newModel,cmd = program.update msg model\n            Log.toConsole (\"Updated state:\", newModel)\n            newModel,cmd\n\n        { program with\n            init = traceInit \n            update = traceUpdate }\n\n    /// Trace all the messages as they update the model\n    let withTrace trace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let update msg model =\n            let state,cmd = program.update msg model\n            trace msg state\n            state,cmd\n        { program\n            with update = update }\n\n    /// Handle dispatch loop exceptions\n    let withErrorHandler onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = onError }\n\n    /// For library authors only: map existing error handler and return new `Program` \n    let mapErrorHandler map (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = map program.onError }\n\n    /// For library authors only: get the current error handler \n    let onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        program.onError\n\n    /// For library authors only: function to render the view with the latest state \n    let withSetState (setState:'model -> Dispatch<'msg> -> unit)\n                     (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with setState = setState }\n\n    /// For library authors only: return the function to render the state \n    let setState (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.setState\n\n    /// For library authors only: return the view function \n    let view (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.view\n\n    /// For library authors only: function to synchronize the dispatch function\n    let withSyncDispatch (syncDispatch:Dispatch<'msg> -> Dispatch<'msg>)\n                         (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with syncDispatch = syncDispatch }\n\n    /// For library authors only: map the program type\n    let map mapInit mapUpdate mapView mapSetState mapSubscribe\n            (program: Program<'arg, 'model, 'msg, 'view>) =\n        { init = mapInit program.init\n          update = mapUpdate program.update\n          view = mapView program.view\n          setState = mapSetState program.setState\n          subscribe = mapSubscribe program.subscribe\n          onError = program.onError\n          syncDispatch = id }\n\n    /// Start the program loop.\n    /// arg: argument to pass to the init() function.\n    /// program: program created with 'mkSimple' or 'mkProgram'.\n    let runWith (arg: 'arg) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let (model,cmd) = program.init arg\n        let rb = RingBuffer 10\n        let mutable reentered = false\n        let mutable state = model        \n        let rec dispatch msg = \n            if reentered then\n                rb.Push msg\n            else\n                reentered <- true\n                let mutable nextMsg = Some msg\n                while Option.isSome nextMsg do\n                    let msg = nextMsg.Value\n                    try\n                        let (model',cmd') = program.update msg state\n                        program.setState model' syncDispatch\n                        cmd' |> Cmd.exec (fun ex -> program.onError (sprintf \"Error in command while handling: %A\" msg, ex)) syncDispatch\n                        state <- model'\n                    with ex ->\n                        program.onError (sprintf \"Unable to process the message: %A\" msg, ex)\n                    nextMsg <- rb.Pop()\n                reentered <- false\n        and syncDispatch = program.syncDispatch dispatch            \n\n        program.setState model syncDispatch\n        let sub = \n            try \n                program.subscribe model \n            with ex ->\n                program.onError (\"Unable to subscribe:\", ex)\n                Cmd.none\n        Cmd.batch [sub; cmd]\n        |> Cmd.exec (fun ex -> program.onError (\"Error intitializing:\", ex)) syncDispatch\n\n    /// Start the dispatch loop with `unit` for the init() function.\n    let run (program: Program<unit, 'model, 'msg, 'view>) = runWith () program\n","module App\n\nopen Client\nopen Index\nopen Elmish\nopen Elmish.React\n\n#if DEBUG\nopen Elmish.Debug\nopen Elmish.HMR\n#endif\n\nProgram.mkProgram init update view\n#if DEBUG\n|> Program.withConsoleTrace\n#endif\n|> Program.withReactSynchronous \"elmish-app\"\n#if DEBUG\n|> Program.withDebugger\n#endif\n|> Program.run"],"names":["x","Array","isArray","ArrayBuffer","isView","Dispose","sameConstructor","y","Object","getPrototypeOf","constructor","Enumerator","iter","this","current","cur","next","value","done","Error","o","GetEnumerator","Symbol","iterator","en","hasNext","undefined","padWithZeros","i","length","str","toString","date","date1","offset","kind","getTimezoneOffset","radix","ObjectRef","static","idMap","has","set","count","get","stringHash","s","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","GetHashCode","isHashable","arrayHash","Date","getTime","dateHash","values","map","v","id","equalArraysWith","eq","Equals","isEquatable","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","compareArrays","comp","j","compareArraysWith","compare","CompareTo","isComparable","key","compareObjects","max","comparer","fields","obj","kv","WeakMap","CURRIED","arity","f","uncurried","args","res","_curry","arg","concat","callStack","self","seqToString","cons","entries","k","join","name","String","cases","tag","toJSON","fieldStr","withParens","indexOf","unionToString","splice","other","recordToJSON","recordToString","recordGetHashCode","recordEquals","thisNames","recordCompareTo","result","FSharpRef","contentsOrGetter","setter","getter","contents","dateOffsetToString","isMinus","minutes","Math","abs","dateToHalfUTCString","half","toISOString","substring","dateToStringWithCustomFormat","format","utc","replace","match","rep","Number","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","isNaN","symbol","sd","toPrecision","dp","toExponential","toHex","fsFormatRegExp","printf","input","cont","lastIndex","strParts","matches","strIdx","exec","matchIndex","index","push","createPrinter","continuePrint","toConsole","console","log","toText","formatReplacement","flags","padLength","precision","sign","toLowerCase","isLessThan","multiply","parseInt","toFixed","toUpperCase","_provider","_a","_b","_c","d","dateWithOffset","dateToISOStringWithOffset","dateToStringWithOffset","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","dateToStringWithKind","zeroFlag","minusFlag","ch","padLeft","_strParts","_matches","_result","padArg","slice","_padLength","isNullOrEmpty","delimiter","xs","from","isRight","Helpers_allocateArrayFromCons","target","targetIndex","start","fill","source","head","tail","super","xs_1_mut","ys_1_mut","loop","xs_1","ys_1","matchValue","xt","yt","i_mut","h_mut","t","_key","c","ListEnumerator$1","it","__","FSharpList_get_Empty","FSharpList_Cons_305B8EAC","FSharpList__get_IsEmpty","FSharpList__get_Head","FSharpList__get_Tail","folder","state","acc","action","unitVar0","ofArrayWithTail","tail_1","ys","mapping","root","node","t_2","setPrototypeOf","prototype","Trampoline","callCount","maxTrampolineCallCount","incrementAndCheck","hijack","setTimeout","ctx","cancelToken","isCancelled","onCancel","trampoline","err","onError","Bind","computation","binder","onSuccess","ex","Combine","computation1","computation2","Delay","generator","For","sequence","body","While","Return","ReturnFrom","TryFinally","compensation","TryWith","catchHandler","ex2","Using","resource","guard","Zero","FSharpChoice$2","emptyContinuation","_x","defaultCancellationToken","cancelled","_id","_cancelled","_listeners","Map","cancel","listener","addListener","removeListener","delete","register","$","startImmediate","cancellationToken","continuation","exceptionContinuation","cancellationContinuation","startWithContinuations","Some","delegates","Add","_addHandler","Publish","Trigger","senderOrValue","valueOrUndefined","sender","forEach","AddHandler","handler","RemoveHandler","_removeHandler","Subscribe","callback","OnNext","onNext","onCompleted","OnError","_e","OnCompleted","interval","returnVal","_enabled","_isDisposed","_intervalId","_timeoutId","Interval","AutoReset","_elapsed","Elapsed","Enabled","setInterval","clearTimeout","clearInterval","Close","Start","Stop","dispatch","cmd","call","g","cmds","lists","enumerator","xs_6","msg","task","ofSuccess","work","Choice_makeChoice1Of2","_arg1","r","Enumerator_notStarted","Enumerator_alreadyFinished","Enumerator_Seq","e","Enumerator_FromFunctions$1","dispose","Enumerator_noReset","Enumerator_FromFunctions$1_$ctor_58C54629","Enumerator_generateWhileSome","openf","compute","closef","curr","started","x_1","finish","matchValue_1","mkSeq","Enumerator_Seq_$ctor_673A07F2","argName","Operators_NullArg","sources","outerOpt","innerOpt","finished","inner","outer","copyOfStruct","inner_1","outer_1","Enumerator_concat","ar","FSharpList__get_Length","toArray","toList","xs_3","xs_5","ofSeq","create","e_1","_","Enumerator_enumerateThenFinally","integralRangeStep","step","stop","zero","add","stepFn","stepComparedWithZero","stepGreaterThanZero","comparedWithLast","makeRangeStepFunction","st_1","Enumerator_unfold","rangeDouble","size","wix","rix","items","rix'","item","wix'","ix","props","nextProps","_nextState","model","factor","p1","p2","p","Y","Z","c2","X","u","axis","rad","tupledArg","message","defValue","test","list2","d_cap","tryParseFloat","InputError","sdf","array","lines","l","atomCount","z","activePatternResult23562","m","reg","startAt","pattern","options","RegExp","atomLine","atomType","atom","identifyAtom","center","castToFloat","radius","toEncode","inArray","fromCharCode","btoa","notSupported","StringBuilder","capacity","buf","patternInput","d5","d4","dodgerBlue","mutedRed","amber","lightGrey","grey","orient","prev","es","included","a","_arg1_0","_arg1_1","_arg1_2","_arg1_3","dist","ProjectedCenter","ProjectedRadius","A","B","C","intersectionCenter","alpha","R","clipping","atoms","sb","c_p1","r_p1","c_p2","r_p2","x2","y2","viewBox_0","viewBox","depiction","showHydrogenAtoms","rotX","rotY","rotZ","parseSdf","filterAtoms","offsetViewBox","digits","pow","n","floor","round","reduction","reduction_1","Compare","focalLength","pov","distPovOrigin","projection","cameraForward","cameraPerpendicular","cameraHorizon","writeSVG","scaleFactor","perspectiveProjection","pointVector","physicalProjection","project","assignment","draw","Settings","ViewBox","ShowHydrogenAtoms","XRotation","YRotation","ZRotation","Sdf","svg","encodedSvg","TypeInfo","fullname","generics","construct","parent","enumCases","fullName","getHashCode","getGenerics","t1","t2","getRecordElements","k1","v1","k2","v2","elemType","getElementType","assertUnion","case","screen","cl","cls","option","modifiers","arg10","level","display","typ","amount","direction","dashify","separator","charAt","parser","baseClass","baseProps","caseRule","definedCaseRule","fail","kvPair","assign","changeCase","cn","classes","ev","file","reader","FileReader","elms","elems","children","renderItem","wrapped","text","fileInputEvent","_arg2","_arg3","ResetState","SetTreeLeaf$1","SetTreeLeaf$1_$ctor_2B595","SetTreeLeaf$1__get_Key","SetTreeNode$1","left","right","SetTreeNode$1_$ctor_Z6E7BE5F7","SetTreeNode$1__get_Left","SetTreeNode$1__get_Right","SetTreeNode$1__get_Height","SetTreeModule_countAux","t_mut","acc_mut","SetTreeModule_count","SetTreeModule_mk","hl","hr","t2_1","SetTreeModule_rebalance","t2_3","t_3","t2_4","t1h","t2h","t2_2","matchValue_2","matchValue_3","SetTreeModule_add","c_1","SetTreeModule_empty","SetTreeModule_spliceOutSuccessor","SetTreeModule_remove","SetTreeModule_mem","comparer_mut","k_mut","SetTreeModule_iter","f_mut","SetTreeModule_SetIterator$1","stack","SetTreeModule_collapseLHS","stack_mut","rest","SetTreeModule_mkIterator","SetTreeModule_current","SetTreeModule_alreadyFinished","SetTreeModule_notStarted","SetTreeModule_mkIEnumerator","SetTreeModule_moveNext","SetTreeModule_compare","l1_mut","l2_mut","SetTreeModule_compareStacks","l1","l2","x1_3","x2_3","pattern_matching_result","t1_6","x1_4","t2_6","x2_4","matchValue_4","pattern_matching_result_1","t1_7","x1_5","t2_7","x2_5","c_3","c_2","matchValue_5","pattern_matching_result_2","t1_8","x1_6","t2_8","x2_6","pattern_matching_result_3","t1_2","x1","x2_1","pattern_matching_result_4","t1_4","x1_2","x2_2","SetTreeModule_copyToArray","arr","FSharpSet","tree","this$","FSharpSet__ComputeHashCode","that","FSharpSet__get_Comparer","FSharpSet__get_Tree","toStringTag","FSharpSet__get_Count","clear","FSharpSet__Contains","thisArg","FSharpSet_$ctor","set$","FSharpSet_Empty","FSharpSet__Add","widgets","title","icon","widget","maxHeight","states","properties","baseView","headerIcon","content","element","renderExpandedWidgets","WidgetState","faIcon","renderCollapsedWidgets","renderWidgets","General","IsExpanded","sections","sidebarContainer","generalCollapsedView","uploadIcon","downloadIcon","refreshIcon","actionButton","viewCollapsed","viewModalResetConfirmation","expandButton","Encoded","program","init","rb","reentered","syncDispatch","nextMsg","update","model'","subscribe","view","arg0","inputRecord","Assignment","externalMsg","ExternalMsg","ExternalMessage","Sidebar","Svg","anchor","encodedContent","downloadSvg","Depiction","newModel","svgViewer","lazyView2With","placeholderId","setState","document","getElementById","equal"],"sourceRoot":""}